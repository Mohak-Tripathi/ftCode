author: mongoose-os
description: A Mongoose OS app skeleton
version: 1.0

libs_version: ${mos.version}
modules_version: ${mos.version}
mongoose_os_version: ${mos.version}

# Optional. List of tags for online search.
tags:
  - c

# List of files / directories with C sources. No slashes at the end of dir names.
sources:
  - src
  # Including required sensor and driver libraries
  - drivers
  - drivers/ics43434
  - drivers/ms5637
  - drivers/PCA9548ADWR
  - drivers/scd30
  - drivers/sensirion
  - drivers/sgp40
  - drivers/shtc3
  - drivers/sps30
  - drivers/veml7700
  - drivers/RPC
  - drivers/WEBSOCKET
  - drivers/IAQGLOBAL
  - drivers/NETWORK
  
# List of dirs. Files from these dirs will be copied to the device filesystem
filesystem:
  - fs
  - fs/images
# Custom configuration entries, settable via "device configuration"
build_vars:
  ESP_IDF_SDKCONFIG_OPTS: >
    ${build_vars.ESP_IDF_SDKCONFIG_OPTS}
    CONFIG_ESPTOOLPY_FLASHSIZE_4MB=
    CONFIG_ESPTOOLPY_FLASHSIZE_8MB=y
    CONFIG_ESPTOOLPY_FLASHSIZE="8MB"
  FLASH_SIZE: 8M
# Below is a custom firmware configuration example.
# Uncomment and modify according to your needs:

# cdefs mention your compilation flags
cdefs:
    # DEBUG: 1

config_schema:
  - ["i2c.enable", true]
  - ["i2c.freq", 100000]
  - ["i2c.sda_gpio", 32]
  - ["i2c.scl_gpio", 33]
  #Config Schema for Wifi 
  - ["wifi.sta.enable", true]
  - ["wifi.sta.ssid", "INBLRFTWIFI"]
  - ["wifi.sta.pass", "Flamenco#abcd)"]
  - ["wifi.sta.ip", ""]
  - ["wifi.sta.netmask", ""]
  - ["wifi.sta.gw", ""]
  - ["wifi.ap.enable", true]
  - ["wifi.ap.ssid", "IAQ_V2.5"]
  - ["wifi.ap.pass", "12345678"]
  - ["wifi.ap.ip", "192.168.4.1"]
  - ["wifi.ap.gw", "192.168.4.1"]
  - ["wifi.ap.dhcp_start", "192.168.4.2"]
  - ["wifi.ap.dhcp_end", "192.168.4.10"]
  - ["wifi.ap.netmask", "255.255.255.0"]
  - ["wifi.ap.channel", 6]
  - ["wifi.ap.trigger_on_gpio", -1]
  - ["wifi.ap.max_connections", 5]

 # Config schema for NTP Server Parameters
  - ["sntp.server", "time.google.com"]
  - ["sntp.retry_min", 1]
  - ["sntp.retry_max", 30]
  - ["sntp.update_interval", 7200]

# Config schema for Ethernet Parameters
  - ["eth","o",{title:"Ethernet parameters"}]
  - ["eth.enable","b", true,{title: "Enable Ethernet interface "}]
  - ["eth.clk_mode", 3]
  - ["eth.ip", "s", { title: "Static IP Address" }]
  - ["eth.netmask", "s", { title: "Static Netmask" }]
  - ["eth.gw", "s", { title: "Static Default Gateway" }]
  - ["eth.phy_pwr_gpio", "i", 15, {title: "GPIO to use for ETH PHY Reset"}]

# Config schema for MQTT parameters
  - ["mqtt.enable", true]
  - ["mqtt.server", "test.mosquitto.org"]
  - ["mqtt.pub", "s", "/test/iaq", { title: "Publish topic" }]
  - ["mqtt.sub", "s", "", { title: "Subscription topic" }]
  - ["mqtt.device_health","s","/health/1",{title: "health topic"}]
  - ["mqtt.user", "s","", {title: "User name"}]
  - ["mqtt.pass", "s","", {title: "Password"}]
  - ["mqtt.keep_alive", 60]
  - ["mqtt.clean_session", true]
  - ["mqtt.max_qos", 0]
  - ["mqtt.ca", ""]
  - ["mqtt.ssl_ca_cert", ""]
  - ["mqtt.status","s","",{title: "Mqtt port"}]
  - ["mqtt.will_topic","s","",{title: "will topic"}]
  - ["mqtt.client_id", "s", "", {title: "ClientID send to the broker. Defaults to device.id."}]
  - ["mqtt.ssl_cert", "s", "", {title: "Client certificate to present to the server"}]
  - ["mqtt.reconnect_timeout_min", "d", 2.0, {title: "Starting reconnect timeout in sec"}]
  - ["mqtt.reconnect_timeout_max", "d", 60.0, {title: "Maximum reconnect timeout in sec"}]

# Config schema for MQTT-2 parameters
  - ["mqtt1.enable", true]
  - ["mqtt1.server", "test.mosquitto.org"]
  - ["mqtt1.pub", "s", "/test/iaq/2", { title: "Publish topic" }]
  - ["mqtt1.sub", "s", "", { title: "Subscription topic" }]
  - ["mqtt1.device_health", "s","/health/2",{title: "health topic"}]
  - ["mqtt1.user", ""]
  - ["mqtt1.pass", ""]
  - ["mqtt1.ca", ""]
  - ["mqtt1.keep_alive", 60]
  - ["mqtt1.clean_session", true]
  - ["mqtt1.max_qos", 0]
  - ["mqtt1.ssl_ca_cert", ""]
  - ["mqtt1.status","s","",{title: "Mqtt connection Status"}]
  - ["mqtt1.will_topic","s","",{title: "will topic"}]
  - ["mqtt1.client_id", "s", "", {title: "ClientID t send to the broker. Defaults to device.id."}]
  - ["mqtt1.ssl_cert", "s", "", {title: "Client certificate to present to the server"}]
  - ["mqtt1.reconnect_timeout_min", "d", 2.0, {title: "Starting reconnect timeout"}]
  - ["mqtt1.reconnect_timeout_max", "d", 60.0, {title: "Maximum reconnect timeout"}]

  # Config schema for admin
  - ["admin", "o", { title: "Admin parameters" }]
  - ["admin.variant", "s", "MQTT", {title : admin variant}]
  - ["admin.version", "s", "v2.5_7-12-23",{title : Firmware Version}]


  # config schema for IAQ configuration 
  - ["iaq", "o", {title: "IAQ config Parameters"}]
  - ["iaq.measurementinterval", "i", 10, {title: "IAQ Data interval (sec)"}]
  - ["iaq.publishinterval", "i", 30, {title: "IAQ Data publishinterval (sec)"}]
  - ["iaq.periodicinterval","i",45,{title: "IAQ Period reset time (min)"}]
  - ["iaq.pir", "b", false, {title: "Enable/Disable PIR functionality"}]
  - ["iaq.temperature","i",0,{title: "Temparature Offset (deg'c)"}]
  - ["iaq.humidiy","i",0,{title: "Relative hmidity offset (%)"}]
  - ["iaq.lux", "i", 0, {title: "Lux offset ()"}]
  - ["iaq.co2","i",0,{title: "co2 offset(ppm)"}]
  - ["iaq.pm_1", "i",0,{title: "pm1 offset (ug/m3)"}]
  - ["iaq.pm_2_5","i",0,{title: "pm2.5 offset (ug/m3)"}]
  - ["iaq.pm_4", "i",0,{title: "pm4 offset(ug/m3)"}]
  - ["iaq.pm_10", "i",0,{title: "pm10 offset(ug/m3)"}]
  - ["iaq.Tvoc_offset", "i",0,{title: "tvoc offset (Index)"}]
  - ["iaq.noise_offset", "i",0,{title: "noise offset (Sound level(dB))"}]
  - ["iaq.co2FCReference", "i",400,{title: "co2 force calibration refernce (ppm)"}]
  - ["iaq.FanFCReference", "i",0,{title: "Fan FC calibration"}]
  - ["iaq.formaldehyde_offset", "i",0,{title: "formaldehyde(ppb)"}]
  - ["iaq.air_pressure_offset", "i",0,{title: "pressure offset(mbar)"}]
  - ["iaq.output_type","i",0,{title: "output type 0:avaraged 1:instantaneous"}]
  - ["debug.udp_log_addr", "192.168.10.61:1993"]
# These settings get compiled into the C structure, and can be accessed
# from the C code this way:
#
# printf("Hello from %s!\n", mgos_sys_config_get_device_id());
#
# Settings are cool: can be modified remotely without full firmware upgrade!
#
# To see all available compiled settings, buid the firmware and open
# build/gen/mgos_config.h file.
#
# Also, in this config_schema section, you can override existing
# settings that has been created by other libraries. For example, debug log
# level is 2 by default. For this firmware we can override it to 3:
#
# config_schema:
  # - ["debug.udp_log_addr=192.168.4.1:1993"]

libs:
  - origin: https://github.com/mongoose-os-libs/boards
  - origin: https://github.com/mongoose-os-libs/ca-bundle
  - origin: https://github.com/mongoose-os-libs/rpc-service-config
  - origin: https://github.com/mongoose-os-libs/rpc-service-fs
  - origin: https://github.com/mongoose-os-libs/rpc-uart
  - origin: https://github.com/mongoose-os-libs/rpc-common
  - origin: https://github.com/mongoose-os-libs/i2c
  - origin: https://github.com/mongoose-os-libs/wifi
  - origin: https://github.com/mongoose-os-libs/mqtt
  - origin: https://github.com/mongoose-os-libs/http-server
  - origin: https://github.com/mongoose-os-libs/sntp
  - origin: https://github.com/mongoose-os-libs/ota-http-server
  - origin: https://github.com/mongoose-os-libs/vfs-common
  - origin: https://github.com/mongoose-os-libs/ethernet
  - origin: https://github.com/mongoose-os-libs/rpc-service-i2c
  - origin: https://github.com/mongoose-os-libs/file-logger
# Used by the mos tool to catch mos binaries incompatible with this file format
manifest_version: 2017-09-29
