{"version":3,"sources":["data/enums/Direction.ts","data/enums/PopupWindowType.ts","settings/Settings.ts","data/enums/LabelType.ts","utils/VirtualListUtil.ts","utils/NumberUtil.ts","utils/RectUtil.ts","views/Common/VirtualList/VirtualList.tsx","logic/imageRepository/ImageLoadManager.ts","logic/imageRepository/ImageRepository.ts","store/Actions.ts","store/labels/actionCreators.ts","url/ApiUrl.ts","utils/FileUtil.ts","store/selectors/AISelector.ts","logic/helpers/CSSHelper.ts","views/EditorView/SideNavigationBar/ImagePreview/ImagePreview.tsx","data/enums/ContextType.ts","store/general/actionCreators.ts","staticModels/EditorModel.ts","utils/UnitUtil.ts","utils/DrawUtil.ts","utils/PointUtil.ts","settings/RenderEngineConfig.ts","data/enums/CustomCursorStyle.ts","store/selectors/LabelsSelector.ts","data/enums/EventType.ts","utils/MouseEventUtil.ts","logic/render/BaseRenderEngine.ts","utils/LineUtil.ts","utils/RenderEngineUtil.ts","store/selectors/GeneralSelector.ts","data/enums/LabelStatus.ts","utils/LabelUtil.ts","logic/render/RectRenderEngine.ts","utils/CanvasUtil.ts","logic/render/PointRenderEngine.ts","logic/render/PolygonRenderEngine.ts","settings/ViewPointSettings.ts","utils/ImageUtil.ts","utils/SizeUtil.ts","utils/DirectionUtil.ts","logic/actions/ViewPortActions.ts","data/enums/ProjectType.ts","logic/render/PrimaryEditorRenderEngine.ts","logic/helpers/ViewPortHelper.ts","data/enums/LineAnchorType.ts","logic/render/LineRenderEngine.ts","logic/actions/EditorActions.ts","logic/context/BaseContext.ts","logic/actions/ImageActions.ts","utils/PlatformUtil.ts","logic/actions/LabelActions.ts","logic/context/EditorContext.ts","logic/actions/PopupActions.ts","logic/context/PopupContext.ts","logic/context/ContextManager.ts","views/EditorView/SideNavigationBar/ImagesList/ImagesList.tsx","data/info/LabelToolkitData.ts","views/Common/ImageButton/ImageButton.tsx","views/EditorView/SideNavigationBar/LabelInputField/LabelInputField.tsx","views/EditorView/SideNavigationBar/EmptyLabelList/EmptyLabelList.tsx","views/EditorView/SideNavigationBar/RectLabelsList/RectLabelsList.tsx","views/EditorView/SideNavigationBar/PointLabelsList/PointLabelsList.tsx","views/EditorView/SideNavigationBar/PolygonLabelsList/PolygonLabelsList.tsx","views/EditorView/SideNavigationBar/LineLabelsList/LineLabelsList.tsx","views/EditorView/SideNavigationBar/TagLabelsList/TagLabelsList.tsx","views/EditorView/SideNavigationBar/LabelsToolkit/LabelsToolkit.tsx","views/EditorView/SideNavigationBar/SideNavigationBar.tsx","views/EditorView/VerticalEditorButton/VerticalEditorButton.tsx","utils/EditorUtil.ts","staticModels/PlatformModel.ts","views/EditorView/LabelControlPanel/LabelControlPanel.tsx","store/ai/actionCreators.ts","ai/ObjectDetector.ts","logic/actions/AIObjectDetectionActions.ts","ai/PoseDetector.ts","logic/actions/AIPoseDetectionActions.ts","logic/actions/AIActions.ts","views/EditorView/Editor/Editor.tsx","views/EditorView/EditorBottomNavigationBar/EditorBottomNavigationBar.tsx","views/EditorView/EditorTopNavigationBar/EditorTopNavigationBar.tsx","views/EditorView/EditorContainer/EditorContainer.tsx","views/EditorView/StateBar/StateBar.tsx","data/info/DropDownMenuData.ts","views/EditorView/TopNavigationBar/DropDownMenu/DropDownMenu.tsx","views/EditorView/TopNavigationBar/TopNavigationBar.tsx","views/EditorView/EditorView.tsx","views/Common/TextButton/TextButton.tsx","utils/ImageDataUtil.ts","views/MainView/ImagesDropZone/ImagesDropZone.tsx","views/MainView/MainView.tsx","views/PopupView/GenericYesNoPopup/GenericYesNoPopup.tsx","data/enums/AcceptedFileType.ts","logic/import/yolo/YOLOErrors.ts","logic/import/yolo/YOLOUtils.ts","views/PopupView/LoadLabelNamesPopup/LoadLabelNamesPopup.tsx","views/PopupView/LoadCameraIdsPopup/LoadCameraIdsPopup.tsx","views/PopupView/SelectCameraIdPopup/SelectCameraIdPopup.tsx","views/Common/TextInput/TextInput.tsx","views/PopupView/InsertLabelNamesPopup/InsertLabelNamesPopup.tsx","views/PopupView/ExitProjectPopup/ExitProjectPopup.tsx","views/PopupView/ErrorPopup/ErrorPopup.tsx","views/PopupView/LoadMoreImagesPopup/LoadMoreImagesPopup.tsx","data/enums/AIModel.ts","views/PopupView/LoadModelPopup/LoadModelPopup.tsx","views/PopupView/SuggestLabelNamesPopup/SuggestLabelNamesPopup.tsx","views/PopupView/GenericLabelTypePopup/GenericLabelTypePopup.tsx","data/enums/AnnotationFormatType.ts","data/ImportFormatData.ts","views/EditorView/FeatureInProgress/FeatureInProgress.tsx","utils/ArrayUtil.ts","logic/import/coco/COCOErrors.ts","logic/import/AnnotationImporter.ts","logic/import/coco/COCOUtils.ts","logic/import/coco/COCOImporter.ts","logic/import/yolo/YOLOImporter.ts","data/ImporterSpecData.ts","views/PopupView/ImportLabelPopup/ImportLabelPopup.tsx","utils/XMLSanitizerUtil.ts","utils/ExporterUtil.ts","logic/export/RectLabelsExporter.ts","logic/export/PointLabelsExport.ts","logic/export/polygon/VGGExporter.ts","logic/export/polygon/COCOExporter.ts","logic/export/polygon/PolygonLabelsExporter.ts","logic/export/LineLabelExport.ts","logic/export/TagLabelsExport.ts","data/ExportFormatData.ts","views/PopupView/ExportLabelsPopup/ExportLabelPopup.tsx","views/PopupView/UploadLabelsPopup/UploadLabelPopup.tsx","views/PopupView/DownloadLabelPopup/DownloadLabelPopup.tsx","views/PopupView/DeleteLabelPopup/DeleteLabelPopup.tsx","views/PopupView/PopupView.tsx","data/info/EditorFeatureData.ts","data/info/SocialMediaData.ts","views/MobileMainView/MobileMainView.tsx","views/SizeItUpView/SizeItUpView.tsx","App.tsx","store/labels/reducer.ts","store/general/reducer.ts","store/ai/reducer.ts","store/index.ts","utils/EnvironmentUtil.ts","logic/initializer/AppInitializer.ts","index.tsx","configureStore.ts"],"names":["Direction","PopupWindowType","Settings","_class","GITHUB_URL","MEDIUM_URL","PATREON_URL","TOP_NAVIGATION_BAR_HEIGHT_PX","EDITOR_BOTTOM_NAVIGATION_BAR_HEIGHT_PX","EDITOR_TOP_NAVIGATION_BAR_HEIGHT_PX","SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX","SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX","TOOLKIT_TAB_HEIGHT_PX","TOOLBOX_PANEL_WIDTH_PX","EDITOR_MIN_WIDTH","EDITOR_MIN_HEIGHT","PRIMARY_COLOR","SECONDARY_COLOR","DARK_THEME_FIRST_COLOR","DARK_THEME_SECOND_COLOR","DARK_THEME_THIRD_COLOR","DARK_THEME_FORTH_COLOR","CROSS_HAIR_THICKNESS_PX","CROSS_HAIR_COLOR","RESIZE_HANDLE_DIMENSION_PX","RESIZE_HANDLE_HOVER_DIMENSION_PX","CLOSEABLE_POPUPS","IMPORT_IMAGES","EXPORT_ANNOTATIONS","IMPORT_ANNOTATIONS","EXIT_PROJECT","UPDATE_LABEL","LabelType","VirtualListUtil","calculateGridSize","listSize","childSize","childCount","columnCount","Math","floor","width","height","ceil","calculateContentSize","gridSize","sizeFromGrid","max","calculateAnchorPoints","horizontalMargin","anchors","i","rowCount","anchor","x","y","push","NumberUtil","snapValueToRange","value","min","isValueInRange","RectUtil","getRatio","rect","intersect","r1","r2","isPointInside","point","getRectWithCenterAndSize","centerPoint","size","fitInsideRectWithRatio","containerRect","ratio","innerRectHeight","innerRectWidth","resizeRect","inputRect","rectAnchor","delta","RIGHT","BOTTOM_RIGHT","BOTTOM","TOP_RIGHT","TOP","TOP_LEFT","LEFT","BOTTOM_LEFT","translate","expand","scaleRect","scale","mapRectToAnchors","type","position","snapPointToRect","VirtualList","React","Component","constructor","props","super","contentSize","childAnchors","scrollbars","calculate","this","getVirtualListStyle","getVirtualListContentStyle","onScrollStart","setState","isScrolling","onScrollStop","onScroll","values","viewportRect","scrollLeft","scrollTop","getChildren","state","overScanHeight","overScan","viewportRectWithOverScan","reduce","children","index","childRect","Object","assign","isVisible","childStyle","left","top","concat","childRender","componentDidMount","componentWillUpdate","nextProps","nextState","nextContext","getValues","render","displayContent","_jsx","className","style","Scrollbars","ref","onScrollFrame","autoHide","ImageLoadManager","add","fx","queue","async","run","setTimeout","runQueue","addAndRun","isRunning","runTasks","length","shift","ImageRepository","storeImage","id","image","repository","storeImages","ids","images","zip","forEach","pair","getById","uuid","Action","updateActiveImageIndex","activeImageIndex","UPDATE_ACTIVE_IMAGE_INDEX","payload","updateActiveLabelNameId","activeLabelNameId","UPDATE_ACTIVE_LABEL_NAME_ID","updateActiveLabelId","activeLabelId","UPDATE_ACTIVE_LABEL_ID","updateHighlightedLabelId","highlightedLabelId","UPDATE_HIGHLIGHTED_LABEL_ID","updateActiveLabelType","activeLabelType","UPDATE_ACTIVE_LABEL_TYPE","updateImageDataById","newImageData","UPDATE_IMAGE_DATA_BY_ID","addImageData","imageData","ADD_IMAGES_DATA","updateImageData","UPDATE_IMAGES_DATA","updateLabelNames","labels","UPDATE_LABEL_NAMES","updateFirstLabelCreatedFlag","firstLabelCreatedFlag","UPDATE_FIRST_LABEL_CREATED_FLAG","rootUrl","imageList","runFeed","annotationList","saveAnnotations","deleteAnnotations","deleteAllFiles","FileUtil","loadImage","fileName","Promise","resolve","reject","Image","src","onload","onerror","loadImages","fileNames","promises","map","all","then","catch","error","readFile","fileData","reader","FileReader","onloadend","event","target","result","readAsText","readFiles","extractFileExtension","name","parts","split","extractFileName","AISelector","getSuggestedLabelList","store","getState","ai","suggestedLabelList","getRejectedSuggestedLabelList","rejectedSuggestedLabelList","isAIObjectDetectorModelLoaded","isObjectDetectorLoaded","isAIPoseDetectorModelLoaded","isPoseDetectorLoaded","isAIDisabled","CSSHelper","getLeadingColor","ImagePreview","isLoading","loadStatus","saveLoadedImagePartial","saveLoadedImage","handleLoadImageError","getStyle","imageRect","imageRatio","imagePosition","getClassName","classNames","isSelected","shouldComponentUpdate","isChecked","onClick","undefined","_jsxs","draggable","alt","ClipLoader","color","loading","mapDispatchToProps","connect","ContextType","updateActivePopupType","activePopupType","UPDATE_ACTIVE_POPUP_TYPE","updateCustomCursorStyle","customCursorStyle","UPDATE_CUSTOM_CURSOR_STYLE","updatePreventCustomCursorStatus","preventCustomCursor","UPDATE_PREVENT_CUSTOM_CURSOR_STATUS","updateProjectData","projectData","UPDATE_PROJECT_DATA","EditorModel","editor","canvas","mousePositionIndicator","cursor","viewPortScrollbars","primaryRenderingEngine","supportRenderingEngine","viewPortHelper","viewPortActionsDisabled","mousePositionOnViewPortContent","viewPortSize","defaultRenderImageRect","UnitUtil","deg2rad","angleDeg","PI","rad2deg","angleRad","DrawUtil","clearCanvas","getContext","clearRect","drawLine","startPoint","endPoint","arguments","thickness","ctx","save","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","restore","drawRect","drawRectWithFill","fillStyle","fill","shadeEverythingButRect","fillRect","globalCompositeOperation","drawCircleWithFill","anchorPoint","radius","startAngleRad","endAngleRad","arc","drawCircle","startAngleDeg","endAngleDeg","drawPolygon","closePath","drawPolygonWithFill","drawText","text","textSize","bold","align","textAlign","textBaseline","font","fillText","getRandomRGBColor","round","random","hexToRGB","hex","alpha","r","parseInt","slice","g","b","PointUtil","equals","p1","p2","subtract","multiply","factor","RenderEngineConfig","lineThickness","lineActiveColor","lineInactiveColor","crossHairLineColor","crossHairPadding","anchorSize","anchorHoverSize","suggestedAnchorDetectionSize","activeAnchorColor","inactiveAnchorColor","CustomCursorStyle","LabelsSelector","getLabelNames","getActiveLabelNameId","getActiveLabelType","getImagesData","imagesData","getActiveImageIndex","getActiveImageData","getImageDataByIndex","getImageDataById","find","getActiveLabelId","getHighlightedLabelId","getActiveRectLabel","labelRects","getActivePointLabel","labelPoints","getActivePolygonLabel","labelPolygons","getActiveLineLabel","labelLines","EventType","MouseEventUtil","getEventType","MOUSE_DOWN","MOUSE_UP","MOUSE_MOVE","BaseRenderEngine","labelType","update","data","mouseMoveHandler","mouseUpHandler","mouseDownHandler","LineUtil","getDistanceFromLine","l","p","start","end","abs","sqrt","pow","getCenter","getPoints","RenderEngineUtil","calculateImageScale","realImageSize","viewPortContentImageRect","isMouseOverImage","isMouseOverCanvas","viewPortContentSize","transferPointFromImageToViewPortContent","transferPolygonFromImageToViewPortContent","polygon","transferLineFromImageToViewPortContent","line","transferPointFromViewPortContentToImage","transferPolygonFromViewPortContentToImage","transferLineFromViewPortContentToImage","transferRectFromViewPortContentToImage","transferRectFromImageToViewPortContent","translation","wrapDefaultCursorStyleInCancel","dispatch","DEFAULT","CANCEL","setValueBetweenPixels","setPointBetweenPixels","setRectBetweenPixels","topLeft","bottomRight","topLeftBetweenPixels","bottomRightBetweenPixels","isMouseOverLine","mouse","minX","maxX","minY","maxY","isMouseOverAnchor","GeneralSelector","getActivePopupType","general","getActiveContext","activeContext","getPreventCustomCursorStatus","getImageDragModeStatus","imageDragMode","getCrossHairVisibleStatus","crossHairVisible","getCustomCursorStyle","getProjectName","getProjectType","getZoom","zoom","LabelStatus","LabelUtil","createLabelName","uuidv4","createLabelRect","labelId","isCreatedByAI","status","ACCEPTED","suggestedLabel","createLabelPolygon","vertices","convertLabelNamesListToMap","labelNames","labelNameRecord","convertMapToLabelNamesList","object","labelNamesList","keys","key","labelNamesIdsDiff","oldLabelNames","newLabelNames","missingIds","labelName","RectRenderEngine","config","startCreateRectPoint","startResizeRectAnchor","rectUnderMouse","getRectUnderMouse","calculateRectRelativeToActiveImage","anchorUnderMouse","getAnchorUnderMouseByRect","startRectResize","startRectCreation","mousePositionSnapped","activeLabelRect","addRectLabel","startAnchorPosition","scaledRect","labelRect","endRectTransformation","isInProgress","RECT","drawActiveRect","drawInactiveRect","drawCurrentlyCreatedRect","updateCursorStyle","mousePosition","activeRect","activeRectBetweenPixels","rectOnImage","displayAsActive","renderRect","endAnchorPositionSnapped","isActive","rectBetweenPixels","lineColor","center","handleRect","handleRectBetweenPixels","getAnchorUnderMouse","MOVE","activeRectLabel","isMouseOverRectEdges","outerRectDelta","outerRect","innerRectDelta","innerRect","rectAnchors","anchorRect","EditorActions","setViewPortActionsDisabledStatus","activatedAnchor","CanvasUtil","getMousePositionOnCanvasFromEvent","canvasRect","getBoundingClientRect","clientX","clientY","getClientRect","getSize","PointRenderEngine","addPointLabel","labelPoint","POINT","getLabelPointUnderMouse","pointOnCanvas","pointBetweenPixels","pointOnImage","activeLabelPoint","pointSnapped","renderPoint","handleColor","PolygonRenderEngine","activePath","resizeAnchorIndex","suggestedAnchorPositionOnCanvas","suggestedAnchorIndexInPolygon","POLYGON","isCreationInProgress","addLabelAndFinishCreation","updateActivelyCreatedLabel","polygonUnderMouse","getPolygonUnderMouse","anchorIndex","indexUnderMouse","anchorOnCanvas","startExistingLabelResize","addSuggestedAnchorToPolygonLabel","isResizeInProgress","endExistingLabelResize","labelPolygon","pathOnCanvas","linesOnCanvas","mapPointsToLines","j","discardSuggestedPoint","drawExistingLabels","drawActivelyCreatedLabel","drawActivelyResizeLabel","drawSuggestedAnchor","CLOSE","ADD","standardizedPoints","path","lines","activeLabelPolygon","snappedMousePosition","polygonOnCanvas","suggestedAnchorRect","cancelLabelCreation","finishLabelCreation","polygonOnImage","addPolygonLabel","applyResizeToPolygonLabel","activeLabel","newAnchorPositionOnImage","arr","newItem","insert","points","ViewPointSettings","CANVAS_MIN_MARGIN_PX","MIN_ZOOM","MAX_ZOOM","ZOOM_STEP","TRANSLATION_STEP_PX","ImageUtil","SizeUtil","DirectionUtil","convertDirectionToVector","direction","CENTER","ViewPortActions","updateViewPortSize","offsetWidth","offsetHeight","updateDefaultViewPortImageRect","minMargin","realImageRect","viewPortWithMarginRect","viewPortWithoutMarginRect","calculateViewPortContentSize","defaultViewPortImageRect","scaledImageSize","calculateViewPortContentImageRect","resizeCanvas","newCanvasSize","resizeViewPortContent","calculateAbsoluteScrollPosition","relativePosition","getRelativeScrollPosition","getAbsoluteScrollPosition","setScrollPosition","translateViewPortPosition","directionVector","translationVector","currentScrollPosition","nextScrollPosition","fullRender","zoomIn","currentZoom","currentRelativeScrollPosition","nextRelativeScrollPosition","setZoom","zoomOut","setDefaultZoom","setOneForOneZoom","nextZoom","UPDATE_ZOOM","ProjectType","PrimaryEditorRenderEngine","drawImage","renderCrossHair","shouldRenderCrossHair","isCrossHairVisible","isImageInDragMode","projectType","isCustomCursorBlocked","IMAGE_RECOGNITION","every","Boolean","ViewPortHelper","startScrollPosition","mouseStartPosition","absoluteViewPortContentScrollPosition","screenX","screenY","GRABBING","GRAB","currentMousePosition","mousePositionDelta","LineAnchorType","LineRenderEngine","lineCreationStartPoint","lineUpdateAnchorType","startNewLabelCreation","finishNewLabelCreation","mousePositionOnCanvasSnapped","lineOnCanvas","lineOnImage","labelLine","LINE","anchorTypeUnderMouse","getAnchorTypeUnderMouse","labelLineUnderMouse","getLineUnderMouse","startExistingLabelUpdate","endExistingLabelUpdate","activeLabelLine","lineToDraw","START","END","standardizedLine","anchorType","applyUpdateToLineLabel","lineLabel","mousePositionOnImage","mountSupportRenderingEngine","swapSupportRenderingEngine","mountRenderEnginesAndHelpers","getEditorData","setLoadingStatus","setActiveImage","activeKeyCombo","ContextManager","getActiveCombo","updateMousePositionIndicator","display","mousePositionOverViewPortContent","viewPortContentScrollPosition","mousePositionOverViewPort","includes","mousePositionOverImage","innerHTML","BaseContext","getActions","actions","ImageActions","getPreviousImage","currentImageIndex","getImageByIndex","getNextImage","imageCount","setActiveLabelOnActiveImage","labelIndex","mapNewImageData","labelRectangle","labelNameIds","remove","element","PlatformUtil","getMobileDeviceData","userAgent","mobileDetect","MobileDetect","manufacturer","mobile","browser","os","isMac","toLowerCase","match","isSafari","isFirefox","LabelActions","deleteActiveLabel","activeImageData","deleteImageLabelById","imageId","deletePointLabelById","deleteRectLabelById","deletePolygonLabelById","labelRectId","filter","currentLabel","labelPointId","deleteLineLabelById","labelLineId","labelPolygonId","removeLabelNames","labelNamesIds","newImagesData","removeLabelNamesFromImageData","labelNameId","labelExistsInLabelNames","label","EditorContext","keyCombo","action","editorData","window","navigator","preventDefault","PopupActions","close","restoreCtx","LOADER","PopupContext","popupType","activeCombo","init","addEventListener","KEY_DOWN","onDown","KEY_UP","onUp","FOCUS","onFocus","switchCtx","context","activeCtx","contextHistory","updateCtx","UPDATE_CONTEXT","EDITOR","POPUP","pop","keyCode","getKeyCodeFromEvent","isInCombo","addToCombo","execute","removeFromCombo","hotKey","matchCombo","indexOf","splice","combo1","combo2","isEmpty","xor","ImagesList","imagesListRef","updateListSize","listBoundingBox","isImageChecked","onClickHandler","renderImagePreview","RESIZE","componentWillUnmount","removeEventListener","LEFT_NAVBAR","LabelToolkitData","headerText","imageSrc","imageAlt","OBJECT_DETECTION","ImageButton","buttonSize","padding","href","isDisabled","externalClassName","imagePadding","buttonStyle","imageStyle","maxWidth","maxHeight","stopPropagation","rel","LabelInputField","dropdownOptionHeight","dropdownOptionCount","dropdownMargin","dropdownLabel","dropdown","openDropdown","isOpen","closeDropdown","clientRect","dropDownRect","getDropdownStyle","options","innerHeight","bottom","getDropdownOptions","onSelectLabel","option","mouseEnterHandler","mouseLeaveHandler","animate","requestAnimationFrame","isHighlighted","onDelete","onMouseEnter","onMouseLeave","renderTrackHorizontal","_ref","labelBefore","labelAfter","before","_Fragment","after","listStyle","listStyleContent","updateRectLabel","onClickCapture","EmptyLabelList","findLast","updatePointLabel","updatePolygonLabel","updateLineLabel","addNewOnClick","onTagClick","LabelsToolkit","labelsToolkitRef","tabs","updateToolkitSize","headerClickHandler","activeTab","renderChildren","tabData","activeTabContentHeight","baseClass","header","content","RectLabelsList","PointLabelsList","LineLabelsList","PolygonLabelsList","TagLabelsList","RIGHT_NAVBAR","SideNavigationBar","isWithContext","renderContent","renderCompanion","VerticalEditorButton","EditorUtil","getIndicator","cursorStyle","getCursorStyle","PlatformModel","mobileDeviceData","labelData","setIsActiveStatus","useState","isPanelActive","onAccept","onReject","updateSuggestedLabelList","labelList","UPDATE_SUGGESTED_LABEL_LIST","ObjectDetector","loadModel","callback","cocoSsd","model","UPDATE_OBJECT_DETECTOR_STATUS","AIObjectDetectionActions","detectRectsForActiveImage","Error","predict","detect","predictions","detectRects","isVisitedByObjectDetector","suggestedLabelNames","extractNewSuggestedLabelNames","rejectedLabelNames","newlySuggestedNames","AIActions","excludeRejectedLabelNames","SUGGEST_LABEL_NAMES","saveRectPredictions","predictedLabels","mapPredictionsToRectLabels","nextImageData","prediction","bbox","UNDECIDED","class","acc","acceptAllSuggestedRectLabels","rejectAllSuggestedRectLabels","PoseDetector","posenet","architecture","outputStride","inputResolution","quantBytes","UPDATE_POSE_DETECTOR_STATUS","AIPoseDetectionActions","detectPoseForActiveImage","estimateMultiplePoses","detectPoses","isVisitedByPoseDetector","poses","savePosePredictions","mapPredictionsToPointLabels","keypoints","keypoint","part","item","pose","acceptAllSuggestedPointLabels","rejectAllSuggestedPointLabels","suggestedLabels","rejectedLabels","rejectAllSuggestedLabels","acceptAllSuggestedLabels","Editor","updateModelAndRender","handleZoom","ctrlKey","metaKey","scrollSign","sign","deltaY","getOptionsPanels","positionOnImage","positionOnViewPort","LabelControlPanel","onScrollbarsUpdate","scrollbarContent","newViewPortContentSize","scrollWidth","scrollHeight","isEqual","mountEventListeners","unmountEventListeners","componentDidUpdate","prevProps","prevState","snapshot","MOUSE_WHEEL","renderTrackVertical","onUpdate","onContextMenu","totalImageCount","updateImageDragModeStatus","UPDATE_IMAGE_DRAG_MODE_STATUS","updateCrossHairVisibleStatus","UPDATE_CROSS_HAIR_VISIBLE_STATUS","buttonPadding","imageDragOnClick","crossHairOnClick","windowSize","leftTabStatus","setLeftTabStatus","rightTabStatus","setRightTabStatus","calculateEditorSize","leftTabWidth","rightTabWidth","leftSideBarButtonOnClick","rightSideBarButtonOnClick","leftSideBarCompanionRender","leftSideBarRender","onMouseDown","EditorTopNavigationBar","EditorBottomNavigationBar","rightSideBarCompanionRender","rightSideBarRender","pointLabeledImages","currentCount","currentImage","rectLabeledImages","polygonLabeledImages","lineLabeledImages","tagLabeledImages","getProgress","DropDownMenuData","disabled","description","UPLOAD_ANNOTATIONS","DOWNLOAD_ANNOTATIONS","DELETE_ANNOTATIONS","LOAD_CAMERA_ID","activeTabIdx","setActiveTabIdx","activeDropDownAnchor","setDropDownAnchor","onMouseEnterWindow","onMouseLeaveWindow","onMouseDownBeyondDropDown","classList","contains","document","wrapOnClick","getDropDownTab","tabIdx","onTabClick","offsetLeft","onMouseEnterTab","getDropDownWindow","StateBar","DropDownMenu","TopNavigationBar","EditorContainer","TextButton","ImageDataUtil","createImageDataFromFileData","cleanAnnotations","arrange","items","idArrangement","sort","a","loadMissingImages","missingImages","missingImagesFiles","updateConfigFolder","configFolder","UPDATE_CONFIG_FOLDER","updateErrorMsg","UPDATE_ERROR_MSG","buttonState","setButtonState","startEditor","response","axios","get","params","dir","files","console","log","message","ERROR","MainView","projectInProgress","setProjectInProgress","projectCanceled","setProjectCanceled","endProject","ImagesDropZone","startProject","GenericYesNoPopup","title","acceptLabel","skipAcceptButton","disableAcceptButton","rejectLabel","skipRejectButton","disableRejectButton","setMountStatus","useEffect","AcceptedFileType","YOLOAnnotationsLoadingError","NoLabelNamesFileProvidedError","LabelNamesNotUniqueError","AnnotationsParsingError","imageName","YOLOUtils","parseLabelsNamesFromString","replace","uniq","loadLabelsList","onSuccess","onFailure","evt","parseYOLOAnnotationsFromString","rawAnnotations","imageSize","rawAnnotation","parseYOLOAnnotationFromString","components","validateYOLOAnnotationComponents","rectX","parseFloat","rectY","rectWidth","rectHeight","labelNamesCount","validateCoordinateValue","rawValue","floatValue","Number","isNaN","intValue","validateLabelIdx","updateLabels","labelsList","setLabelsList","invalidFileLoadedStatus","setInvalidFileLoadedStatus","acceptedFiles","getRootProps","getInputProps","useDropzone","accept","EXCEL","multiple","onDrop","INSERT_LABEL_NAMES","updateCameras","cameras","UPDATE_CAMERA_IDS","camerasList","setCamerasList","wb","XLSX","read","utils","sheet_to_json","Sheets","SheetNames","seatIds","row","GROUP_IDENTIFIER","readAsBinaryString","SELECT_CAMERA_ID","Select","camera","onChange","opt","TextInput","isPassword","inputStyle","labelStyle","barStyle","onKeyUp","autoFocus","htmlFor","isUpdate","initialLabels","setLabelNames","addHandle","labelInputs","handleKeyUp","deleteHandle","extractLabelNamesList","onUpdateAccept","updatedLabelNamesList","onCreateAccept","onUpdateReject","onCreateReject","LOAD_LABEL_NAMES","IMAGE","AIModel","models","flag","POSE_DETECTION","LoadModelPopup","modelIsLoadingStatus","setModelIsLoadingStatus","selectedModelToLoad","updateSelectedModelToLoad","extractSelectedModel","getOptions","entry","selectedModel","nextSelectedModelToLoad","onSelect","updateRejectedSuggestedLabelList","UPDATE_REJECTED_SUGGESTED_LABEL_LIST","selectAllFlag","setSelectAllFlag","extractSelectedNames","extractUnselectedNames","extractNames","nextLabelNames","entryIndex","nextSelectAllFlag","toggleSelectableNameByIndex","autoHeight","onLabelTypeChange","renderInternalContent","setLabelType","AnnotationFormatType","ImportFormatData","YOLO","COCO","FeatureInProgress","ArrayUtilAmbiguousMatchError","ArrayUtil","partition","array","predicate","pass","fail","array1","array2","unzip","COCOAnnotationsLoadingError","COCOFormatValidationError","COCOAnnotationReadingError","COCOAnnotationDeserializationError","COCOAnnotationFileCountError","AnnotationImporter","import","filesData","COCOUtils","bbox2rect","segmentation2vertices","segmentation","segment","chunk","COCOImporter","inputImagesData","annotations","deserialize","applyLabels","JSON","parse","annotationsObject","validateCocoFormat","categories","labelNameMap","mapCOCOCategories","cleanImageData","imageDataPartition","partitionImageData","imageDataMap","mapImageData","annotation","image_id","iscrowd","category_id","polygons","resultImageData","imageNames","file_name","category","fileNameCOCOIdMap","missingKeys","requiredKeys","hasOwnProperty","YOLOImporter","sourceImagesData","labelNameFile","annotationFiles","filterFilesData","relevantImageData","relevantAnnotations","matchImagesWithAnnotations","labelNamesPromise","fileContent","missingImagesPromise","annotationFilesPromise","annotationsRaw","applyAnnotations","injectImageDataWithAnnotations","functionalityPartitionResult","labelsFileName","imageIdentifiers","matchingPartitionResult","sourceImageData","annotatedImageData","ImporterSpecData","CSV","VGG","VOC","resolveFormatType","possibleImportFormats","formatType","setFormatType","loadedLabelNames","setLoadedLabelNames","loadedImageData","setLoadedImageData","annotationsLoadedError","setAnnotationsLoadedError","res","file","File","onAnnotationLoadSuccess","onAnnotationsLoadFailure","TEXT","exportFormatData","onAnnotationFormatChange","format","GenericLabelTypePopup","importFormatData","XMLSanitizerUtil","sanitize","input","ExporterUtil","getExportFileName","projectName","date","moment","saveAs","blob","Blob","RectLabelsExporter","export","exportFormatType","exportFromDir","exportAsYOLO","exportAsCSV","exportAsVOC","wrapRectLabelsIntoYOLO","formData","FormData","append","post","headers","findIndex","toString","toFixed","join","JSZip","wrapImageIntoVOC","generateAsync","wrapRectLabelsIntoVOC","wrapRectLabelsIntoCSV","PointLabelsExporter","imageLabelData","VGGExporter","stringify","mapImagesDataToVGGObject","mapImageDataToVGGFileData","regionsData","mapImageDataToVGG","fileref","filename","base64_img_data","file_attributes","regions","validLabels","getValidPolygonLabels","shape_attributes","mapPolygonToVGG","region_attributes","all_points_x","all_points_y","COCOExporter","COCOObject","mapImagesDataToCOCOObject","getInfoComponent","getImagesComponent","getAnnotationsComponent","getCategoriesComponent","labelsMap","mapLabelsData","getCOCOSegmentation","getCOCOBbox","getCOCOArea","flatten","xMin","xMax","yMin","yMax","vertex","area","PolygonLabelsExporter","LineLabelsExporter","wrapLineLabelsIntoCSV","TagLabelsExporter","exportAsJSON","wrapLabelNamesIntoCSV","contentObjects","wrapLabelNamesIntoJSON","ExportFormatData","setExportFormatType","fileArray","fileUploader","setFilesAsZip","saveAsZip","useSaveFilesAsZip","deleteState","setDeleteState","selectPopup","LoadCameraIdsPopup","SelectCameraIdPopup","LoadLabelsPopup","ExportLabelPopup","ImportLabelPopup","UploadLabelPopup","DownloadLabelPopup","DeleteLabelPopup","InsertLabelNamesPopup","ExitProjectPopup","LoadMoreImagesPopup","LOAD_AI_MODEL","SuggestLabelNamesPopup","ErrorPopup","EditorFeatureData","displayText","SocialMediaData","displayName","tooltipMessage","scrollPosition","getEditorFeatureTiles","features","topNavigationBar","Hide","Show","firstStage","secondStage","thirdStage","fourthStage","getSocialMediaButtons","SizeItUpView","ObjectDetectorLoaded","PoseDetectionLoaded","MobileMainView","EditorView","PopupView","initialState","rootReducer","combineReducers","UPDATE_WINDOW_SIZE","UPDATE_DISABLED_AI_FLAG","EnvironmentUtil","isDev","process","isProd","AppInitializer","inti","handleResize","detectDeviceParams","handleAccidentalPageExit","disableGenericScrollZoom","passive","disableUnwantedKeyBoardBehaviour","KEY_PRESS","onbeforeunload","returnValue","innerWidth","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","Provider","App","getElementById","createElement"],"mappings":"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","file":"static/js/main.394518e8.chunk.js","sourcesContent":["export enum Direction {\r\n    TOP = \"TOP\",\r\n    BOTTOM = \"BOTTOM\",\r\n    LEFT = \"LEFT\",\r\n    RIGHT = \"RIGHT\",\r\n    TOP_RIGHT = \"TOP_RIGHT\",\r\n    TOP_LEFT = \"TOP_LEFT\",\r\n    BOTTOM_RIGHT = \"BOTTOM_RIGHT\",\r\n    BOTTOM_LEFT = \"BOTTOM_LEFT\",\r\n    CENTER = \"CENTER\"\r\n}","export enum PopupWindowType {\r\n    LOAD_CAMERA_ID = \"LOAD_CAMERA_ID\",\r\n    SELECT_CAMERA_ID = \"SELECT_CAMERA_ID\",\r\n    LOAD_LABEL_NAMES = \"LOAD_LABEL_NAMES\",\r\n    UPDATE_LABEL = \"UPDATE_LABEL\",\r\n    SUGGEST_LABEL_NAMES = \"SUGGEST_LABEL_NAMES\",\r\n    IMPORT_IMAGES = \"IMPORT_IMAGES\",\r\n    LOAD_AI_MODEL = \"LOAD_AI_MODEL\",\r\n    EXPORT_ANNOTATIONS = \"EXPORT_ANNOTATIONS\",\r\n    IMPORT_ANNOTATIONS = \"IMPORT_ANNOTATIONS\",\r\n    UPLOAD_ANNOTATIONS = \"UPLOAD_ANNOTATIONS\",\r\n    DOWNLOAD_ANNOTATIONS = \"DOWNLOAD_ANNOTATIONS\",\r\n    DELETE_ANNOTATIONS = \"DELETE_ANNOTATIONS\",\r\n    INSERT_LABEL_NAMES = \"INSERT_LABEL_NAMES\",\r\n    EXIT_PROJECT = \"EXIT_PROJECT\",\r\n    LOADER = \"LOADER\",\r\n    ERROR = \"ERROR\"\r\n}","import { PopupWindowType } from \"../data/enums/PopupWindowType\";\r\n\r\nexport class Settings {\r\n    public static readonly GITHUB_URL: string = \"https://github.com/SkalskiP\";\r\n    public static readonly MEDIUM_URL: string = \"https://medium.com/@piotr.skalski92\";\r\n    public static readonly PATREON_URL: string = \"https://www.patreon.com/make_sense\";\r\n\r\n    public static readonly TOP_NAVIGATION_BAR_HEIGHT_PX: number = 35;\r\n    public static readonly EDITOR_BOTTOM_NAVIGATION_BAR_HEIGHT_PX: number = 40 + 1;\r\n    public static readonly EDITOR_TOP_NAVIGATION_BAR_HEIGHT_PX: number = 40 + 1;\r\n    public static readonly SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX: number = 23 + 1;\r\n    public static readonly SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX: number = Settings.SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX + 300 + 1;\r\n    public static readonly TOOLKIT_TAB_HEIGHT_PX: number = 40;\r\n    public static readonly TOOLBOX_PANEL_WIDTH_PX: number = 50 + 1;\r\n\r\n    public static readonly EDITOR_MIN_WIDTH: number = 900;\r\n    public static readonly EDITOR_MIN_HEIGHT: number = 500;\r\n\r\n    public static readonly PRIMARY_COLOR: string = \"#2af598\";\r\n    public static readonly SECONDARY_COLOR: string = \"#009efd\";\r\n\r\n    public static readonly DARK_THEME_FIRST_COLOR: string = \"#171717\";\r\n    public static readonly DARK_THEME_SECOND_COLOR: string = \"#282828\";\r\n    public static readonly DARK_THEME_THIRD_COLOR: string = \"#4c4c4c\";\r\n    public static readonly DARK_THEME_FORTH_COLOR: string = \"#262c2f\";\r\n\r\n    public static readonly CROSS_HAIR_THICKNESS_PX: number = 1;\r\n    public static readonly CROSS_HAIR_COLOR: string = \"#fff\";\r\n\r\n    public static readonly RESIZE_HANDLE_DIMENSION_PX: number = 8;\r\n    public static readonly RESIZE_HANDLE_HOVER_DIMENSION_PX = 16;\r\n\r\n    public static readonly CLOSEABLE_POPUPS: PopupWindowType[] = [\r\n        PopupWindowType.IMPORT_IMAGES,\r\n        PopupWindowType.EXPORT_ANNOTATIONS,\r\n        PopupWindowType.IMPORT_ANNOTATIONS,\r\n        PopupWindowType.EXIT_PROJECT,\r\n        PopupWindowType.UPDATE_LABEL\r\n    ];\r\n}","export enum LabelType {\r\n    IMAGE_RECOGNITION = \"IMAGE RECOGNITION\",\r\n    POINT = \"POINT\",\r\n    RECT = \"RECT\",\r\n    POLYGON = \"POLYGON\",\r\n    LINE = \"LINE\"\r\n}","import {ISize} from \"../interfaces/ISize\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\n\r\nexport class VirtualListUtil {\r\n    public static calculateGridSize(listSize: ISize, childSize: ISize, childCount: number): ISize {\r\n        const columnCount: number = Math.floor(listSize.width / childSize.width);\r\n        const rowCount: number = Math.ceil(childCount / columnCount);\r\n        return {width: columnCount, height: rowCount};\r\n    }\r\n\r\n    public static calculateContentSize(listSize: ISize, childSize: ISize, gridSize: ISize): ISize {\r\n        const sizeFromGrid:ISize = {\r\n            width: childSize.width * gridSize.width,\r\n            height: childSize.height * gridSize.height\r\n        };\r\n\r\n        return {\r\n            width: Math.max(listSize.width, sizeFromGrid.width),\r\n            height: sizeFromGrid.height\r\n        }\r\n    }\r\n\r\n    public static calculateAnchorPoints(listSize: ISize, childSize: ISize, childCount: number): IPoint[] {\r\n        const gridSize: ISize = VirtualListUtil.calculateGridSize(listSize, childSize, childCount);\r\n        const contentWrapperSize: ISize = VirtualListUtil.calculateContentSize(listSize, childSize, gridSize);\r\n        const horizontalMargin = (contentWrapperSize.width - gridSize.width * childSize.width) / (gridSize.width + 1);\r\n\r\n        let anchors = [];\r\n        for (let i = 0; i < childCount; i++) {\r\n            const rowCount: number = Math.floor(i / gridSize.width);\r\n            const columnCount: number = i % gridSize.width;\r\n\r\n            const anchor: IPoint = {\r\n                x: rowCount * horizontalMargin + columnCount * childSize.width,\r\n                y: rowCount * childSize.height\r\n            };\r\n            anchors.push(anchor);\r\n        }\r\n        return anchors;\r\n    }\r\n}","export class NumberUtil {\r\n    public static snapValueToRange(value: number, min: number, max: number): number {\r\n        if (value < min)\r\n            return min;\r\n        if (value > max)\r\n            return max;\r\n\r\n        return value;\r\n    }\r\n\r\n    public static isValueInRange(value: number, min: number, max: number): boolean {\r\n        return value >= min && value <= max;\r\n    }\r\n}","import {IRect} from \"../interfaces/IRect\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\nimport {ISize} from \"../interfaces/ISize\";\r\nimport {RectAnchor} from \"../data/RectAnchor\";\r\nimport {NumberUtil} from \"./NumberUtil\";\r\nimport {Direction} from \"../data/enums/Direction\";\r\n\r\nexport class RectUtil {\r\n    public static getRatio(rect: IRect): number {\r\n        if (!rect) return null;\r\n\r\n        return rect.width/rect.height\r\n    }\r\n\r\n    public static intersect(r1: IRect, r2: IRect) {\r\n        if (!r1 || !r2) return null;\r\n        return !(\r\n            r2.x > r1.x + r1.width ||\r\n            r2.x + r2.width < r1.x ||\r\n            r2.y > r1.y + r1.height ||\r\n            r2.y + r2.height < r1.y\r\n        );\r\n    }\r\n\r\n    public static isPointInside(rect: IRect, point: IPoint): boolean {\r\n        if (!rect || !point) return null;\r\n        return (\r\n            rect.x < point.x &&\r\n            rect.x + rect.width > point.x &&\r\n            rect.y < point.y &&\r\n            rect.y + rect.height > point.y\r\n        )\r\n    }\r\n\r\n    public static getRectWithCenterAndSize(centerPoint: IPoint, size: ISize): IRect {\r\n        return {\r\n            x: centerPoint.x - 0.5 * size.width,\r\n            y: centerPoint.y - 0.5 * size.height,\r\n            ...size\r\n        }\r\n    }\r\n\r\n    public static fitInsideRectWithRatio(containerRect: IRect, ratio: number): IRect {\r\n        const containerRectRatio = RectUtil.getRatio(containerRect);\r\n        if (containerRectRatio < ratio) {\r\n            const innerRectHeight = containerRect.width / ratio;\r\n            return {\r\n                x: containerRect.x,\r\n                y: containerRect.y + (containerRect.height - innerRectHeight) / 2,\r\n                width: containerRect.width,\r\n                height: innerRectHeight\r\n            }\r\n        }\r\n        else {\r\n            const innerRectWidth = containerRect.height * ratio;\r\n            return {\r\n                x: containerRect.x + (containerRect.width - innerRectWidth) / 2,\r\n                y: containerRect.y,\r\n                width: innerRectWidth,\r\n                height: containerRect.height\r\n            }\r\n        }\r\n    }\r\n\r\n    public static resizeRect(inputRect: IRect, rectAnchor: Direction, delta): IRect {\r\n        const rect: IRect = {...inputRect};\r\n        switch (rectAnchor) {\r\n            case Direction.RIGHT:\r\n                rect.width += delta.x;\r\n                break;\r\n            case Direction.BOTTOM_RIGHT:\r\n                rect.width += delta.x;\r\n                rect.height += delta.y;\r\n                break;\r\n            case Direction.BOTTOM:\r\n                rect.height += delta.y;\r\n                break;\r\n            case Direction.TOP_RIGHT:\r\n                rect.width += delta.x;\r\n                rect.y += delta.y;\r\n                rect.height -= delta.y;\r\n                break;\r\n            case Direction.TOP:\r\n                rect.y += delta.y;\r\n                rect.height -= delta.y;\r\n                break;\r\n            case Direction.TOP_LEFT:\r\n                rect.x += delta.x;\r\n                rect.width -= delta.x;\r\n                rect.y += delta.y;\r\n                rect.height -= delta.y;\r\n                break;\r\n            case Direction.LEFT:\r\n                rect.x += delta.x;\r\n                rect.width -= delta.x;\r\n                break;\r\n            case Direction.BOTTOM_LEFT:\r\n                rect.x += delta.x;\r\n                rect.width -= delta.x;\r\n                rect.height += delta.y;\r\n                break;\r\n        }\r\n\r\n        if (rect.width < 0)  {\r\n            rect.x = rect.x + rect.width;\r\n            rect.width = - rect.width;\r\n        }\r\n\r\n        if (rect.height < 0)  {\r\n            rect.y = rect.y + rect.height;\r\n            rect.height = - rect.height;\r\n        }\r\n\r\n        return rect;\r\n    }\r\n\r\n    public static translate(rect: IRect, delta: IPoint): IRect {\r\n        return {\r\n            ...rect,\r\n            x: rect.x + delta.x,\r\n            y: rect.y + delta.y\r\n        }\r\n    }\r\n\r\n    public static expand(rect: IRect, delta: IPoint): IRect {\r\n        return {\r\n            x: rect.x - delta.x,\r\n            y: rect.y - delta.y,\r\n            width: rect.width + 2 * delta.x,\r\n            height: rect.height + 2 * delta.y\r\n        }\r\n    }\r\n\r\n    public static scaleRect(rect:IRect, scale: number): IRect {\r\n        return {\r\n            x: rect.x * scale,\r\n            y: rect.y * scale,\r\n            width: rect.width * scale,\r\n            height: rect.height * scale\r\n        }\r\n    }\r\n\r\n    public static mapRectToAnchors(rect: IRect): RectAnchor[] {\r\n        return [\r\n            {type: Direction.TOP_LEFT, position: {x: rect.x, y: rect.y}},\r\n            {type: Direction.TOP, position: {x: rect.x + 0.5 * rect.width, y: rect.y}},\r\n            {type: Direction.TOP_RIGHT, position: {x: rect.x + rect.width, y: rect.y}},\r\n            {type: Direction.LEFT, position: {x: rect.x, y: rect.y + 0.5 * rect.height}},\r\n            {type: Direction.RIGHT, position: {x: rect.x + rect.width, y: rect.y + 0.5 * rect.height}},\r\n            {type: Direction.BOTTOM_LEFT, position: {x: rect.x, y: rect.y + rect.height}},\r\n            {type: Direction.BOTTOM, position: {x: rect.x + 0.5 * rect.width, y: rect.y + rect.height}},\r\n            {type: Direction.BOTTOM_RIGHT, position: {x: rect.x + rect.width, y: rect.y + rect.height}}\r\n        ]\r\n    }\r\n\r\n    public static snapPointToRect(point: IPoint, rect: IRect): IPoint {\r\n        if (RectUtil.isPointInside(rect, point))\r\n            return point;\r\n\r\n        return {\r\n            x: NumberUtil.snapValueToRange(point.x, rect.x, rect.x + rect.width),\r\n            y: NumberUtil.snapValueToRange(point.y, rect.y, rect.y + rect.height)\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {IRect} from \"../../../interfaces/IRect\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {VirtualListUtil} from \"../../../utils/VirtualListUtil\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\nimport {RectUtil} from \"../../../utils/RectUtil\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    childCount: number;\r\n    childSize: ISize;\r\n    childRender: (index: number, isScrolling: boolean, isVisible: boolean, style: React.CSSProperties) => any;\r\n    overScanHeight?: number;\r\n}\r\n\r\ninterface IState {\r\n    viewportRect: IRect;\r\n    isScrolling: boolean;\r\n}\r\n\r\nexport class VirtualList extends React.Component<IProps, IState> {\r\n    private gridSize: ISize;\r\n    private contentSize: ISize;\r\n    private childAnchors: IPoint[];\r\n    private scrollbars: Scrollbars;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewportRect: null,\r\n            isScrolling: false\r\n        };\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        const {size, childSize, childCount} = this.props;\r\n        this.calculate(size, childSize, childCount);\r\n        this.setState({\r\n            viewportRect: {\r\n                x: 0,\r\n                y: 0,\r\n                width: this.props.size.width,\r\n                height: this.props.size.height\r\n            }\r\n        });\r\n    }\r\n\r\n    public componentWillUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>, nextContext: any): void {\r\n        const {size, childSize, childCount} = nextProps;\r\n        if (this.props.size.height !== size.height || this.props.size.width !== size.width ||\r\n            this.props.childCount !== childCount) {\r\n            this.calculate(size, childSize, childCount);\r\n            this.setState({\r\n                viewportRect: {\r\n                    x: this.scrollbars.getValues().scrollLeft,\r\n                    y: this.scrollbars.getValues().scrollTop,\r\n                    width: size.width,\r\n                    height: size.height\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private calculate = (size: ISize, childSize: ISize, childCount: number) => {\r\n        this.gridSize = VirtualListUtil.calculateGridSize(size, childSize, childCount);\r\n        this.contentSize = VirtualListUtil.calculateContentSize(size, childSize, this.gridSize);\r\n        this.childAnchors = VirtualListUtil.calculateAnchorPoints(size, childSize, childCount);\r\n    };\r\n\r\n    private getVirtualListStyle = ():React.CSSProperties => {\r\n        return {\r\n            position: \"relative\",\r\n            width: this.props.size.width,\r\n            height: this.props.size.height,\r\n        }\r\n    };\r\n\r\n    private getVirtualListContentStyle = ():React.CSSProperties => {\r\n        return {\r\n            width: this.contentSize.width,\r\n            height: this.contentSize.height,\r\n        }\r\n    };\r\n\r\n    private onScrollStart = () => {\r\n        this.setState({isScrolling: true});\r\n    };\r\n\r\n    private onScrollStop = () => {\r\n        this.setState({isScrolling: false});\r\n    };\r\n\r\n    private onScroll = (values) => {\r\n        this.setState({\r\n            viewportRect: {\r\n                x: values.scrollLeft,\r\n                y: values.scrollTop,\r\n                width: this.props.size.width,\r\n                height: this.props.size.height\r\n            }\r\n        });\r\n    };\r\n\r\n    private getChildren = () => {\r\n        const {viewportRect, isScrolling} = this.state;\r\n        const {overScanHeight, childSize} = this.props;\r\n        const overScan: number = !!overScanHeight ? overScanHeight : 0;\r\n\r\n        const viewportRectWithOverScan:IRect = {\r\n            x: viewportRect.x,\r\n            y: viewportRect.y - overScan,\r\n            width: viewportRect.width,\r\n            height: viewportRect.height + 2 * overScan\r\n        };\r\n\r\n        return this.childAnchors.reduce((children, anchor: IPoint, index: number) => {\r\n            const childRect = Object.assign(anchor, childSize);\r\n            const isVisible = RectUtil.intersect(viewportRectWithOverScan, childRect);\r\n\r\n            if (isVisible) {\r\n                const childStyle: React.CSSProperties = {\r\n                    position: \"absolute\",\r\n                    left: anchor.x,\r\n                    top: anchor.y,\r\n                    width: childSize.width,\r\n                    height: childSize.height\r\n                };\r\n\r\n                return children.concat(this.props.childRender(index, isScrolling, isVisible, childStyle))\r\n            }\r\n            else {\r\n                return children;\r\n            }\r\n        }, [])\r\n    };\r\n\r\n    public render() {\r\n        const displayContent = !!this.props.size && !!this.props.childSize && !!this.gridSize;\r\n\r\n        return(\r\n            <div\r\n                className=\"VirtualList\"\r\n                style={this.getVirtualListStyle()}\r\n            >\r\n                <Scrollbars\r\n                    ref={ref => this.scrollbars = ref}\r\n                    onScrollFrame={this.onScroll}\r\n                    onScrollStart={this.onScrollStart}\r\n                    onScrollStop={this.onScrollStop}\r\n                    autoHide={true}\r\n                >\r\n                    {displayContent && <div\r\n                        className=\"VirtualListContent\"\r\n                        style={this.getVirtualListContentStyle()}\r\n                    >\r\n                        {this.getChildren()}\r\n                    </div>}\r\n                </Scrollbars>\r\n            </div>\r\n        )\r\n    }\r\n}","export class ImageLoadManager {\r\n\r\n\tprivate static queue: (() => Promise<any>)[] = [];\r\n\tprivate static isRunning: boolean = false;\r\n\r\n\tpublic static add(fx: Promise<any>) {\r\n\t\tImageLoadManager.queue.push(async () => await fx);\r\n\t}\r\n\r\n\tpublic static run() {\r\n\t\tsetTimeout(() => ImageLoadManager.runQueue(), 10);\r\n\t}\r\n\r\n\tpublic static addAndRun(fx: Promise<any>) {\r\n\t\tImageLoadManager.add(fx);\r\n\t\tImageLoadManager.run();\r\n\t}\r\n\r\n\tpublic static async runQueue() {\r\n\t\tif (!ImageLoadManager.isRunning) {\r\n\t\t\tImageLoadManager.isRunning = true;\r\n\t\t\tawait ImageLoadManager.runTasks();\r\n\t\t\tImageLoadManager.isRunning = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static async runTasks() {\r\n\t\twhile (ImageLoadManager.queue.length > 0) {\r\n\t\t\tconst fx = ImageLoadManager.queue.shift();\r\n\t\t\tawait fx();\r\n\t\t}\r\n\t}\r\n}","import {zip} from \"lodash\";\r\n\r\nexport type ImageMap = { [s: string]: HTMLImageElement; };\r\n\r\nexport class ImageRepository {\r\n    private static repository: ImageMap = {};\r\n\r\n    public static storeImage(id: string, image: HTMLImageElement) {\r\n        ImageRepository.repository[id] = image;\r\n    }\r\n\r\n    public static storeImages(ids: string[], images: HTMLImageElement[]) {\r\n        zip(ids, images).forEach((pair: [string, HTMLImageElement]) => {\r\n            ImageRepository.storeImage(...pair);\r\n        })\r\n    }\r\n\r\n    public static getById(uuid: string): HTMLImageElement {\r\n        return ImageRepository.repository[uuid];\r\n    }\r\n}","export enum Action {\r\n    // AI\r\n    UPDATE_SUGGESTED_LABEL_LIST = \"@@UPDATE_SUGGESTED_LABEL_LIST\",\r\n    UPDATE_REJECTED_SUGGESTED_LABEL_LIST = \"@@UPDATE_REJECTED_SUGGESTED_LABEL_LIST\",\r\n    UPDATE_OBJECT_DETECTOR_STATUS = '@@UPDATE_OBJECT_DETECTOR_STATUS',\r\n    UPDATE_POSE_DETECTOR_STATUS = '@@UPDATE_POSE_DETECTOR_STATUS',\r\n    UPDATE_DISABLED_AI_FLAG = \"@@UPDATE_DISABLED_AI_FLAG\",\r\n\r\n    // GENERAL\r\n    UPDATE_PROJECT_DATA = '@@UPDATE_PROJECT_DATA',\r\n    UPDATE_WINDOW_SIZE = '@@UPDATE_WINDOW_SIZE',\r\n    UPDATE_ACTIVE_POPUP_TYPE = '@@UPDATE_ACTIVE_POPUP_TYPE',\r\n    UPDATE_CUSTOM_CURSOR_STYLE = '@@UPDATE_CUSTOM_CURSOR_STYLE',\r\n    UPDATE_CONTEXT = '@@UPDATE_CONTEXT',\r\n    UPDATE_PREVENT_CUSTOM_CURSOR_STATUS = '@@UPDATE_PREVENT_CUSTOM_CURSOR_STATUS',\r\n    UPDATE_IMAGE_DRAG_MODE_STATUS = '@@UPDATE_IMAGE_DRAG_MODE_STATUS',\r\n    UPDATE_CROSS_HAIR_VISIBLE_STATUS = '@@UPDATE_CROSS_HAIR_VISIBLE_STATUS',\r\n    UPDATE_ZOOM = '@@UPDATE_ZOOM',\r\n    UPDATE_CONFIG_FOLDER = '@@UPDATE_CONFIG_FOLDER',\r\n    UPDATE_ERROR_MSG = '@@UPDATE_ERROR_MSG',\r\n\r\n    // LABELS\r\n    UPDATE_ACTIVE_IMAGE_INDEX = '@@UPDATE_ACTIVE_IMAGE_INDEX',\r\n    UPDATE_IMAGE_DATA_BY_ID = '@@UPDATE_IMAGE_DATA_BY_ID',\r\n    ADD_IMAGES_DATA = '@@ADD_IMAGES_DATA',\r\n    UPDATE_IMAGES_DATA = '@@UPDATE_IMAGES_DATA',\r\n    UPDATE_ACTIVE_LABEL_NAME_ID = '@@UPDATE_ACTIVE_LABEL_NAME_ID',\r\n    UPDATE_ACTIVE_LABEL_TYPE = '@@UPDATE_ACTIVE_LABEL_TYPE',\r\n    UPDATE_ACTIVE_LABEL_ID = '@@UPDATE_ACTIVE_LABEL_ID',\r\n    UPDATE_HIGHLIGHTED_LABEL_ID = '@@UPDATE_HIGHLIGHTED_LABEL_ID',\r\n    UPDATE_LABEL_NAMES = '@@UPDATE_LABEL_NAMES',\r\n    UPDATE_FIRST_LABEL_CREATED_FLAG = '@@UPDATE_FIRST_LABEL_CREATED_FLAG',\r\n    UPDATE_CAMERA_IDS = '@@UPDATE_CAMERA_IDS',\r\n\r\n    // SENSOR\r\n    UPDATE_MQTT_DATA = '@@UPDATE_MQTT_DATA',\r\n    UPDATE_OVERLAP_THRESHOLD = '@@UPDATE_OVERLAP_THRESHOLD',\r\n    UPDATE_RESOLUTION = '@@UPDATE_RESOLUTION',\r\n    UPDATE_SENSOR_ID = '@@UPDATE_SENSOR_ID'\r\n\r\n}","import {LabelsActionTypes, ImageData, LabelName, CameraId} from \"./types\";\r\nimport {Action} from \"../Actions\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\n\r\nexport function updateActiveImageIndex(activeImageIndex: number): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_IMAGE_INDEX,\r\n        payload: {\r\n            activeImageIndex,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateActiveLabelNameId(activeLabelNameId: string): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_LABEL_NAME_ID,\r\n        payload: {\r\n            activeLabelNameId,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateActiveLabelId(activeLabelId: string): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_LABEL_ID,\r\n        payload: {\r\n            activeLabelId,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateHighlightedLabelId(highlightedLabelId: string): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_HIGHLIGHTED_LABEL_ID,\r\n        payload: {\r\n            highlightedLabelId,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateActiveLabelType(activeLabelType: LabelType): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_LABEL_TYPE,\r\n        payload: {\r\n            activeLabelType,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateImageDataById(id: string, newImageData: ImageData): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_IMAGE_DATA_BY_ID,\r\n        payload: {\r\n            id,\r\n            newImageData\r\n        },\r\n    };\r\n}\r\n\r\nexport function addImageData(imageData: ImageData[]): LabelsActionTypes {\r\n    return {\r\n        type: Action.ADD_IMAGES_DATA,\r\n        payload: {\r\n            imageData,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateImageData(imageData: ImageData[]): LabelsActionTypes {\r\n    return {\r\n        type: Action.UPDATE_IMAGES_DATA,\r\n        payload: {\r\n            imageData,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateLabelNames(labels: LabelName[]) {\r\n    return {\r\n        type: Action.UPDATE_LABEL_NAMES,\r\n        payload: {\r\n            labels\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateCameraIds(cameras: CameraId[]) {\r\n    return {\r\n        type: Action.UPDATE_CAMERA_IDS,\r\n        payload: {\r\n            cameras\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateFirstLabelCreatedFlag(firstLabelCreatedFlag: boolean) {\r\n    return {\r\n        type: Action.UPDATE_FIRST_LABEL_CREATED_FLAG,\r\n        payload: {\r\n            firstLabelCreatedFlag\r\n        }\r\n    }\r\n}"," const rootUrl: string = \"http://192.168.10.49:5000/\"\n// const rootUrl: string = \"\"\nconst imageList: string = rootUrl + \"api/image/list\"\nconst runFeed: string = rootUrl + \"api/image/run_feed\"\nconst annotationList: string = rootUrl + \"api/annotation/list\"\nconst saveAnnotations: string = rootUrl + \"api/image/save_annotations\"\nconst deleteAnnotations: string = rootUrl + \"api/image/delete_annotations\"\nconst deleteAllFiles: string = rootUrl + \"api/image/delete_all_files\"\nconst saveLabels: string = rootUrl + \"api/annotation/save_labels\"\n\nexport { rootUrl, imageList, runFeed, annotationList, saveAnnotations, saveLabels, deleteAnnotations, deleteAllFiles }","import {rootUrl} from \"../url/ApiUrl\"\r\n\r\nexport class FileUtil {\r\n    public static loadImage(fileName: string): Promise<HTMLImageElement> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t// const url = URL.createObjectURL(fileData);\r\n            const image = new Image();\r\n\t\t\timage.src = rootUrl+fileName;\r\n\t\t\timage.onload = () => resolve(image);\r\n\t\t\timage.onerror = reject;\r\n\t\t})\r\n    }\r\n\r\n    public static loadImages(fileNames: string[]): Promise<HTMLImageElement[]> {\r\n        return new Promise((resolve, reject) => {\r\n            const promises: Promise<HTMLImageElement>[] = fileNames.map((fileName: string) => FileUtil.loadImage(fileName))\r\n            Promise\r\n                .all(promises)\r\n                .then((values: HTMLImageElement[]) => resolve(values))\r\n                .catch((error) => reject(error));\r\n        });\r\n    }\r\n\r\n    public static readFile(fileData: File): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            let reader = new FileReader();\r\n            reader.onloadend = (event: any) => {\r\n                resolve(event.target.result);\r\n            };\r\n            reader.onerror = reject;\r\n            reader.readAsText(fileData);\r\n        })\r\n    }\r\n\r\n    public static readFiles(fileData: File[]): Promise<string[]> {\r\n        return new Promise((resolve, reject) => {\r\n            const promises: Promise<string>[] = fileData.map((fileData: File) => FileUtil.readFile(fileData))\r\n            Promise\r\n                .all(promises)\r\n                .then((values: string[]) => resolve(values))\r\n                .catch((error) => reject(error));\r\n        });\r\n    }\r\n\r\n    public static extractFileExtension(name: string): string | null {\r\n        const parts = name.split(\".\");\r\n        return parts.length > 1 ? parts[1] : null;\r\n    }\r\n\r\n    public static extractFileName(name: string): string | null {\r\n        return name.split(\".\")[0];\r\n    }\r\n}","import {store} from \"../..\";\r\n\r\nexport class AISelector {\r\n    public static getSuggestedLabelList(): string[] {\r\n        return store.getState().ai.suggestedLabelList;\r\n    }\r\n\r\n    public static getRejectedSuggestedLabelList(): string[] {\r\n        return store.getState().ai.rejectedSuggestedLabelList;\r\n    }\r\n\r\n    public static isAIObjectDetectorModelLoaded(): boolean {\r\n        return store.getState().ai.isObjectDetectorLoaded;\r\n    }\r\n\r\n    public static isAIPoseDetectorModelLoaded(): boolean {\r\n        return store.getState().ai.isPoseDetectorLoaded;\r\n    }\r\n\r\n    public static isAIDisabled(): boolean {\r\n        return store.getState().ai.isAIDisabled;\r\n    }\r\n}","import {Settings} from \"../../settings/Settings\";\r\nimport {AISelector} from \"../../store/selectors/AISelector\";\r\n\r\nexport class CSSHelper {\r\n    public static getLeadingColor(): string {\r\n        return AISelector.isAIObjectDetectorModelLoaded() ||\r\n            AISelector.isAIPoseDetectorModelLoaded() ? Settings.PRIMARY_COLOR : Settings.SECONDARY_COLOR;\r\n    }\r\n}","import classNames from \"classnames\";\r\nimport React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { ImageLoadManager } from \"../../../../logic/imageRepository/ImageLoadManager\";\r\nimport { IRect } from \"../../../../interfaces/IRect\";\r\nimport { ISize } from \"../../../../interfaces/ISize\";\r\nimport { ImageRepository } from \"../../../../logic/imageRepository/ImageRepository\";\r\nimport { AppState } from \"../../../../store\";\r\nimport { updateImageDataById } from \"../../../../store/labels/actionCreators\";\r\nimport { ImageData } from \"../../../../store/labels/types\";\r\nimport { FileUtil } from \"../../../../utils/FileUtil\";\r\nimport { RectUtil } from \"../../../../utils/RectUtil\";\r\nimport './ImagePreview.scss';\r\nimport { CSSHelper } from \"../../../../logic/helpers/CSSHelper\";\r\n\r\ninterface IProps {\r\n    imageData: ImageData;\r\n    style: React.CSSProperties;\r\n    size: ISize;\r\n    isScrolling?: boolean;\r\n    isChecked?: boolean;\r\n    onClick?: () => any;\r\n    isSelected?: boolean;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n}\r\n\r\ninterface IState {\r\n    image: HTMLImageElement;\r\n}\r\n\r\nclass ImagePreview extends React.Component<IProps, IState> {\r\n    private isLoading: boolean = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            image: null,\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        ImageLoadManager.addAndRun(this.loadImage(this.props.imageData, this.props.isScrolling));\r\n    }\r\n\r\n    public componentWillUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>, nextContext: any): void {\r\n        if (this.props.imageData.id !== nextProps.imageData.id) {\r\n            if (nextProps.imageData.loadStatus) {\r\n                ImageLoadManager.addAndRun(this.loadImage(nextProps.imageData, nextProps.isScrolling));\r\n            }\r\n            else {\r\n                this.setState({ image: null });\r\n            }\r\n        }\r\n\r\n        if (this.props.isScrolling && !nextProps.isScrolling) {\r\n            ImageLoadManager.addAndRun(this.loadImage(nextProps.imageData, false));\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>, nextContext: any): boolean {\r\n        return (\r\n            this.props.imageData.id !== nextProps.imageData.id ||\r\n            this.state.image !== nextState.image ||\r\n            this.props.isSelected !== nextProps.isSelected ||\r\n            this.props.isChecked !== nextProps.isChecked\r\n        )\r\n    }\r\n\r\n    private loadImage = async (imageData: ImageData, isScrolling: boolean) => {\r\n        if (imageData.loadStatus) {\r\n            const image = ImageRepository.getById(imageData.id);\r\n            if (this.state.image !== image) {\r\n                this.setState({ image });\r\n            }\r\n        }\r\n        else if (!isScrolling || !this.isLoading) {\r\n            this.isLoading = true;\r\n            const saveLoadedImagePartial = (image: HTMLImageElement) => this.saveLoadedImage(image, imageData);\r\n            FileUtil.loadImage(imageData.fileName)\r\n                .then((image: HTMLImageElement) => saveLoadedImagePartial(image))\r\n                .catch((error) => this.handleLoadImageError())\r\n        }\r\n    };\r\n\r\n    private saveLoadedImage = (image: HTMLImageElement, imageData: ImageData) => {\r\n        imageData.loadStatus = true;\r\n        this.props.updateImageDataById(imageData.id, imageData);\r\n        ImageRepository.storeImage(imageData.id, image);\r\n        if (imageData.id === this.props.imageData.id) {\r\n            this.setState({ image });\r\n            this.isLoading = false;\r\n        }\r\n    };\r\n\r\n    private getStyle = () => {\r\n        const { size } = this.props;\r\n\r\n        const containerRect: IRect = {\r\n            x: 0.15 * size.width,\r\n            y: 0.15 * size.height,\r\n            width: 0.7 * size.width,\r\n            height: 0.7 * size.height\r\n        };\r\n\r\n        const imageRect: IRect = {\r\n            x: 0,\r\n            y: 0,\r\n            width: this.state.image.width,\r\n            height: this.state.image.height\r\n        };\r\n\r\n        const imageRatio = RectUtil.getRatio(imageRect);\r\n        const imagePosition: IRect = RectUtil.fitInsideRectWithRatio(containerRect, imageRatio);\r\n\r\n        return {\r\n            width: imagePosition.width,\r\n            height: imagePosition.height,\r\n            left: imagePosition.x,\r\n            top: imagePosition.y\r\n        }\r\n    };\r\n\r\n    private handleLoadImageError = () => { };\r\n\r\n    private getClassName = () => {\r\n        return classNames(\r\n            \"ImagePreview\",\r\n            {\r\n                \"selected\": this.props.isSelected,\r\n            }\r\n        );\r\n    };\r\n\r\n    public render() {\r\n        const {\r\n            isChecked,\r\n            style,\r\n            onClick\r\n        } = this.props;\r\n\r\n        return (\r\n            <div\r\n                className={this.getClassName()}\r\n                style={style}\r\n                onClick={onClick ? onClick : undefined}\r\n            >\r\n                {(!!this.state.image) ?\r\n                    [\r\n                        <div\r\n                            className=\"Foreground\"\r\n                            key={\"Foreground\"}\r\n                            style={this.getStyle()}\r\n                        >\r\n                            <img\r\n                                className=\"Image\"\r\n                                draggable={false}\r\n                                src={this.state.image.src}\r\n                                alt={this.state.image.alt}\r\n                                style={{ ...this.getStyle(), left: 0, top: 0 }}\r\n                            />\r\n                            {isChecked && <img\r\n                                className=\"CheckBox\"\r\n                                draggable={false}\r\n                                src={\"ico/ok.png\"}\r\n                                alt={\"checkbox\"}\r\n                            />}\r\n                        </div>,\r\n                        <div\r\n                            className=\"Background\"\r\n                            key={\"Background\"}\r\n                            style={this.getStyle()}\r\n                        />\r\n                    ] :\r\n                    <ClipLoader\r\n                        size={30}\r\n                        color={CSSHelper.getLeadingColor()}\r\n                        loading={true}\r\n                    />}\r\n            </div>)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ImagePreview);","export enum ContextType {\r\n    EDITOR = \"EDITOR\",\r\n    LEFT_NAVBAR = \"LEFT_NAVBAR\",\r\n    RIGHT_NAVBAR = \"RIGHT_NAVBAR\",\r\n    POPUP = \"POPUP\",\r\n    DROPDOWN = \"DROPDOWN\"\r\n}","import {ISize} from \"../../interfaces/ISize\";\r\nimport {GeneralActionTypes, ProjectData} from \"./types\";\r\nimport {Action} from \"../Actions\";\r\nimport {PopupWindowType} from \"../../data/enums/PopupWindowType\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {ContextType} from \"../../data/enums/ContextType\";\r\n\r\nexport function updateWindowSize(windowSize: ISize): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_WINDOW_SIZE,\r\n        payload: {\r\n            windowSize,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateActivePopupType(activePopupType: PopupWindowType): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ACTIVE_POPUP_TYPE,\r\n        payload: {\r\n            activePopupType,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateCustomCursorStyle(customCursorStyle: CustomCursorStyle): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_CUSTOM_CURSOR_STYLE,\r\n        payload: {\r\n            customCursorStyle,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateActiveContext(activeContext: ContextType): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_CONTEXT,\r\n        payload: {\r\n            activeContext,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updatePreventCustomCursorStatus(preventCustomCursor: boolean): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_PREVENT_CUSTOM_CURSOR_STATUS,\r\n        payload: {\r\n            preventCustomCursor,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateImageDragModeStatus(imageDragMode: boolean): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_IMAGE_DRAG_MODE_STATUS,\r\n        payload: {\r\n            imageDragMode,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateCrossHairVisibleStatus(crossHairVisible: boolean): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_CROSS_HAIR_VISIBLE_STATUS,\r\n        payload: {\r\n            crossHairVisible,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateProjectData(projectData: ProjectData): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_PROJECT_DATA,\r\n        payload: {\r\n            projectData,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateConfigFolder(configFolder: String): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_CONFIG_FOLDER,\r\n        payload: {\r\n            configFolder,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateErrorMsg(error: String): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ERROR_MSG,\r\n        payload: {\r\n            error,\r\n        },\r\n    };\r\n}\r\n\r\nexport function updateZoom(zoom: number): GeneralActionTypes {\r\n    return {\r\n        type: Action.UPDATE_ZOOM,\r\n        payload: {\r\n            zoom,\r\n        },\r\n    };\r\n}","import {PrimaryEditorRenderEngine} from \"../logic/render/PrimaryEditorRenderEngine\";\r\nimport {BaseRenderEngine} from \"../logic/render/BaseRenderEngine\";\r\nimport {IRect} from \"../interfaces/IRect\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\nimport {ISize} from \"../interfaces/ISize\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport {ViewPortHelper} from \"../logic/helpers/ViewPortHelper\";\r\n\r\nexport class EditorModel {\r\n    public static editor: HTMLDivElement;\r\n    public static canvas: HTMLCanvasElement;\r\n    public static mousePositionIndicator: HTMLDivElement;\r\n    public static cursor: HTMLDivElement;\r\n    public static viewPortScrollbars: Scrollbars;\r\n    public static image: HTMLImageElement;\r\n\r\n    public static primaryRenderingEngine: PrimaryEditorRenderEngine;\r\n    public static supportRenderingEngine: BaseRenderEngine;\r\n\r\n    public static viewPortHelper: ViewPortHelper;\r\n\r\n    public static isLoading: boolean = false;\r\n    public static viewPortActionsDisabled: boolean = false;\r\n    public static mousePositionOnViewPortContent: IPoint;\r\n    public static viewPortSize: ISize;\r\n\r\n    // x and y describe the dimension of the margin that remains constant regardless of the scale of the image\r\n    // width and height describes the render image size for 100% scale\r\n    public static defaultRenderImageRect: IRect;\r\n}","export class UnitUtil {\r\n\r\n    public static deg2rad(angleDeg:number) {\r\n        return(angleDeg * Math.PI/180);\r\n    }\r\n\r\n    public static rad2deg(angleRad:number) {\r\n        return(angleRad * 180/Math.PI);\r\n    }\r\n}","\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\nimport {IRect} from \"../interfaces/IRect\";\r\nimport {UnitUtil} from \"./UnitUtil\";\r\n\r\nexport class DrawUtil {\r\n\r\n    public static clearCanvas(canvas:HTMLCanvasElement): void {\r\n        let ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    public static drawLine(canvas:HTMLCanvasElement, startPoint:IPoint, endPoint:IPoint, color:string = \"#111111\", thickness:number = 1): void {\r\n        let ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = thickness;\r\n        ctx.lineCap = 'round';\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPoint.x, startPoint.y);\r\n        ctx.lineTo(endPoint.x + 1, endPoint.y + 1);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawRect(canvas:HTMLCanvasElement, rect:IRect, color:string = \"#fff\", thickness:number = 1): void {\r\n        let ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = thickness;\r\n        ctx.beginPath();\r\n        ctx.rect(rect.x, rect.y, rect.width, rect.height);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawRectWithFill(canvas:HTMLCanvasElement, rect:IRect, color:string = \"#fff\"): void {\r\n        let ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.rect(rect.x, rect.y, rect.width, rect.height);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static shadeEverythingButRect(canvas:HTMLCanvasElement, rect:IRect, color:string = \"rgba(0, 0, 0, 0.7)\"): void {\r\n        let ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        ctx.globalCompositeOperation = \"destination-out\";\r\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawCircleWithFill(canvas:HTMLCanvasElement, anchorPoint:IPoint, radius:number, color:string = \"#ffffff\"):void {\r\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        const startAngleRad = UnitUtil.deg2rad(0);\r\n        const endAngleRad = UnitUtil.deg2rad(360);\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(anchorPoint.x, anchorPoint.y, radius, startAngleRad, endAngleRad, false);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawCircle(canvas:HTMLCanvasElement, anchorPoint:IPoint, radius:number, startAngleDeg:number, endAngleDeg:number, thickness:number = 20, color:string = \"#ffffff\"): void {\r\n        let ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        let startAngleRad = UnitUtil.deg2rad(startAngleDeg);\r\n        let endAngleRad = UnitUtil.deg2rad(endAngleDeg);\r\n        ctx.save();\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = thickness;\r\n        ctx.beginPath();\r\n        ctx.arc(anchorPoint.x, anchorPoint.y, radius, startAngleRad, endAngleRad, false);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawPolygon(canvas:HTMLCanvasElement, anchors: IPoint[], color:string = \"#fff\", thickness:number = 1): void {\r\n        let ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = thickness;\r\n        ctx.beginPath();\r\n        ctx.moveTo(anchors[0].x, anchors[0].y);\r\n        for (let i = 1; i < anchors.length; i ++) {\r\n            ctx.lineTo(anchors[i].x, anchors[i].y);\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawPolygonWithFill(canvas:HTMLCanvasElement, anchors: IPoint[], color:string = \"#fff\"): void {\r\n        let ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(anchors[0].x, anchors[0].y);\r\n        for (let i = 1; i < anchors.length; i ++) {\r\n            ctx.lineTo(anchors[i].x, anchors[i].y);\r\n        }\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    public static drawText(canvas:HTMLCanvasElement, text:string, textSize:number, anchorPoint:IPoint, color:string = \"#ffffff\", bold:boolean = false, align:string = \"center\"):void {\r\n        let ctx:CanvasRenderingContext2D = canvas.getContext('2d');\r\n        ctx.save();\r\n        ctx.fillStyle = color;\r\n        ctx.textAlign = align as CanvasTextAlign;\r\n        ctx.textBaseline=\"middle\";\r\n        ctx.font = (bold ? \"bold \" : \"\") + textSize + \"px Arial\";\r\n        ctx.fillText(text, anchorPoint.x, anchorPoint.y);\r\n        ctx.restore();\r\n    }\r\n\r\n    public static getRandomRGBColor():string {\r\n        return \"rgb(\" + Math.round(Math.random() * 255) + \",\" + Math.round(Math.random() * 255) + \",\" + Math.round(Math.random() * 255) + \")\";\r\n    }\r\n\r\n\r\n\r\n    public static hexToRGB(hex: string, alpha: number): string {\r\n        const r = parseInt(hex.slice(1, 3), 16);\r\n        const g = parseInt(hex.slice(3, 5), 16);\r\n        const b = parseInt(hex.slice(5, 7), 16);\r\n\r\n        if (alpha) {\r\n            return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\r\n        } else {\r\n            return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\r\n        }\r\n    }\r\n}","import {IPoint} from \"../interfaces/IPoint\";\r\n\r\nexport class PointUtil {\r\n    public static equals(p1: IPoint, p2: IPoint): boolean {\r\n        return p1.x === p2.x && p1.y === p2.y;\r\n    }\r\n\r\n    public static add(p1: IPoint, p2: IPoint): IPoint {\r\n        return {\r\n            x: p1.x + p2.x,\r\n            y: p1.y + p2.y\r\n        }\r\n    }\r\n\r\n    public static subtract(p1: IPoint, p2: IPoint): IPoint {\r\n        return {\r\n            x: p1.x - p2.x,\r\n            y: p1.y - p2.y\r\n        }\r\n    }\r\n\r\n    public static multiply(p1: IPoint, factor: number) {\r\n        return {\r\n            x: p1.x * factor,\r\n            y: p1.y * factor\r\n        }\r\n    }\r\n}","import {ISize} from \"../interfaces/ISize\";\r\nimport {Settings} from \"./Settings\";\r\n\r\nexport class RenderEngineConfig {\r\n    public readonly lineThickness: number = 2;\r\n    public readonly lineActiveColor: string = Settings.PRIMARY_COLOR;\r\n    public readonly lineInactiveColor: string = \"#fff\";\r\n    public readonly crossHairLineColor: string = \"#fff\";\r\n    public readonly crossHairPadding: number = 25;\r\n    public readonly anchorSize: ISize = {\r\n        width: Settings.RESIZE_HANDLE_DIMENSION_PX,\r\n        height: Settings.RESIZE_HANDLE_DIMENSION_PX\r\n    };\r\n    public readonly anchorHoverSize: ISize = {\r\n        width: Settings.RESIZE_HANDLE_HOVER_DIMENSION_PX,\r\n        height: Settings.RESIZE_HANDLE_HOVER_DIMENSION_PX\r\n    };\r\n    public readonly suggestedAnchorDetectionSize: ISize = {\r\n        width: 100,\r\n        height: 100\r\n    };\r\n    public readonly activeAnchorColor: string = Settings.SECONDARY_COLOR;\r\n    public readonly inactiveAnchorColor: string = Settings.DARK_THEME_SECOND_COLOR;\r\n}","export enum CustomCursorStyle {\r\n    DEFAULT = \"DEFAULT\",\r\n    MOVE = \"MOVE\",\r\n    RESIZE = \"RESIZE\",\r\n    ADD = \"ADD\",\r\n    CANCEL = \"CANCEL\",\r\n    CLOSE = \"CLOSE\",\r\n    GRAB = \"GRAB\",\r\n    GRABBING = \"GRABBING\"\r\n}","import {store} from \"../..\";\r\nimport {ImageData, LabelLine, LabelName, LabelPoint, LabelPolygon, LabelRect} from \"../labels/types\";\r\nimport {find} from \"lodash\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\n\r\nexport class LabelsSelector {\r\n    public static getLabelNames(): LabelName[] {\r\n        return store.getState().labels.labels;\r\n    }\r\n\r\n    public static getActiveLabelNameId(): string {\r\n        return store.getState().labels.activeLabelNameId;\r\n    }\r\n\r\n    public static getActiveLabelType(): LabelType {\r\n        return store.getState().labels.activeLabelType;\r\n    }\r\n\r\n    public static getImagesData(): ImageData[] {\r\n        return store.getState().labels.imagesData;\r\n    }\r\n\r\n    public static getActiveImageIndex(): number {\r\n        return store.getState().labels.activeImageIndex;\r\n    }\r\n\r\n    public static getActiveImageData(): ImageData | null {\r\n        const activeImageIndex: number | null = LabelsSelector.getActiveImageIndex();\r\n\r\n        if (activeImageIndex === null)\r\n            return null;\r\n\r\n        return LabelsSelector.getImageDataByIndex(activeImageIndex);\r\n    }\r\n\r\n    public static getImageDataByIndex(index: number): ImageData {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        return imagesData[index];\r\n    }\r\n\r\n    public static getImageDataById(id: string): ImageData {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        return find(imagesData, {id: id});\r\n    }\r\n\r\n    public static getActiveLabelId(): string | null {\r\n        return store.getState().labels.activeLabelId;\r\n    }\r\n\r\n    public static getHighlightedLabelId(): string | null {\r\n        return store.getState().labels.highlightedLabelId;\r\n    }\r\n\r\n    public static getActiveRectLabel(): LabelRect | null {\r\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\r\n\r\n        if (activeLabelId === null)\r\n            return null;\r\n\r\n        return find(LabelsSelector.getActiveImageData().labelRects, {id: activeLabelId});\r\n    }\r\n\r\n    public static getActivePointLabel(): LabelPoint | null {\r\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\r\n\r\n        if (activeLabelId === null)\r\n            return null;\r\n\r\n        return find(LabelsSelector.getActiveImageData().labelPoints, {id: activeLabelId});\r\n    }\r\n\r\n    public static getActivePolygonLabel(): LabelPolygon | null {\r\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\r\n\r\n        if (activeLabelId === null)\r\n            return null;\r\n\r\n        return find(LabelsSelector.getActiveImageData().labelPolygons, {id: activeLabelId});\r\n    }\r\n\r\n    public static getActiveLineLabel(): LabelLine | null {\r\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\r\n\r\n        if (activeLabelId === null)\r\n            return null;\r\n\r\n        return find(LabelsSelector.getActiveImageData().labelLines, {id: activeLabelId});\r\n    }\r\n}","export enum EventType {\r\n    RESIZE = \"resize\",\r\n    MOUSE_UP = \"mouseup\",\r\n    MOUSE_DOWN = \"mousedown\",\r\n    MOUSE_MOVE = \"mousemove\",\r\n    MOUSE_WHEEL = \"wheel\",\r\n    KEY_DOWN = \"keydown\",\r\n    KEY_PRESS = \"keypress\",\r\n    KEY_UP = \"keyup\",\r\n    FOCUS = \"focus\"\r\n}","import {EventType} from \"../data/enums/EventType\";\r\n\r\nexport class MouseEventUtil {\r\n    public static getEventType(event: Event): EventType | null {\r\n        if (!event) return null;\r\n\r\n        switch (event.type) {\r\n            case EventType.MOUSE_DOWN:\r\n                return EventType.MOUSE_DOWN;\r\n            case EventType.MOUSE_UP:\r\n                return EventType.MOUSE_UP;\r\n            case EventType.MOUSE_MOVE:\r\n                return EventType.MOUSE_MOVE;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}","import {EditorData} from \"../../data/EditorData\";\r\nimport {MouseEventUtil} from \"../../utils/MouseEventUtil\";\r\nimport {EventType} from \"../../data/enums/EventType\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\n\r\nexport abstract class BaseRenderEngine {\r\n    protected readonly canvas: HTMLCanvasElement;\r\n    public labelType: LabelType;\r\n\r\n    protected constructor(canvas: HTMLCanvasElement) {\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    public update(data: EditorData): void {\r\n        if (!!data.event) {\r\n            switch (MouseEventUtil.getEventType(data.event)) {\r\n                case EventType.MOUSE_MOVE:\r\n                    this.mouseMoveHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_UP:\r\n                    this.mouseUpHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_DOWN:\r\n                    this.mouseDownHandler(data);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected abstract mouseDownHandler(data: EditorData): void;\r\n    protected abstract mouseMoveHandler(data: EditorData): void;\r\n    protected abstract mouseUpHandler(data: EditorData): void;\r\n\r\n    abstract render(data: EditorData): void;\r\n\r\n    abstract isInProgress(): boolean;\r\n}","import {ILine} from \"../interfaces/ILine\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\n\r\nexport class LineUtil {\r\n    public static getDistanceFromLine(l: ILine, p: IPoint): number {\r\n        if (l.start.x !== l.end.x || l.start.y !== l.end.y) {\r\n            const nom: number = Math.abs((l.end.y - l.start.y) * p.x - (l.end.x - l.start.x) * p.y + l.end.x * l.start.y - l.end.y * l.start.x);\r\n            const denom: number = Math.sqrt(Math.pow(l.end.y - l.start.y, 2) + Math.pow(l.end.x - l.start.x, 2));\r\n            return nom / denom;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getCenter(l: ILine): IPoint {\r\n        return {\r\n            x: (l.start.x + l.end.x) / 2,\r\n            y: (l.start.y + l.end.y) / 2\r\n        }\r\n    }\r\n\r\n    public static getPoints(l: ILine): IPoint[] {\r\n        return [l.start, l.end]\r\n    }\r\n}","import {EditorData} from \"../data/EditorData\";\r\nimport {RectUtil} from \"./RectUtil\";\r\nimport {store} from \"../index\";\r\nimport {CustomCursorStyle} from \"../data/enums/CustomCursorStyle\";\r\nimport {updateCustomCursorStyle} from \"../store/general/actionCreators\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\nimport {PointUtil} from \"./PointUtil\";\r\nimport {IRect} from \"../interfaces/IRect\";\r\nimport {ILine} from \"../interfaces/ILine\";\r\nimport {LineUtil} from \"./LineUtil\";\r\nimport {ISize} from \"../interfaces/ISize\";\r\n\r\nexport class RenderEngineUtil {\r\n    public static calculateImageScale(data: EditorData): number {\r\n        return data.realImageSize.width / data.viewPortContentImageRect.width;\r\n    }\r\n\r\n    public static isMouseOverImage(data: EditorData): boolean {\r\n        return RectUtil.isPointInside(data.viewPortContentImageRect, data.mousePositionOnViewPortContent);\r\n    }\r\n\r\n    public static isMouseOverCanvas(data: EditorData): boolean {\r\n        return RectUtil.isPointInside({x: 0, y: 0, ...data.viewPortContentSize}, data.mousePositionOnViewPortContent);\r\n    }\r\n\r\n    public static transferPointFromImageToViewPortContent(point: IPoint, data: EditorData): IPoint {\r\n        const scale = RenderEngineUtil.calculateImageScale(data);\r\n        return PointUtil.add(PointUtil.multiply(point, 1/scale), data.viewPortContentImageRect);\r\n    }\r\n\r\n    public static transferPolygonFromImageToViewPortContent(polygon: IPoint[], data: EditorData): IPoint[] {\r\n        return polygon.map((point: IPoint) => RenderEngineUtil.transferPointFromImageToViewPortContent(point, data));\r\n    }\r\n\r\n    public static transferLineFromImageToViewPortContent(line: ILine, data: EditorData): ILine {\r\n        return {\r\n            start: RenderEngineUtil.transferPointFromImageToViewPortContent(line.start, data),\r\n            end: RenderEngineUtil.transferPointFromImageToViewPortContent(line.end, data)\r\n        }\r\n    }\r\n\r\n    public static transferPointFromViewPortContentToImage(point: IPoint, data: EditorData): IPoint {\r\n        const scale = RenderEngineUtil.calculateImageScale(data);\r\n        return PointUtil.multiply(PointUtil.subtract(point, data.viewPortContentImageRect), scale);\r\n    }\r\n\r\n    public static transferPolygonFromViewPortContentToImage(polygon: IPoint[], data: EditorData): IPoint[] {\r\n        return polygon.map((point: IPoint) => RenderEngineUtil.transferPointFromViewPortContentToImage(point, data));\r\n    }\r\n\r\n    public static transferLineFromViewPortContentToImage(line: ILine, data: EditorData): ILine {\r\n        return {\r\n            start: RenderEngineUtil.transferPointFromViewPortContentToImage(line.start, data),\r\n            end: RenderEngineUtil.transferPointFromViewPortContentToImage(line.end, data)\r\n        }\r\n    }\r\n\r\n    public static transferRectFromViewPortContentToImage(rect: IRect, data: EditorData): IRect {\r\n        const scale = RenderEngineUtil.calculateImageScale(data);\r\n        return RectUtil.translate(RectUtil.scaleRect(rect, 1/scale), data.viewPortContentImageRect);\r\n    }\r\n\r\n    public static transferRectFromImageToViewPortContent(rect: IRect, data: EditorData): IRect {\r\n        const scale = RenderEngineUtil.calculateImageScale(data);\r\n        const translation: IPoint = {\r\n            x: - data.viewPortContentImageRect.x,\r\n            y: - data.viewPortContentImageRect.y\r\n        };\r\n\r\n        return RectUtil.scaleRect(RectUtil.translate(rect, translation), scale);\r\n    }\r\n\r\n    public static wrapDefaultCursorStyleInCancel(data: EditorData) {\r\n        if (RectUtil.isPointInside(data.viewPortContentImageRect, data.mousePositionOnViewPortContent)) {\r\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.DEFAULT));\r\n        } else {\r\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.CANCEL));\r\n        }\r\n    }\r\n\r\n    public static setValueBetweenPixels(value: number): number {\r\n        return Math.floor(value) + 0.5;\r\n    }\r\n\r\n    public static setPointBetweenPixels(point: IPoint): IPoint {\r\n        return {\r\n            x: RenderEngineUtil.setValueBetweenPixels(point.x),\r\n            y: RenderEngineUtil.setValueBetweenPixels(point.y)\r\n        }\r\n    }\r\n\r\n    public static setRectBetweenPixels(rect: IRect): IRect {\r\n        const topLeft: IPoint = {\r\n            x: rect.x,\r\n            y: rect.y\r\n        };\r\n        const bottomRight: IPoint = {\r\n            x: rect.x + rect.width,\r\n            y: rect.y + rect.height\r\n        };\r\n        const topLeftBetweenPixels = RenderEngineUtil.setPointBetweenPixels(topLeft);\r\n        const bottomRightBetweenPixels = RenderEngineUtil.setPointBetweenPixels(bottomRight);\r\n        return {\r\n            x: topLeftBetweenPixels.x,\r\n            y: topLeftBetweenPixels.y,\r\n            width: bottomRightBetweenPixels.x - topLeftBetweenPixels.x,\r\n            height: bottomRightBetweenPixels.y - topLeftBetweenPixels.y\r\n        }\r\n    }\r\n\r\n    public static isMouseOverLine(mouse: IPoint, l: ILine, radius: number): boolean {\r\n        const minX: number = Math.min(l.start.x, l.end.x);\r\n        const maxX: number = Math.max(l.start.x, l.end.x);\r\n        const minY: number = Math.min(l.start.y, l.end.y);\r\n        const maxY: number = Math.max(l.start.y, l.end.y);\r\n\r\n        return (minX - radius <= mouse.x && maxX + radius >= mouse.x) &&\r\n            (minY - radius <= mouse.y && maxY + radius >= mouse.y) &&\r\n            LineUtil.getDistanceFromLine(l, mouse) < radius;\r\n    }\r\n\r\n    public static isMouseOverAnchor(mouse: IPoint, anchor: IPoint, size: ISize): boolean {\r\n        if (!mouse || !anchor) return null;\r\n        return RectUtil.isPointInside(RectUtil.getRectWithCenterAndSize(anchor, size), mouse);\r\n    }\r\n}","import {store} from \"../..\";\r\nimport {PopupWindowType} from \"../../data/enums/PopupWindowType\";\r\nimport {ContextType} from \"../../data/enums/ContextType\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {ProjectType} from \"../../data/enums/ProjectType\";\r\n\r\nexport class GeneralSelector {\r\n    public static getActivePopupType(): PopupWindowType {\r\n        return store.getState().general.activePopupType;\r\n    }\r\n\r\n    public static getActiveContext(): ContextType {\r\n        return store.getState().general.activeContext;\r\n    }\r\n\r\n    public static getPreventCustomCursorStatus(): boolean {\r\n        return store.getState().general.preventCustomCursor;\r\n    }\r\n\r\n    public static getImageDragModeStatus(): boolean {\r\n        return store.getState().general.imageDragMode;\r\n    }\r\n\r\n    public static getCrossHairVisibleStatus(): boolean {\r\n        return store.getState().general.crossHairVisible;\r\n    }\r\n\r\n    public static getCustomCursorStyle(): CustomCursorStyle {\r\n        return store.getState().general.customCursorStyle;\r\n    }\r\n\r\n    public static getProjectName(): string {\r\n        return store.getState().general.projectData.name;\r\n    }\r\n\r\n    public static getProjectType(): ProjectType {\r\n        return store.getState().general.projectData.type;\r\n    }\r\n\r\n    public static getZoom(): number {\r\n        return store.getState().general.zoom;\r\n    }\r\n}","export enum LabelStatus {\r\n    ACCEPTED = \"ACCEPTED\",\r\n    REJECTED = \"REJECTED\",\r\n    UNDECIDED = \"UNDECIDED\"\r\n}","import {LabelName, LabelPolygon, LabelRect} from \"../store/labels/types\";\r\nimport uuidv4 from 'uuid/v4';\r\nimport {find} from \"lodash\";\r\nimport {IRect} from \"../interfaces/IRect\";\r\nimport {LabelStatus} from \"../data/enums/LabelStatus\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\n\r\nexport class LabelUtil {\r\n    public static createLabelName(name: string): LabelName {\r\n        return {\r\n            id: uuidv4(),\r\n            name: name\r\n        }\r\n    }\r\n\r\n    public static createLabelRect(labelId: string, rect: IRect): LabelRect {\r\n        return {\r\n            id: uuidv4(),\r\n            labelId: labelId,\r\n            rect,\r\n            isCreatedByAI: false,\r\n            status: LabelStatus.ACCEPTED,\r\n            suggestedLabel: null\r\n        }\r\n    }\r\n\r\n    public static createLabelPolygon(labelId: string, vertices: IPoint[]): LabelPolygon {\r\n        return {\r\n            id: uuidv4(),\r\n            labelId: labelId,\r\n            vertices: vertices\r\n        }\r\n    }\r\n\r\n    public static convertLabelNamesListToMap(labelNames: LabelName[]): any {\r\n        return labelNames.reduce((map: any, labelNameRecord: LabelName) => {\r\n            map[labelNameRecord.id] = labelNameRecord.name;\r\n            return map;\r\n        }, {})\r\n    }\r\n\r\n    public static convertMapToLabelNamesList(object: any): LabelName[] {\r\n        const labelNamesList: LabelName[] = [];\r\n        Object.keys(object).forEach((key) => {\r\n            if (!!object[key]) {\r\n                labelNamesList.push({\r\n                    id: key,\r\n                    name: object[key]\r\n                })\r\n            }\r\n        });\r\n        return labelNamesList;\r\n    }\r\n\r\n    public static labelNamesIdsDiff(oldLabelNames: LabelName[], newLabelNames: LabelName[]): string[] {\r\n        return oldLabelNames.reduce((missingIds: string[], labelName: LabelName) => {\r\n            if (!find(newLabelNames, { 'id': labelName.id })) {\r\n                missingIds.push(labelName.id);\r\n            }\r\n            return missingIds\r\n        }, [])\r\n    }\r\n}","import {IPoint} from \"../../interfaces/IPoint\";\r\nimport {IRect} from \"../../interfaces/IRect\";\r\nimport {RectUtil} from \"../../utils/RectUtil\";\r\nimport {DrawUtil} from \"../../utils/DrawUtil\";\r\nimport {store} from \"../..\";\r\nimport {ImageData, LabelRect} from \"../../store/labels/types\";\r\nimport {\r\n    updateActiveLabelId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateHighlightedLabelId,\r\n    updateImageDataById\r\n} from \"../../store/labels/actionCreators\";\r\nimport {PointUtil} from \"../../utils/PointUtil\";\r\nimport {RectAnchor} from \"../../data/RectAnchor\";\r\nimport {RenderEngineConfig} from \"../../settings/RenderEngineConfig\";\r\nimport {updateCustomCursorStyle} from \"../../store/general/actionCreators\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {EditorData} from \"../../data/EditorData\";\r\nimport {BaseRenderEngine} from \"./BaseRenderEngine\";\r\nimport {RenderEngineUtil} from \"../../utils/RenderEngineUtil\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\nimport {EditorActions} from \"../actions/EditorActions\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {LabelStatus} from \"../../data/enums/LabelStatus\";\r\nimport {LabelUtil} from \"../../utils/LabelUtil\";\r\n\r\nexport class RectRenderEngine extends BaseRenderEngine {\r\n    private config: RenderEngineConfig = new RenderEngineConfig();\r\n\r\n    // =================================================================================================================\r\n    // STATE\r\n    // =================================================================================================================\r\n\r\n    private startCreateRectPoint: IPoint;\r\n    private startResizeRectAnchor: RectAnchor;\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n        this.labelType = LabelType.RECT;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public mouseDownHandler = (data: EditorData) => {\r\n        const isMouseOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n        if (isMouseOverCanvas) {\r\n            const rectUnderMouse: LabelRect = this.getRectUnderMouse(data);\r\n            if (!!rectUnderMouse) {\r\n                const rect: IRect = this.calculateRectRelativeToActiveImage(rectUnderMouse.rect, data);\r\n                const anchorUnderMouse: RectAnchor = this.getAnchorUnderMouseByRect(rect, data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n                if (!!anchorUnderMouse && rectUnderMouse.status === LabelStatus.ACCEPTED) {\r\n                    store.dispatch(updateActiveLabelId(rectUnderMouse.id));\r\n                    this.startRectResize(anchorUnderMouse);\r\n                } else {\r\n                    if (!!LabelsSelector.getHighlightedLabelId())\r\n                        store.dispatch(updateActiveLabelId(LabelsSelector.getHighlightedLabelId()));\r\n                    else\r\n                        this.startRectCreation(data.mousePositionOnViewPortContent);\r\n                }\r\n            } else if (isMouseOverImage) {\r\n\r\n                this.startRectCreation(data.mousePositionOnViewPortContent);\r\n            }\r\n        }\r\n    };\r\n\r\n    public mouseUpHandler = (data: EditorData) => {\r\n        if (!!data.viewPortContentImageRect) {\r\n            const mousePositionSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const activeLabelRect: LabelRect = LabelsSelector.getActiveRectLabel();\r\n\r\n            if (!!this.startCreateRectPoint && !PointUtil.equals(this.startCreateRectPoint, mousePositionSnapped)) {\r\n\r\n                const minX: number = Math.min(this.startCreateRectPoint.x, mousePositionSnapped.x);\r\n                const minY: number = Math.min(this.startCreateRectPoint.y, mousePositionSnapped.y);\r\n                const maxX: number = Math.max(this.startCreateRectPoint.x, mousePositionSnapped.x);\r\n                const maxY: number = Math.max(this.startCreateRectPoint.y, mousePositionSnapped.y);\r\n\r\n                const rect = {x: minX, y: minY, width: maxX - minX, height: maxY - minY};\r\n                this.addRectLabel(RenderEngineUtil.transferRectFromImageToViewPortContent(rect, data));\r\n            }\r\n\r\n            if (!!this.startResizeRectAnchor && !!activeLabelRect) {\r\n                const rect: IRect = this.calculateRectRelativeToActiveImage(activeLabelRect.rect, data);\r\n                const startAnchorPosition: IPoint = PointUtil.add(this.startResizeRectAnchor.position,\r\n                    data.viewPortContentImageRect);\r\n                const delta: IPoint = PointUtil.subtract(mousePositionSnapped, startAnchorPosition);\r\n                const resizeRect: IRect = RectUtil.resizeRect(rect, this.startResizeRectAnchor.type, delta);\r\n                const scale: number = RenderEngineUtil.calculateImageScale(data);\r\n                const scaledRect: IRect = RectUtil.scaleRect(resizeRect, scale);\r\n\r\n                const imageData = LabelsSelector.getActiveImageData();\r\n                imageData.labelRects = imageData.labelRects.map((labelRect: LabelRect) => {\r\n                    if (labelRect.id === activeLabelRect.id) {\r\n                        return {\r\n                            ...labelRect,\r\n                            rect: scaledRect\r\n                        };\r\n                    }\r\n                    return labelRect;\r\n                });\r\n                store.dispatch(updateImageDataById(imageData.id, imageData));\r\n            }\r\n        }\r\n        this.endRectTransformation()\r\n    };\r\n\r\n    public mouseMoveHandler = (data: EditorData) => {\r\n        if (!!data.viewPortContentImageRect && !!data.mousePositionOnViewPortContent) {\r\n            const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n            if (isOverImage && !this.startResizeRectAnchor) {\r\n                const labelRect: LabelRect = this.getRectUnderMouse(data);\r\n                if (!!labelRect && !this.isInProgress()) {\r\n                    if (LabelsSelector.getHighlightedLabelId() !== labelRect.id) {\r\n                        store.dispatch(updateHighlightedLabelId(labelRect.id))\r\n                    }\r\n                } else {\r\n                    if (LabelsSelector.getHighlightedLabelId() !== null) {\r\n                        store.dispatch(updateHighlightedLabelId(null))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData) {\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n\r\n        if (imageData) {\r\n            imageData.labelRects.forEach((labelRect: LabelRect) => {\r\n                const displayAsActive: boolean =\r\n                    labelRect.status === LabelStatus.ACCEPTED && labelRect.id === activeLabelId;\r\n                displayAsActive ? this.drawActiveRect(labelRect, data) : this.drawInactiveRect(labelRect, data);\r\n            });\r\n            this.drawCurrentlyCreatedRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            this.updateCursorStyle(data);\r\n        }\r\n    }\r\n\r\n    private drawCurrentlyCreatedRect(mousePosition: IPoint, imageRect: IRect) {\r\n        if (!!this.startCreateRectPoint) {\r\n            const mousePositionSnapped: IPoint = RectUtil.snapPointToRect(mousePosition, imageRect);\r\n            const activeRect: IRect = {\r\n                x: this.startCreateRectPoint.x,\r\n                y: this.startCreateRectPoint.y,\r\n                width: mousePositionSnapped.x - this.startCreateRectPoint.x,\r\n                height: mousePositionSnapped.y - this.startCreateRectPoint.y\r\n            };\r\n            const activeRectBetweenPixels = RenderEngineUtil.setRectBetweenPixels(activeRect);\r\n            DrawUtil.drawRect(this.canvas, activeRectBetweenPixels, this.config.lineActiveColor, this.config.lineThickness);\r\n        }\r\n    }\r\n\r\n    private drawInactiveRect(labelRect: LabelRect, data: EditorData) {\r\n        const rectOnImage: IRect = RenderEngineUtil.transferRectFromViewPortContentToImage(labelRect.rect, data);\r\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\r\n        const displayAsActive: boolean = labelRect.status === LabelStatus.ACCEPTED && labelRect.id === highlightedLabelId;\r\n        this.renderRect(rectOnImage, displayAsActive);\r\n    }\r\n\r\n    private drawActiveRect(labelRect: LabelRect, data: EditorData) {\r\n        let rect: IRect = this.calculateRectRelativeToActiveImage(labelRect.rect, data);\r\n        if (!!this.startResizeRectAnchor) {\r\n            const startAnchorPosition: IPoint = PointUtil.add(this.startResizeRectAnchor.position, data.viewPortContentImageRect);\r\n            const endAnchorPositionSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const delta = PointUtil.subtract(endAnchorPositionSnapped, startAnchorPosition);\r\n            rect = RectUtil.resizeRect(rect, this.startResizeRectAnchor.type, delta);\r\n        }\r\n        const rectOnImage: IRect = RectUtil.translate(rect, data.viewPortContentImageRect);\r\n        this.renderRect(rectOnImage, true);\r\n    }\r\n\r\n    private renderRect(rectOnImage: IRect, isActive: boolean) {\r\n        const rectBetweenPixels = RenderEngineUtil.setRectBetweenPixels(rectOnImage);\r\n        const lineColor: string = isActive ? this.config.lineActiveColor : this.config.lineInactiveColor;\r\n        DrawUtil.drawRect(this.canvas, rectBetweenPixels, lineColor, this.config.lineThickness);\r\n        if (isActive) {\r\n            const handleCenters: IPoint[] = RectUtil.mapRectToAnchors(rectOnImage).map((rectAnchor: RectAnchor) => rectAnchor.position);\r\n            handleCenters.forEach((center: IPoint) => {\r\n                const handleRect: IRect = RectUtil.getRectWithCenterAndSize(center, this.config.anchorSize);\r\n                const handleRectBetweenPixels: IRect = RenderEngineUtil.setRectBetweenPixels(handleRect);\r\n                DrawUtil.drawRectWithFill(this.canvas, handleRectBetweenPixels, this.config.activeAnchorColor);\r\n            })\r\n        }\r\n    }\r\n\r\n    private updateCursorStyle(data: EditorData) {\r\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\r\n            const rectUnderMouse: LabelRect = this.getRectUnderMouse(data);\r\n            const rectAnchorUnderMouse: RectAnchor = this.getAnchorUnderMouse(data);\r\n            if ((!!rectAnchorUnderMouse && rectUnderMouse && rectUnderMouse.status === LabelStatus.ACCEPTED) || !!this.startResizeRectAnchor) {\r\n                store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                return;\r\n            }\r\n            else if (RenderEngineUtil.isMouseOverCanvas(data)) {\r\n                if (!RenderEngineUtil.isMouseOverImage(data) && !!this.startCreateRectPoint)\r\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                else\r\n                    RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\r\n                this.canvas.style.cursor = \"none\";\r\n            } else {\r\n                this.canvas.style.cursor = \"default\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // HELPERS\r\n    // =================================================================================================================\r\n\r\n    public isInProgress(): boolean {\r\n        return !!this.startCreateRectPoint || !!this.startResizeRectAnchor;\r\n    }\r\n\r\n    private calculateRectRelativeToActiveImage(rect: IRect, data: EditorData):IRect {\r\n        const scale: number = RenderEngineUtil.calculateImageScale(data);\r\n        return RectUtil.scaleRect(rect, 1/scale);\r\n    }\r\n\r\n    private addRectLabel = (rect: IRect) => {\r\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const labelRect: LabelRect = LabelUtil.createLabelRect(activeLabelId, rect);\r\n        imageData.labelRects.push(labelRect);\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateFirstLabelCreatedFlag(true));\r\n        store.dispatch(updateActiveLabelId(labelRect.id));\r\n    };\r\n\r\n    private getRectUnderMouse(data: EditorData): LabelRect {\r\n        const activeRectLabel: LabelRect = LabelsSelector.getActiveRectLabel();\r\n        if (!!activeRectLabel && this.isMouseOverRectEdges(activeRectLabel.rect, data)) {\r\n            return activeRectLabel;\r\n        }\r\n\r\n        const labelRects: LabelRect[] = LabelsSelector.getActiveImageData().labelRects;\r\n        for (let i = 0; i < labelRects.length; i++) {\r\n            if (this.isMouseOverRectEdges(labelRects[i].rect, data)) {\r\n                return labelRects[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private isMouseOverRectEdges(rect: IRect, data: EditorData): boolean {\r\n        const rectOnImage: IRect = RectUtil.translate(\r\n            this.calculateRectRelativeToActiveImage(rect, data), data.viewPortContentImageRect);\r\n\r\n        const outerRectDelta: IPoint = {\r\n            x: this.config.anchorHoverSize.width / 2,\r\n            y: this.config.anchorHoverSize.height / 2\r\n        };\r\n        const outerRect: IRect = RectUtil.expand(rectOnImage, outerRectDelta);\r\n\r\n        const innerRectDelta: IPoint = {\r\n            x: - this.config.anchorHoverSize.width / 2,\r\n            y: - this.config.anchorHoverSize.height / 2\r\n        };\r\n        const innerRect: IRect = RectUtil.expand(rectOnImage, innerRectDelta);\r\n\r\n        return (RectUtil.isPointInside(outerRect, data.mousePositionOnViewPortContent) &&\r\n            !RectUtil.isPointInside(innerRect, data.mousePositionOnViewPortContent));\r\n    }\r\n\r\n    private getAnchorUnderMouseByRect(rect: IRect, mousePosition: IPoint, imageRect: IRect): RectAnchor {\r\n        const rectAnchors: RectAnchor[] = RectUtil.mapRectToAnchors(rect);\r\n        for (let i = 0; i < rectAnchors.length; i++) {\r\n            const anchorRect: IRect = RectUtil.translate(RectUtil.getRectWithCenterAndSize(rectAnchors[i].position, this.config.anchorHoverSize), imageRect);\r\n            if (!!mousePosition && RectUtil.isPointInside(anchorRect, mousePosition)) {\r\n                return rectAnchors[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getAnchorUnderMouse(data: EditorData): RectAnchor {\r\n        const labelRects: LabelRect[] = LabelsSelector.getActiveImageData().labelRects;\r\n        for (let i = 0; i < labelRects.length; i++) {\r\n            const rect: IRect = this.calculateRectRelativeToActiveImage(labelRects[i].rect, data);\r\n            const rectAnchor = this.getAnchorUnderMouseByRect(rect, data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            if (!!rectAnchor) return rectAnchor;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private startRectCreation(mousePosition: IPoint) {\r\n        this.startCreateRectPoint = mousePosition;\r\n        store.dispatch(updateActiveLabelId(null));\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private startRectResize(activatedAnchor: RectAnchor) {\r\n        this.startResizeRectAnchor = activatedAnchor;\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private endRectTransformation() {\r\n        this.startCreateRectPoint = null;\r\n        this.startResizeRectAnchor = null;\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n}","import React from \"react\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\nimport {IRect} from \"../interfaces/IRect\";\r\nimport {ISize} from \"../interfaces/ISize\";\r\n\r\nexport class CanvasUtil {\r\n    public static getMousePositionOnCanvasFromEvent(event: React.MouseEvent<HTMLCanvasElement, MouseEvent> | MouseEvent, canvas: HTMLCanvasElement): IPoint {\r\n        if (!!canvas && !!event) {\r\n            const canvasRect: ClientRect | DOMRect = canvas.getBoundingClientRect();\r\n            return {\r\n                x: event.clientX - canvasRect.left,\r\n                y: event.clientY - canvasRect.top\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getClientRect(canvas: HTMLCanvasElement): IRect {\r\n        if (!!canvas) {\r\n            const canvasRect: ClientRect | DOMRect = canvas.getBoundingClientRect();\r\n            return {\r\n                x: canvasRect.left,\r\n                y: canvasRect.top,\r\n                width: canvasRect.width,\r\n                height: canvasRect.height\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static getSize(canvas: HTMLCanvasElement): ISize {\r\n        if (!!canvas) {\r\n            const canvasRect: ClientRect | DOMRect = canvas.getBoundingClientRect();\r\n            return {\r\n                width: canvasRect.width,\r\n                height: canvasRect.height\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}","import {IRect} from \"../../interfaces/IRect\";\r\nimport {RenderEngineConfig} from \"../../settings/RenderEngineConfig\";\r\nimport {IPoint} from \"../../interfaces/IPoint\";\r\nimport {CanvasUtil} from \"../../utils/CanvasUtil\";\r\nimport {store} from \"../../index\";\r\nimport {ImageData, LabelPoint} from \"../../store/labels/types\";\r\nimport uuidv4 from 'uuid/v4';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateHighlightedLabelId,\r\n    updateImageDataById\r\n} from \"../../store/labels/actionCreators\";\r\nimport {RectUtil} from \"../../utils/RectUtil\";\r\nimport {DrawUtil} from \"../../utils/DrawUtil\";\r\nimport {updateCustomCursorStyle} from \"../../store/general/actionCreators\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {EditorData} from \"../../data/EditorData\";\r\nimport {BaseRenderEngine} from \"./BaseRenderEngine\";\r\nimport {RenderEngineUtil} from \"../../utils/RenderEngineUtil\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\nimport {EditorActions} from \"../actions/EditorActions\";\r\nimport {EditorModel} from \"../../staticModels/EditorModel\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {LabelStatus} from \"../../data/enums/LabelStatus\";\r\nimport {Settings} from \"../../settings/Settings\";\r\n\r\nexport class PointRenderEngine extends BaseRenderEngine {\r\n    private config: RenderEngineConfig = new RenderEngineConfig();\r\n\r\n    // =================================================================================================================\r\n    // STATE\r\n    // =================================================================================================================\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n        this.labelType = LabelType.POINT;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public mouseDownHandler(data: EditorData): void {\r\n        const isMouseOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n\r\n        if (isMouseOverCanvas) {\r\n            const labelPoint: LabelPoint = this.getLabelPointUnderMouse(data.mousePositionOnViewPortContent, data);\r\n            if (!!labelPoint) {\r\n                const pointOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoint.point, data);\r\n                const pointBetweenPixels = RenderEngineUtil.setPointBetweenPixels(pointOnCanvas);\r\n                const handleRect: IRect = RectUtil.getRectWithCenterAndSize(pointBetweenPixels, this.config.anchorHoverSize);\r\n                if (RectUtil.isPointInside(handleRect, data.mousePositionOnViewPortContent)) {\r\n                    store.dispatch(updateActiveLabelId(labelPoint.id));\r\n                    EditorActions.setViewPortActionsDisabledStatus(true);\r\n                    return;\r\n                } else {\r\n                    store.dispatch(updateActiveLabelId(null));\r\n                    const pointOnImage: IPoint = RenderEngineUtil.transferPointFromViewPortContentToImage(data.mousePositionOnViewPortContent, data);\r\n                    this.addPointLabel(pointOnImage);\r\n                }\r\n            } else if (isMouseOverImage) {\r\n                const pointOnImage: IPoint = RenderEngineUtil.transferPointFromViewPortContentToImage(data.mousePositionOnViewPortContent, data);\r\n                this.addPointLabel(pointOnImage);\r\n            }\r\n        }\r\n    }\r\n\r\n    public mouseUpHandler(data: EditorData): void {\r\n        if (this.isInProgress()) {\r\n            const activeLabelPoint: LabelPoint = LabelsSelector.getActivePointLabel();\r\n            const pointSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const pointOnImage: IPoint = RenderEngineUtil.transferPointFromViewPortContentToImage(pointSnapped, data);\r\n            const imageData = LabelsSelector.getActiveImageData();\r\n\r\n            imageData.labelPoints = imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n                if (labelPoint.id === activeLabelPoint.id) {\r\n                    return {\r\n                        ...labelPoint,\r\n                        point: pointOnImage\r\n                    };\r\n                }\r\n                return labelPoint;\r\n            });\r\n            store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        }\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    public mouseMoveHandler(data: EditorData): void {\r\n        const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        if (isOverImage) {\r\n            const labelPoint: LabelPoint = this.getLabelPointUnderMouse(data.mousePositionOnViewPortContent, data);\r\n            if (!!labelPoint) {\r\n                if (LabelsSelector.getHighlightedLabelId() !== labelPoint.id) {\r\n                    store.dispatch(updateHighlightedLabelId(labelPoint.id))\r\n                }\r\n            } else {\r\n                if (LabelsSelector.getHighlightedLabelId() !== null) {\r\n                    store.dispatch(updateHighlightedLabelId(null))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData): void {\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        if (imageData) {\r\n            imageData.labelPoints.forEach((labelPoint: LabelPoint) => {\r\n                if (labelPoint.id === activeLabelId) {\r\n                    if (this.isInProgress()) {\r\n                        const pointSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n                        const pointBetweenPixels: IPoint = RenderEngineUtil.setPointBetweenPixels(pointSnapped);\r\n                        DrawUtil.drawCircleWithFill(this.canvas, pointBetweenPixels, Settings.RESIZE_HANDLE_DIMENSION_PX/2, this.config.activeAnchorColor)\r\n                    } else {\r\n                        this.renderPoint(labelPoint, true, data);\r\n                    }\r\n                } else {\r\n                    this.renderPoint(labelPoint, labelPoint.id === activeLabelId || labelPoint.id === highlightedLabelId, data);\r\n                }\r\n            });\r\n        }\r\n        this.updateCursorStyle(data);\r\n    }\r\n\r\n    private renderPoint(labelPoint: LabelPoint, isActive: boolean, data: EditorData) {\r\n        const pointOnImage: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoint.point, data);\r\n        const pointBetweenPixels = RenderEngineUtil.setPointBetweenPixels(pointOnImage);\r\n        const handleColor: string = isActive ? this.config.activeAnchorColor : this.config.inactiveAnchorColor;\r\n        DrawUtil.drawCircleWithFill(this.canvas, pointBetweenPixels, Settings.RESIZE_HANDLE_DIMENSION_PX/2, handleColor)\r\n    }\r\n\r\n    private updateCursorStyle(data: EditorData) {\r\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\r\n            const labelPoint: LabelPoint = this.getLabelPointUnderMouse(data.mousePositionOnViewPortContent, data);\r\n            if (!!labelPoint && labelPoint.status === LabelStatus.ACCEPTED) {\r\n                const pointOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoint.point, data);\r\n                const pointBetweenPixels = RenderEngineUtil.setPointBetweenPixels(pointOnCanvas);\r\n                const handleRect: IRect = RectUtil.getRectWithCenterAndSize(pointBetweenPixels, this.config.anchorHoverSize);\r\n                if (RectUtil.isPointInside(handleRect, data.mousePositionOnViewPortContent)) {\r\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                    return;\r\n                }\r\n            } else if (this.isInProgress()) {\r\n                store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                return;\r\n            }\r\n\r\n            if (RectUtil.isPointInside({x: 0, y: 0, ...CanvasUtil.getSize(this.canvas)}, data.mousePositionOnViewPortContent)) {\r\n                RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\r\n                this.canvas.style.cursor = \"none\";\r\n            } else {\r\n                this.canvas.style.cursor = \"default\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // HELPERS\r\n    // =================================================================================================================\r\n\r\n    public isInProgress(): boolean {\r\n        return EditorModel.viewPortActionsDisabled;\r\n    }\r\n\r\n    private getLabelPointUnderMouse(mousePosition: IPoint, data: EditorData): LabelPoint {\r\n        const labelPoints: LabelPoint[] = LabelsSelector.getActiveImageData().labelPoints;\r\n        for (let i = 0; i < labelPoints.length; i++) {\r\n            const pointOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoints[i].point, data);\r\n            const handleRect: IRect = RectUtil.getRectWithCenterAndSize(pointOnCanvas, this.config.anchorHoverSize);\r\n            if (RectUtil.isPointInside(handleRect, mousePosition)) {\r\n                return labelPoints[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private addPointLabel = (point: IPoint) => {\r\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const labelPoint: LabelPoint = {\r\n            id: uuidv4(),\r\n            labelId: activeLabelId,\r\n            point,\r\n            isCreatedByAI: false,\r\n            status: LabelStatus.ACCEPTED,\r\n            suggestedLabel: null\r\n        };\r\n        imageData.labelPoints.push(labelPoint);\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateFirstLabelCreatedFlag(true));\r\n        store.dispatch(updateActiveLabelId(labelPoint.id));\r\n    };\r\n}","import {store} from \"../../index\";\r\nimport {RectUtil} from \"../../utils/RectUtil\";\r\nimport {updateCustomCursorStyle} from \"../../store/general/actionCreators\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {EditorData} from \"../../data/EditorData\";\r\nimport {BaseRenderEngine} from \"./BaseRenderEngine\";\r\nimport {RenderEngineConfig} from \"../../settings/RenderEngineConfig\";\r\nimport {IPoint} from \"../../interfaces/IPoint\";\r\nimport {ILine} from \"../../interfaces/ILine\";\r\nimport {DrawUtil} from \"../../utils/DrawUtil\";\r\nimport {IRect} from \"../../interfaces/IRect\";\r\nimport {ImageData, LabelPolygon} from \"../../store/labels/types\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {\r\n    updateActiveLabelId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateHighlightedLabelId,\r\n    updateImageDataById\r\n} from \"../../store/labels/actionCreators\";\r\nimport {LineUtil} from \"../../utils/LineUtil\";\r\nimport {MouseEventUtil} from \"../../utils/MouseEventUtil\";\r\nimport {EventType} from \"../../data/enums/EventType\";\r\nimport {RenderEngineUtil} from \"../../utils/RenderEngineUtil\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\nimport {EditorActions} from \"../actions/EditorActions\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {Settings} from \"../../settings/Settings\";\r\nimport {LabelUtil} from \"../../utils/LabelUtil\";\r\n\r\nexport class PolygonRenderEngine extends BaseRenderEngine {\r\n    private config: RenderEngineConfig = new RenderEngineConfig();\r\n\r\n    // =================================================================================================================\r\n    // STATE\r\n    // =================================================================================================================\r\n\r\n    private activePath: IPoint[] = [];\r\n    private resizeAnchorIndex: number = null;\r\n    private suggestedAnchorPositionOnCanvas: IPoint = null;\r\n    private suggestedAnchorIndexInPolygon: number = null;\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n        this.labelType = LabelType.POLYGON;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public update(data: EditorData): void {\r\n        if (!!data.event) {\r\n            switch (MouseEventUtil.getEventType(data.event)) {\r\n                case EventType.MOUSE_MOVE:\r\n                    this.mouseMoveHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_UP:\r\n                    this.mouseUpHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_DOWN:\r\n                    this.mouseDownHandler(data);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public mouseDownHandler(data: EditorData): void {\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n        if (isMouseOverCanvas) {\r\n            if (this.isCreationInProgress()) {\r\n                const isMouseOverStartAnchor: boolean = RenderEngineUtil.isMouseOverAnchor(\r\n                    data.mousePositionOnViewPortContent, this.activePath[0], this.config.anchorSize);\r\n                if (isMouseOverStartAnchor) {\r\n                    this.addLabelAndFinishCreation(data);\r\n                } else  {\r\n                    this.updateActivelyCreatedLabel(data);\r\n                }\r\n            } else {\r\n                const polygonUnderMouse: LabelPolygon = this.getPolygonUnderMouse(data);\r\n                if (!!polygonUnderMouse) {\r\n                    const anchorIndex: number = polygonUnderMouse.vertices.reduce(\r\n                        (indexUnderMouse: number, anchor: IPoint, index: number) => {\r\n                        if (indexUnderMouse === null) {\r\n                            const anchorOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(anchor, data);\r\n                            if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, anchorOnCanvas)) {\r\n                                return index;\r\n                            }\r\n                        }\r\n                        return indexUnderMouse;\r\n                    }, null);\r\n\r\n                    if (anchorIndex !== null) {\r\n                        this.startExistingLabelResize(data, polygonUnderMouse.id, anchorIndex);\r\n                    } else {\r\n                        store.dispatch(updateActiveLabelId(polygonUnderMouse.id));\r\n                        const isMouseOverNewAnchor: boolean = this.isMouseOverAnchor(data.mousePositionOnViewPortContent, this.suggestedAnchorPositionOnCanvas);\r\n                        if (isMouseOverNewAnchor) {\r\n                            this.addSuggestedAnchorToPolygonLabel(data);\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.updateActivelyCreatedLabel(data);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public mouseUpHandler(data: EditorData): void {\r\n        if (this.isResizeInProgress())\r\n            this.endExistingLabelResize(data);\r\n    }\r\n\r\n    public mouseMoveHandler(data: EditorData): void {\r\n        if (!!data.viewPortContentImageRect && !!data.mousePositionOnViewPortContent) {\r\n            const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n            if (isOverImage && !this.isCreationInProgress()) {\r\n                const labelPolygon: LabelPolygon = this.getPolygonUnderMouse(data);\r\n                if (!!labelPolygon && !this.isResizeInProgress()) {\r\n                    if (LabelsSelector.getHighlightedLabelId() !== labelPolygon.id) {\r\n                        store.dispatch(updateHighlightedLabelId(labelPolygon.id))\r\n                    }\r\n                    const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygon.vertices, data);\r\n                    const linesOnCanvas: ILine[] = this.mapPointsToLines(pathOnCanvas.concat(pathOnCanvas[0]));\r\n\r\n                    for (let j = 0; j < linesOnCanvas.length; j++) {\r\n                        const mouseOverLine = RenderEngineUtil.isMouseOverLine(\r\n                            data.mousePositionOnViewPortContent,\r\n                            linesOnCanvas[j],\r\n                            this.config.anchorHoverSize.width / 2\r\n                        )\r\n                        if (mouseOverLine) {\r\n                            this.suggestedAnchorPositionOnCanvas = LineUtil.getCenter(linesOnCanvas[j]);\r\n                            this.suggestedAnchorIndexInPolygon = j + 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (LabelsSelector.getHighlightedLabelId() !== null) {\r\n                        store.dispatch(updateHighlightedLabelId(null));\r\n                        this.discardSuggestedPoint();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData): void {\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        if (imageData) {\r\n            this.drawExistingLabels(data);\r\n            this.drawActivelyCreatedLabel(data);\r\n            this.drawActivelyResizeLabel(data);\r\n            this.updateCursorStyle(data);\r\n            this.drawSuggestedAnchor(data);\r\n        }\r\n    }\r\n\r\n    private updateCursorStyle(data: EditorData) {\r\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\r\n            const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n            if (isMouseOverCanvas) {\r\n                if (this.isCreationInProgress()) {\r\n                    const isMouseOverStartAnchor: boolean = this.isMouseOverAnchor(data.mousePositionOnViewPortContent, this.activePath[0]);\r\n                    if (isMouseOverStartAnchor && this.activePath.length > 2)\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.CLOSE));\r\n                    else\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.DEFAULT));\r\n                } else {\r\n                    const anchorUnderMouse: IPoint = this.getAnchorUnderMouse(data);\r\n                    const isMouseOverNewAnchor: boolean = this.isMouseOverAnchor(data.mousePositionOnViewPortContent, this.suggestedAnchorPositionOnCanvas);\r\n                    if (!!isMouseOverNewAnchor) {\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.ADD));\r\n                    } else if (this.isResizeInProgress()) {\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                    } else if (!!anchorUnderMouse) {\r\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                    } else {\r\n                        RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\r\n                    }\r\n                }\r\n                this.canvas.style.cursor = \"none\";\r\n            } else {\r\n                this.canvas.style.cursor = \"default\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawActivelyCreatedLabel(data: EditorData) {\r\n        const standardizedPoints: IPoint[] = this.activePath.map((point: IPoint) => RenderEngineUtil.setPointBetweenPixels(point));\r\n        const path = standardizedPoints.concat(data.mousePositionOnViewPortContent);\r\n        const lines: ILine[] = this.mapPointsToLines(path);\r\n\r\n        DrawUtil.drawPolygonWithFill(this.canvas, path, DrawUtil.hexToRGB(this.config.lineActiveColor, 0.2));\r\n        lines.forEach((line: ILine) => {\r\n            DrawUtil.drawLine(this.canvas, line.start, line.end, this.config.lineActiveColor, this.config.lineThickness);\r\n        });\r\n        standardizedPoints.forEach((point: IPoint) => {\r\n            DrawUtil.drawCircleWithFill(this.canvas, point, Settings.RESIZE_HANDLE_DIMENSION_PX/2, this.config.activeAnchorColor);\r\n        })\r\n    }\r\n\r\n    private drawActivelyResizeLabel(data: EditorData) {\r\n        const activeLabelPolygon: LabelPolygon = LabelsSelector.getActivePolygonLabel();\r\n        if (!!activeLabelPolygon && this.isResizeInProgress()) {\r\n            const snappedMousePosition: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const polygonOnCanvas: IPoint[] = activeLabelPolygon.vertices.map((point: IPoint, index: number) => {\r\n                return index === this.resizeAnchorIndex ? snappedMousePosition : RenderEngineUtil.transferPointFromImageToViewPortContent(point, data);\r\n            });\r\n            this.drawPolygon(polygonOnCanvas, true);\r\n        }\r\n    }\r\n\r\n    private drawExistingLabels(data: EditorData) {\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        imageData.labelPolygons.forEach((labelPolygon: LabelPolygon) => {\r\n            const isActive: boolean = labelPolygon.id === activeLabelId || labelPolygon.id === highlightedLabelId;\r\n            const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygon.vertices, data);\r\n            if (!(labelPolygon.id === activeLabelId && this.isResizeInProgress())) {\r\n                this.drawPolygon(pathOnCanvas, isActive);\r\n            }\r\n        });\r\n    }\r\n\r\n    private drawPolygon(polygon: IPoint[], isActive: boolean) {\r\n        const color: string = isActive ? this.config.lineActiveColor : this.config.lineInactiveColor;\r\n        const standardizedPoints: IPoint[] = polygon.map((point: IPoint) => RenderEngineUtil.setPointBetweenPixels(point));\r\n        if (isActive) {\r\n            DrawUtil.drawPolygonWithFill(this.canvas, standardizedPoints, DrawUtil.hexToRGB(color, 0.2));\r\n        }\r\n        DrawUtil.drawPolygon(this.canvas, standardizedPoints, color, this.config.lineThickness);\r\n        if (isActive) {\r\n            standardizedPoints.forEach((point: IPoint) => {\r\n                DrawUtil.drawCircleWithFill(this.canvas, point, Settings.RESIZE_HANDLE_DIMENSION_PX/2, this.config.activeAnchorColor);\r\n            })\r\n        }\r\n    }\r\n\r\n    private drawSuggestedAnchor(data: EditorData) {\r\n        if (this.suggestedAnchorPositionOnCanvas) {\r\n            const suggestedAnchorRect: IRect = RectUtil\r\n                .getRectWithCenterAndSize(this.suggestedAnchorPositionOnCanvas, this.config.suggestedAnchorDetectionSize);\r\n            const isMouseOverSuggestedAnchor: boolean = RectUtil.isPointInside(suggestedAnchorRect, data.mousePositionOnViewPortContent);\r\n\r\n            if (isMouseOverSuggestedAnchor) {\r\n                DrawUtil.drawCircleWithFill(\r\n                    this.canvas, this.suggestedAnchorPositionOnCanvas, Settings.RESIZE_HANDLE_DIMENSION_PX/2, this.config.lineInactiveColor);\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // CREATION\r\n    // =================================================================================================================\r\n\r\n    private updateActivelyCreatedLabel(data: EditorData) {\r\n        if (this.isCreationInProgress()) {\r\n            const mousePositionSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            this.activePath.push(mousePositionSnapped);\r\n        } else {\r\n            const isMouseOverImage: boolean = RectUtil.isPointInside(data.viewPortContentImageRect, data.mousePositionOnViewPortContent);\r\n            if (isMouseOverImage) {\r\n                EditorActions.setViewPortActionsDisabledStatus(true);\r\n                this.activePath.push(data.mousePositionOnViewPortContent);\r\n                store.dispatch(updateActiveLabelId(null));\r\n            }\r\n        }\r\n    }\r\n\r\n    public cancelLabelCreation() {\r\n        this.activePath = [];\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    private finishLabelCreation() {\r\n        this.activePath = [];\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    public addLabelAndFinishCreation(data: EditorData) {\r\n        if (this.isCreationInProgress() && this.activePath.length > 2) {\r\n            const polygonOnImage: IPoint[] = RenderEngineUtil.transferPolygonFromViewPortContentToImage(this.activePath, data);\r\n            this.addPolygonLabel(polygonOnImage);\r\n            this.finishLabelCreation();\r\n        }\r\n    }\r\n\r\n    private addPolygonLabel(polygon: IPoint[]) {\r\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const labelPolygon: LabelPolygon = LabelUtil.createLabelPolygon(activeLabelId, polygon);\r\n        imageData.labelPolygons.push(labelPolygon);\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateFirstLabelCreatedFlag(true));\r\n        store.dispatch(updateActiveLabelId(labelPolygon.id));\r\n    };\r\n\r\n    // =================================================================================================================\r\n    // TRANSFER\r\n    // =================================================================================================================\r\n\r\n    private startExistingLabelResize(data: EditorData, labelId: string, anchorIndex: number) {\r\n        store.dispatch(updateActiveLabelId(labelId));\r\n        this.resizeAnchorIndex = anchorIndex;\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private endExistingLabelResize(data: EditorData) {\r\n        this.applyResizeToPolygonLabel(data);\r\n        this.resizeAnchorIndex = null;\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    private applyResizeToPolygonLabel(data: EditorData) {\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const activeLabel: LabelPolygon = LabelsSelector.getActivePolygonLabel();\r\n        imageData.labelPolygons = imageData.labelPolygons.map((polygon: LabelPolygon) => {\r\n            if (polygon.id !== activeLabel.id) {\r\n                return polygon\r\n            } else {\r\n                return {\r\n                    ...polygon,\r\n                    vertices: polygon.vertices.map((value: IPoint, index: number) => {\r\n                        if (index !== this.resizeAnchorIndex) {\r\n                            return value;\r\n                        } else {\r\n                            const snappedMousePosition: IPoint =\r\n                                RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n                            return RenderEngineUtil.transferPointFromViewPortContentToImage(snappedMousePosition, data);\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        });\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateActiveLabelId(activeLabel.id));\r\n    }\r\n\r\n    private discardSuggestedPoint(): void {\r\n        this.suggestedAnchorIndexInPolygon = null;\r\n        this.suggestedAnchorPositionOnCanvas = null;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // UPDATE\r\n    // =================================================================================================================\r\n\r\n    private addSuggestedAnchorToPolygonLabel(data: EditorData) {\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const activeLabel: LabelPolygon = LabelsSelector.getActivePolygonLabel();\r\n        const newAnchorPositionOnImage: IPoint =\r\n            RenderEngineUtil.transferPointFromViewPortContentToImage(this.suggestedAnchorPositionOnCanvas, data);\r\n        const insert = (arr, index, newItem) => [...arr.slice(0, index), newItem, ...arr.slice(index)];\r\n\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelPolygons: imageData.labelPolygons.map((polygon: LabelPolygon) => {\r\n                if (polygon.id !== activeLabel.id) {\r\n                    return polygon\r\n                } else {\r\n                    return {\r\n                        ...polygon,\r\n                        vertices: insert(polygon.vertices, this.suggestedAnchorIndexInPolygon, newAnchorPositionOnImage)\r\n                    }\r\n                }\r\n            })\r\n        };\r\n\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n        this.startExistingLabelResize(data, activeLabel.id, this.suggestedAnchorIndexInPolygon);\r\n        this.discardSuggestedPoint();\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // VALIDATORS\r\n    // =================================================================================================================\r\n\r\n    public isInProgress(): boolean {\r\n        return this.isCreationInProgress() || this.isResizeInProgress();\r\n    }\r\n\r\n    private isCreationInProgress(): boolean {\r\n        return this.activePath !== null && this.activePath.length !== 0;\r\n    }\r\n\r\n    private isResizeInProgress(): boolean {\r\n        return this.resizeAnchorIndex !== null;\r\n    }\r\n\r\n    private isMouseOverAnchor(mouse: IPoint, anchor: IPoint): boolean {\r\n        if (!mouse || !anchor) return null;\r\n        return RectUtil.isPointInside(RectUtil.getRectWithCenterAndSize(anchor, this.config.anchorSize), mouse);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // MAPPERS\r\n    // =================================================================================================================\r\n\r\n    private mapPointsToLines(points: IPoint[]): ILine[] {\r\n        const lines: ILine[] = [];\r\n        for (let i = 0; i < points.length - 1; i++) {\r\n            lines.push({start: points[i], end: points[i + 1]})\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // GETTERS\r\n    // =================================================================================================================\r\n\r\n    private getPolygonUnderMouse(data: EditorData): LabelPolygon {\r\n        const labelPolygons: LabelPolygon[] = LabelsSelector.getActiveImageData().labelPolygons;\r\n        for (let i = 0; i < labelPolygons.length; i++) {\r\n            const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygons[i].vertices, data);\r\n            const linesOnCanvas: ILine[] = this.mapPointsToLines(pathOnCanvas.concat(pathOnCanvas[0]));\r\n\r\n            for (let j = 0; j < linesOnCanvas.length; j++) {\r\n                const mouseOverLine = RenderEngineUtil.isMouseOverLine(\r\n                    data.mousePositionOnViewPortContent,\r\n                    linesOnCanvas[j],\r\n                    this.config.anchorHoverSize.width / 2\r\n                )\r\n                if (mouseOverLine)\r\n                    return labelPolygons[i];\r\n            }\r\n            for (let j = 0; j < pathOnCanvas.length; j ++) {\r\n                if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, pathOnCanvas[j]))\r\n                    return labelPolygons[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getAnchorUnderMouse(data: EditorData): IPoint {\r\n        const labelPolygons: LabelPolygon[] = LabelsSelector.getActiveImageData().labelPolygons;\r\n        for (let i = 0; i < labelPolygons.length; i++) {\r\n            const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygons[i].vertices, data);\r\n            for (let j = 0; j < pathOnCanvas.length; j ++) {\r\n                if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, pathOnCanvas[j]))\r\n                    return pathOnCanvas[j];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}","export class ViewPointSettings {\r\n    public static readonly CANVAS_MIN_MARGIN_PX: number = 20;\r\n    public static readonly MIN_ZOOM: number = 1;\r\n    public static readonly MAX_ZOOM: number = 4;\r\n    public static readonly ZOOM_STEP: number = 0.1;\r\n    public static readonly TRANSLATION_STEP_PX: number = 20;\r\n}","import {ISize} from \"../interfaces/ISize\";\r\n\r\nexport class ImageUtil {\r\n    public static getSize(image: HTMLImageElement): ISize {\r\n        if (!image) return null;\r\n        return {\r\n            width: image.width,\r\n            height: image.height\r\n        }\r\n    }\r\n}","import {ISize} from \"../interfaces/ISize\";\r\n\r\nexport class SizeUtil {\r\n    public static scale(size: ISize, scale: number): ISize {\r\n        return {\r\n            width: size.width * scale,\r\n            height: size.height * scale\r\n        }\r\n    }\r\n}","import {Direction} from \"../data/enums/Direction\";\r\nimport {IPoint} from \"../interfaces/IPoint\";\r\n\r\nexport class DirectionUtil {\r\n    public static convertDirectionToVector(direction: Direction): IPoint {\r\n        switch (direction) {\r\n            case Direction.RIGHT:\r\n                return {x: 1, y: 0};\r\n            case Direction.LEFT:\r\n                return {x: -1, y: 0};\r\n            case Direction.TOP:\r\n                return {x: 0, y: 1};\r\n            case Direction.BOTTOM:\r\n                return {x: 0, y: -1};\r\n            case Direction.TOP_RIGHT:\r\n                return {x: 1, y: 1};\r\n            case Direction.TOP_LEFT:\r\n                return {x: -1, y: 1};\r\n            case Direction.BOTTOM_RIGHT:\r\n                return {x: 1, y: -1};\r\n            case Direction.BOTTOM_LEFT:\r\n                return {x: -1, y: -1};\r\n            case Direction.CENTER:\r\n                return {x: 0, y: 0};\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}","import {EditorModel} from \"../../staticModels/EditorModel\";\r\nimport {NumberUtil} from \"../../utils/NumberUtil\";\r\nimport {ViewPointSettings} from \"../../settings/ViewPointSettings\";\r\nimport {ISize} from \"../../interfaces/ISize\";\r\nimport {IRect} from \"../../interfaces/IRect\";\r\nimport {ImageUtil} from \"../../utils/ImageUtil\";\r\nimport {RectUtil} from \"../../utils/RectUtil\";\r\nimport {IPoint} from \"../../interfaces/IPoint\";\r\nimport {PointUtil} from \"../../utils/PointUtil\";\r\nimport {SizeUtil} from \"../../utils/SizeUtil\";\r\nimport {EditorActions} from \"./EditorActions\";\r\nimport {Direction} from \"../../data/enums/Direction\";\r\nimport {DirectionUtil} from \"../../utils/DirectionUtil\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {store} from \"../../index\";\r\nimport {updateZoom} from \"../../store/general/actionCreators\";\r\n\r\nexport class ViewPortActions {\r\n    public static updateViewPortSize() {\r\n        if (!!EditorModel.editor) {\r\n            EditorModel.viewPortSize = {\r\n                width: EditorModel.editor.offsetWidth,\r\n                height: EditorModel.editor.offsetHeight\r\n            }\r\n        }\r\n    }\r\n\r\n    public static updateDefaultViewPortImageRect() {\r\n        if (!!EditorModel.viewPortSize && !!EditorModel.image) {\r\n            const minMargin: IPoint = {x: ViewPointSettings.CANVAS_MIN_MARGIN_PX, y: ViewPointSettings.CANVAS_MIN_MARGIN_PX};\r\n            const realImageRect: IRect = {x: 0, y: 0, ...ImageUtil.getSize(EditorModel.image)};\r\n            const viewPortWithMarginRect: IRect = {x: 0, y: 0, ...EditorModel.viewPortSize};\r\n            const viewPortWithoutMarginRect: IRect = RectUtil.expand(viewPortWithMarginRect, PointUtil.multiply(minMargin, -1));\r\n            EditorModel.defaultRenderImageRect = RectUtil.fitInsideRectWithRatio(viewPortWithoutMarginRect, RectUtil.getRatio(realImageRect));\r\n        }\r\n    }\r\n\r\n    public static calculateViewPortContentSize(): ISize {\r\n        if (!!EditorModel.viewPortSize && !!EditorModel.image) {\r\n            const defaultViewPortImageRect: IRect = EditorModel.defaultRenderImageRect;\r\n            const scaledImageSize: ISize = SizeUtil.scale(EditorModel.defaultRenderImageRect, GeneralSelector.getZoom());\r\n            return {\r\n                width: scaledImageSize.width + 2 * defaultViewPortImageRect.x,\r\n                height: scaledImageSize.height + 2 * defaultViewPortImageRect.y\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static calculateViewPortContentImageRect(): IRect {\r\n        if (!!EditorModel.viewPortSize && !!EditorModel.image) {\r\n            const defaultViewPortImageRect: IRect = EditorModel.defaultRenderImageRect;\r\n            const viewPortContentSize: ISize = ViewPortActions.calculateViewPortContentSize();\r\n            return {\r\n                ...defaultViewPortImageRect,\r\n                width: viewPortContentSize.width - 2 * defaultViewPortImageRect.x,\r\n                height: viewPortContentSize.height - 2 * defaultViewPortImageRect.y\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static resizeCanvas(newCanvasSize: ISize) {\r\n        if (!!newCanvasSize && !!EditorModel.canvas) {\r\n            EditorModel.canvas.width = newCanvasSize.width;\r\n            EditorModel.canvas.height = newCanvasSize.height;\r\n        }\r\n    };\r\n\r\n    public static resizeViewPortContent() {\r\n        const viewPortContentSize = ViewPortActions.calculateViewPortContentSize();\r\n        viewPortContentSize && ViewPortActions.resizeCanvas(viewPortContentSize);\r\n    }\r\n\r\n    public static calculateAbsoluteScrollPosition(relativePosition: IPoint): IPoint {\r\n        const viewPortContentSize = ViewPortActions.calculateViewPortContentSize();\r\n        const viewPortSize = EditorModel.viewPortSize;\r\n        return {\r\n            x: relativePosition.x * (viewPortContentSize.width - viewPortSize.width),\r\n            y: relativePosition.y * (viewPortContentSize.height - viewPortSize.height)\r\n        };\r\n    }\r\n\r\n    public static getRelativeScrollPosition(): IPoint {\r\n        if (!!EditorModel.viewPortScrollbars) {\r\n            const values = EditorModel.viewPortScrollbars.getValues();\r\n            return {\r\n                x: values.left,\r\n                y: values.top\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static getAbsoluteScrollPosition(): IPoint {\r\n        if (!!EditorModel.viewPortScrollbars) {\r\n            const values = EditorModel.viewPortScrollbars.getValues();\r\n            return {\r\n                x: values.scrollLeft,\r\n                y: values.scrollTop\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public static setScrollPosition(position: IPoint) {\r\n        EditorModel.viewPortScrollbars.scrollLeft(position.x);\r\n        EditorModel.viewPortScrollbars.scrollTop(position.y);\r\n    }\r\n\r\n    public static translateViewPortPosition(direction: Direction) {\r\n        if (EditorModel.viewPortActionsDisabled || GeneralSelector.getZoom() === ViewPointSettings.MIN_ZOOM) return;\r\n\r\n        const directionVector: IPoint = DirectionUtil.convertDirectionToVector(direction);\r\n        const translationVector: IPoint = PointUtil.multiply(directionVector, ViewPointSettings.TRANSLATION_STEP_PX);\r\n        const currentScrollPosition = ViewPortActions.getAbsoluteScrollPosition();\r\n        const nextScrollPosition = PointUtil.add(currentScrollPosition, translationVector);\r\n        ViewPortActions.setScrollPosition(nextScrollPosition);\r\n        EditorModel.mousePositionOnViewPortContent = PointUtil.add(EditorModel.mousePositionOnViewPortContent, translationVector);\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static zoomIn() {\r\n        if (EditorModel.viewPortActionsDisabled) return;\r\n\r\n        const currentZoom: number = GeneralSelector.getZoom();\r\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\r\n        const nextRelativeScrollPosition = currentZoom === 1 ? {x: 0.5, y: 0.5} : currentRelativeScrollPosition;\r\n        ViewPortActions.setZoom(currentZoom + ViewPointSettings.ZOOM_STEP);\r\n        ViewPortActions.resizeViewPortContent();\r\n        ViewPortActions.setScrollPosition(ViewPortActions.calculateAbsoluteScrollPosition(nextRelativeScrollPosition));\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static zoomOut() {\r\n        if (EditorModel.viewPortActionsDisabled) return;\r\n\r\n        const currentZoom: number = GeneralSelector.getZoom();\r\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\r\n        ViewPortActions.setZoom(currentZoom - ViewPointSettings.ZOOM_STEP);\r\n        ViewPortActions.resizeViewPortContent();\r\n        ViewPortActions.setScrollPosition(ViewPortActions.calculateAbsoluteScrollPosition(currentRelativeScrollPosition));\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static setDefaultZoom() {\r\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\r\n        ViewPortActions.setZoom(ViewPointSettings.MIN_ZOOM);\r\n        ViewPortActions.resizeViewPortContent();\r\n        ViewPortActions.setScrollPosition(ViewPortActions.calculateAbsoluteScrollPosition(currentRelativeScrollPosition));\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static setOneForOneZoom() {\r\n        const currentZoom: number = GeneralSelector.getZoom();\r\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\r\n        const nextRelativeScrollPosition = currentZoom === 1 ? {x: 0.5, y: 0.5} : currentRelativeScrollPosition;\r\n        const nextZoom: number = EditorModel.image.width / EditorModel.defaultRenderImageRect.width\r\n        ViewPortActions.setZoom(nextZoom);\r\n        ViewPortActions.resizeViewPortContent();\r\n        ViewPortActions.setScrollPosition(ViewPortActions.calculateAbsoluteScrollPosition(nextRelativeScrollPosition));\r\n        EditorActions.fullRender();\r\n    }\r\n\r\n    public static setZoom(value: number) {\r\n        const currentZoom: number = GeneralSelector.getZoom();\r\n        const isNewValueValid: boolean = NumberUtil.isValueInRange(\r\n            value, ViewPointSettings.MIN_ZOOM, ViewPointSettings.MAX_ZOOM);\r\n\r\n        if (isNewValueValid && value !== currentZoom) {\r\n            store.dispatch(updateZoom(value));\r\n        }\r\n    }\r\n}","export enum ProjectType {\r\n    IMAGE_RECOGNITION = \"IMAGE_RECOGNITION\",\r\n    OBJECT_DETECTION = \"OBJECT_DETECTION\"\r\n}","import {IRect} from \"../../interfaces/IRect\";\r\nimport {BaseRenderEngine} from \"./BaseRenderEngine\";\r\nimport {EditorData} from \"../../data/EditorData\";\r\nimport {EditorModel} from \"../../staticModels/EditorModel\";\r\nimport {ViewPortActions} from \"../actions/ViewPortActions\";\r\nimport {DrawUtil} from \"../../utils/DrawUtil\";\r\nimport {RenderEngineUtil} from \"../../utils/RenderEngineUtil\";\r\nimport {RenderEngineConfig} from \"../../settings/RenderEngineConfig\";\r\nimport {IPoint} from \"../../interfaces/IPoint\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {ProjectType} from \"../../data/enums/ProjectType\";\r\nimport {PopupWindowType} from \"../../data/enums/PopupWindowType\";\r\n\r\nexport class PrimaryEditorRenderEngine extends BaseRenderEngine {\r\n    private config: RenderEngineConfig = new RenderEngineConfig();\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public mouseMoveHandler(data: EditorData): void {}\r\n    public mouseDownHandler(data: EditorData): void {}\r\n    public mouseUpHandler(data: EditorData): void {}\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData): void {\r\n        this.drawImage(EditorModel.image, ViewPortActions.calculateViewPortContentImageRect());\r\n        this.renderCrossHair(data);\r\n    }\r\n\r\n    public renderCrossHair(data: EditorData): void {\r\n        if (!this.shouldRenderCrossHair(data)) return;\r\n\r\n        const mouse = RenderEngineUtil.setPointBetweenPixels(data.mousePositionOnViewPortContent);\r\n        const drawLine = (startPoint: IPoint, endPoint: IPoint) => {\r\n            DrawUtil.drawLine(this.canvas, startPoint, endPoint, this.config.crossHairLineColor, 2)\r\n        }\r\n        drawLine(\r\n            {x: mouse.x, y: 0},\r\n            {x: mouse.x - 1, y: mouse.y - this.config.crossHairPadding}\r\n        )\r\n        drawLine(\r\n            {x: mouse.x, y: mouse.y + this.config.crossHairPadding},\r\n            {x: mouse.x - 1, y: data.viewPortContentSize.height}\r\n        )\r\n        drawLine(\r\n            {x: 0, y: mouse.y},\r\n            {x: mouse.x - this.config.crossHairPadding, y: mouse.y - 1}\r\n        )\r\n        drawLine(\r\n            {x: mouse.x + this.config.crossHairPadding, y: mouse.y},\r\n            {x: data.viewPortContentSize.width, y: mouse.y - 1}\r\n        )\r\n    }\r\n\r\n    public shouldRenderCrossHair(data: EditorData): boolean {\r\n        const isCrossHairVisible = GeneralSelector.getCrossHairVisibleStatus();\r\n        const isImageInDragMode = GeneralSelector.getImageDragModeStatus();\r\n        const projectType: ProjectType = GeneralSelector.getProjectType();\r\n        const activePopupType: PopupWindowType = GeneralSelector.getActivePopupType();\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n        const isCustomCursorBlocked =  GeneralSelector.getPreventCustomCursorStatus();\r\n\r\n        return [\r\n            !!this.canvas,\r\n            isCrossHairVisible,\r\n            !isImageInDragMode,\r\n            projectType !== ProjectType.IMAGE_RECOGNITION,\r\n            !activePopupType,\r\n            isMouseOverCanvas,\r\n            !isCustomCursorBlocked\r\n        ].every(Boolean)\r\n    }\r\n\r\n    public drawImage(image: HTMLImageElement, imageRect: IRect) {\r\n        if (!!image && !!this.canvas) {\r\n            const ctx = this.canvas.getContext(\"2d\");\r\n            ctx.drawImage(image, imageRect.x, imageRect.y, imageRect.width, imageRect.height);\r\n        }\r\n    }\r\n\r\n    isInProgress(): boolean {\r\n        return false;\r\n    }\r\n}","import {EditorData} from \"../../data/EditorData\";\r\nimport {MouseEventUtil} from \"../../utils/MouseEventUtil\";\r\nimport {EventType} from \"../../data/enums/EventType\";\r\nimport {store} from \"../../index\";\r\nimport {updateCustomCursorStyle} from \"../../store/general/actionCreators\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {EditorModel} from \"../../staticModels/EditorModel\";\r\nimport {IPoint} from \"../../interfaces/IPoint\";\r\nimport {PointUtil} from \"../../utils/PointUtil\";\r\nimport {ViewPortActions} from \"../actions/ViewPortActions\";\r\n\r\nexport class ViewPortHelper {\r\n    private startScrollPosition: IPoint;\r\n    private mouseStartPosition: IPoint;\r\n\r\n    public update(data: EditorData): void {\r\n        if (!!data.event) {\r\n            switch (MouseEventUtil.getEventType(data.event)) {\r\n                case EventType.MOUSE_MOVE:\r\n                    this.mouseMoveHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_UP:\r\n                    this.mouseUpHandler(data);\r\n                    break;\r\n                case EventType.MOUSE_DOWN:\r\n                    this.mouseDownHandler(data);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private mouseDownHandler(data: EditorData) {\r\n        const event = data.event as MouseEvent;\r\n        this.startScrollPosition = data.absoluteViewPortContentScrollPosition;\r\n        this.mouseStartPosition = {x: event.screenX, y: event.screenY};\r\n\r\n        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRABBING));\r\n        EditorModel.canvas.style.cursor = \"none\";\r\n    }\r\n\r\n    private mouseUpHandler(data: EditorData) {\r\n        this.startScrollPosition = null;\r\n        this.mouseStartPosition = null;\r\n        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRAB));\r\n        EditorModel.canvas.style.cursor = \"none\";\r\n    }\r\n\r\n    private mouseMoveHandler(data: EditorData) {\r\n        if (!!this.startScrollPosition && !!this.mouseStartPosition) {\r\n            const event = data.event as MouseEvent;\r\n            const currentMousePosition: IPoint = {x: event.screenX, y: event.screenY};\r\n            const mousePositionDelta: IPoint = PointUtil.subtract(currentMousePosition, this.mouseStartPosition);\r\n            const nextScrollPosition = PointUtil.subtract(this.startScrollPosition, mousePositionDelta);\r\n            ViewPortActions.setScrollPosition(nextScrollPosition);\r\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRABBING));\r\n        } else {\r\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRAB));\r\n        }\r\n        EditorModel.canvas.style.cursor = \"none\";\r\n    }\r\n}","export enum LineAnchorType {\r\n    START = \"START\",\r\n    END = \"END\"\r\n}","import {BaseRenderEngine} from \"./BaseRenderEngine\";\r\nimport {RenderEngineConfig} from \"../../settings/RenderEngineConfig\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\nimport {EditorData} from \"../../data/EditorData\";\r\nimport {RenderEngineUtil} from \"../../utils/RenderEngineUtil\";\r\nimport {ImageData, LabelLine} from \"../../store/labels/types\";\r\nimport {IPoint} from \"../../interfaces/IPoint\";\r\nimport {RectUtil} from \"../../utils/RectUtil\";\r\nimport {store} from \"../../index\";\r\nimport {\r\n    updateActiveLabelId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateHighlightedLabelId,\r\n    updateImageDataById\r\n} from \"../../store/labels/actionCreators\";\r\nimport {EditorActions} from \"../actions/EditorActions\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {DrawUtil} from \"../../utils/DrawUtil\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport uuidv4 from \"uuid/v4\";\r\nimport {ILine} from \"../../interfaces/ILine\";\r\nimport {LineUtil} from \"../../utils/LineUtil\";\r\nimport {updateCustomCursorStyle} from \"../../store/general/actionCreators\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {LineAnchorType} from \"../../data/enums/LineAnchorType\";\r\nimport {Settings} from \"../../settings/Settings\";\r\n\r\nexport class LineRenderEngine extends BaseRenderEngine {\r\n    private config: RenderEngineConfig = new RenderEngineConfig();\r\n\r\n    // =================================================================================================================\r\n    // STATE\r\n    // =================================================================================================================\r\n\r\n    private lineCreationStartPoint: IPoint;\r\n    private lineUpdateAnchorType: LineAnchorType;\r\n\r\n    public constructor(canvas: HTMLCanvasElement) {\r\n        super(canvas);\r\n        this.labelType = LabelType.LINE;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    public mouseDownHandler(data: EditorData): void {\r\n        const isMouseOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n        const anchorTypeUnderMouse = this.getAnchorTypeUnderMouse(data);\r\n        const labelLineUnderMouse: LabelLine = this.getLineUnderMouse(data);\r\n\r\n        if (isMouseOverCanvas) {\r\n            if (!!anchorTypeUnderMouse && !this.isResizeInProgress()) {\r\n                const labelLine: LabelLine = this.getLineUnderMouse(data);\r\n                this.startExistingLabelUpdate(labelLine.id, anchorTypeUnderMouse)\r\n            } else if (!!labelLineUnderMouse) {\r\n                store.dispatch(updateActiveLabelId(labelLineUnderMouse.id));\r\n            } else if (!this.isInProgress() && isMouseOverImage) {\r\n                this.startNewLabelCreation(data)\r\n            } else {\r\n                this.finishNewLabelCreation(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public mouseUpHandler(data: EditorData): void {\r\n        if (this.isResizeInProgress()) {\r\n            this.endExistingLabelUpdate(data)\r\n        }\r\n    }\r\n\r\n    public mouseMoveHandler(data: EditorData): void {\r\n        const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\r\n        if (isOverImage) {\r\n            const labelLine: LabelLine = this.getLineUnderMouse(data);\r\n            if (!!labelLine) {\r\n                if (LabelsSelector.getHighlightedLabelId() !== labelLine.id) {\r\n                    store.dispatch(updateHighlightedLabelId(labelLine.id))\r\n                }\r\n            } else {\r\n                if (LabelsSelector.getHighlightedLabelId() !== null) {\r\n                    store.dispatch(updateHighlightedLabelId(null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // RENDERING\r\n    // =================================================================================================================\r\n\r\n    public render(data: EditorData): void {\r\n        this.drawExistingLabels(data);\r\n        this.drawActivelyCreatedLabel(data)\r\n        this.drawActivelyResizeLabel(data)\r\n        this.updateCursorStyle(data);\r\n    }\r\n\r\n    private drawExistingLabels(data: EditorData) {\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        imageData.labelLines.forEach((labelLine: LabelLine) => {\r\n            const isActive: boolean = labelLine.id === activeLabelId || labelLine.id === highlightedLabelId;\r\n            const lineOnCanvas = RenderEngineUtil.transferLineFromImageToViewPortContent(labelLine.line, data)\r\n            if (!(labelLine.id === activeLabelId && this.isResizeInProgress())) {\r\n                this.drawLine(lineOnCanvas, isActive)\r\n            }\r\n        });\r\n    }\r\n\r\n    private drawActivelyCreatedLabel(data: EditorData) {\r\n        if (this.isInProgress()) {\r\n            const line = {start: this.lineCreationStartPoint, end: data.mousePositionOnViewPortContent}\r\n            DrawUtil.drawLine(this.canvas, line.start, line.end, this.config.lineActiveColor, this.config.lineThickness);\r\n            DrawUtil.drawCircleWithFill(this.canvas, this.lineCreationStartPoint, Settings.RESIZE_HANDLE_DIMENSION_PX/2, this.config.activeAnchorColor)\r\n        }\r\n    }\r\n\r\n    private drawActivelyResizeLabel(data: EditorData) {\r\n        const activeLabelLine: LabelLine = LabelsSelector.getActiveLineLabel();\r\n        if (!!activeLabelLine && this.isResizeInProgress()) {\r\n            const snappedMousePosition: IPoint =\r\n                RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n            const lineOnCanvas = RenderEngineUtil.transferLineFromImageToViewPortContent(activeLabelLine.line, data)\r\n            const lineToDraw = {\r\n                start: this.lineUpdateAnchorType === LineAnchorType.START ? snappedMousePosition : lineOnCanvas.start,\r\n                end: this.lineUpdateAnchorType === LineAnchorType.END ? snappedMousePosition : lineOnCanvas.end\r\n            }\r\n            this.drawLine(lineToDraw, true)\r\n        }\r\n    }\r\n\r\n    private updateCursorStyle(data: EditorData) {\r\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\r\n            const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\r\n            if (isMouseOverCanvas) {\r\n                const anchorTypeUnderMouse = this.getAnchorTypeUnderMouse(data);\r\n                if (!this.isInProgress() && !!anchorTypeUnderMouse) {\r\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                } else if (this.isResizeInProgress()) {\r\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\r\n                } else {\r\n                    RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\r\n                }\r\n                this.canvas.style.cursor = \"none\";\r\n            } else {\r\n                this.canvas.style.cursor = \"default\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawLine(line: ILine, isActive: boolean) {\r\n        const color: string = isActive ? this.config.lineActiveColor : this.config.lineInactiveColor;\r\n        const standardizedLine: ILine = {\r\n            start: RenderEngineUtil.setPointBetweenPixels(line.start),\r\n            end: RenderEngineUtil.setPointBetweenPixels(line.end)\r\n        }\r\n        DrawUtil.drawLine(this.canvas, standardizedLine.start, standardizedLine.end, color, this.config.lineThickness);\r\n        if (isActive) {\r\n            LineUtil\r\n                .getPoints(line)\r\n                .map((point: IPoint) => DrawUtil.drawCircleWithFill(\r\n                    this.canvas, point, Settings.RESIZE_HANDLE_DIMENSION_PX/2, this.config.activeAnchorColor))\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // VALIDATORS\r\n    // =================================================================================================================\r\n\r\n    public isInProgress(): boolean {\r\n        return !!this.lineCreationStartPoint\r\n    }\r\n\r\n    public isResizeInProgress(): boolean {\r\n        return !!this.lineUpdateAnchorType;\r\n    }\r\n\r\n    private isMouseOverAnchor(mouse: IPoint, anchor: IPoint): boolean {\r\n        if (!mouse || !anchor) return null;\r\n        return RectUtil.isPointInside(RectUtil.getRectWithCenterAndSize(anchor, this.config.anchorSize), mouse);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // CREATION\r\n    // =================================================================================================================\r\n\r\n    private startNewLabelCreation = (data: EditorData) => {\r\n        this.lineCreationStartPoint = RenderEngineUtil.setPointBetweenPixels(data.mousePositionOnViewPortContent)\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private finishNewLabelCreation = (data: EditorData) => {\r\n        const mousePositionOnCanvasSnapped: IPoint = RectUtil.snapPointToRect(\r\n            data.mousePositionOnViewPortContent, data.viewPortContentImageRect\r\n        );\r\n        const lineOnCanvas = {start: this.lineCreationStartPoint, end: mousePositionOnCanvasSnapped}\r\n        const lineOnImage = RenderEngineUtil.transferLineFromViewPortContentToImage(lineOnCanvas, data);\r\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const labelLine: LabelLine = {\r\n            id: uuidv4(),\r\n            labelId: activeLabelId,\r\n            line: lineOnImage\r\n        };\r\n        imageData.labelLines.push(labelLine);\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateFirstLabelCreatedFlag(true));\r\n        store.dispatch(updateActiveLabelId(labelLine.id));\r\n        this.lineCreationStartPoint = null\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    };\r\n\r\n    public cancelLabelCreation() {\r\n        this.lineCreationStartPoint = null\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // UPDATE\r\n    // =================================================================================================================\r\n\r\n    private startExistingLabelUpdate(labelId: string, anchorType: LineAnchorType) {\r\n        store.dispatch(updateActiveLabelId(labelId));\r\n        this.lineUpdateAnchorType = anchorType;\r\n        EditorActions.setViewPortActionsDisabledStatus(true);\r\n    }\r\n\r\n    private endExistingLabelUpdate(data: EditorData) {\r\n        this.applyUpdateToLineLabel(data);\r\n        this.lineUpdateAnchorType = null;\r\n        EditorActions.setViewPortActionsDisabledStatus(false);\r\n    }\r\n\r\n    private applyUpdateToLineLabel(data: EditorData) {\r\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const activeLabel: LabelLine = LabelsSelector.getActiveLineLabel();\r\n        imageData.labelLines = imageData.labelLines.map((lineLabel: LabelLine) => {\r\n            if (lineLabel.id !== activeLabel.id) {\r\n                return lineLabel\r\n            } else {\r\n                const snappedMousePosition: IPoint =\r\n                    RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\r\n                const mousePositionOnImage = RenderEngineUtil.transferPointFromViewPortContentToImage(\r\n                    snappedMousePosition, data\r\n                );\r\n                return {\r\n                    ...lineLabel,\r\n                    line: {\r\n                        start: this.lineUpdateAnchorType === LineAnchorType.START ? mousePositionOnImage : lineLabel.line.start,\r\n                        end: this.lineUpdateAnchorType === LineAnchorType.END ? mousePositionOnImage : lineLabel.line.end\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        store.dispatch(updateImageDataById(imageData.id, imageData));\r\n        store.dispatch(updateActiveLabelId(activeLabel.id));\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // GETTERS\r\n    // =================================================================================================================\r\n\r\n    private getLineUnderMouse(data: EditorData): LabelLine {\r\n        const labelLines: LabelLine[] = LabelsSelector.getActiveImageData().labelLines;\r\n        for (let i = 0; i < labelLines.length; i++) {\r\n            const lineOnCanvas: ILine = RenderEngineUtil.transferLineFromImageToViewPortContent(labelLines[i].line, data);\r\n            const mouseOverLine = RenderEngineUtil.isMouseOverLine(\r\n                data.mousePositionOnViewPortContent,\r\n                lineOnCanvas,\r\n                this.config.anchorHoverSize.width / 2\r\n            )\r\n            if (mouseOverLine) return labelLines[i]\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getAnchorTypeUnderMouse(data: EditorData): LineAnchorType {\r\n        const labelLines: LabelLine[] = LabelsSelector.getActiveImageData().labelLines;\r\n        for (let i = 0; i < labelLines.length; i++) {\r\n            const lineOnCanvas: ILine = RenderEngineUtil.transferLineFromImageToViewPortContent(labelLines[i].line, data);\r\n            if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, lineOnCanvas.start)) {\r\n                return LineAnchorType.START\r\n            }\r\n            if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, lineOnCanvas.end)) {\r\n                return LineAnchorType.END\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}","import {LabelType} from \"../../data/enums/LabelType\";\r\nimport {EditorModel} from \"../../staticModels/EditorModel\";\r\nimport {RectRenderEngine} from \"../render/RectRenderEngine\";\r\nimport {PointRenderEngine} from \"../render/PointRenderEngine\";\r\nimport {PolygonRenderEngine} from \"../render/PolygonRenderEngine\";\r\nimport {IRect} from \"../../interfaces/IRect\";\r\nimport {RectUtil} from \"../../utils/RectUtil\";\r\nimport {EditorData} from \"../../data/EditorData\";\r\nimport {CanvasUtil} from \"../../utils/CanvasUtil\";\r\nimport React from \"react\";\r\nimport {IPoint} from \"../../interfaces/IPoint\";\r\nimport {DrawUtil} from \"../../utils/DrawUtil\";\r\nimport {PrimaryEditorRenderEngine} from \"../render/PrimaryEditorRenderEngine\";\r\nimport {ContextManager} from \"../context/ContextManager\";\r\nimport {PointUtil} from \"../../utils/PointUtil\";\r\nimport {ViewPortActions} from \"./ViewPortActions\";\r\nimport {ISize} from \"../../interfaces/ISize\";\r\nimport {ImageUtil} from \"../../utils/ImageUtil\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {ViewPortHelper} from \"../helpers/ViewPortHelper\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {LineRenderEngine} from \"../render/LineRenderEngine\";\r\n\r\nexport class EditorActions {\r\n\r\n    // =================================================================================================================\r\n    // RENDER ENGINES\r\n    // =================================================================================================================\r\n\r\n    public static mountSupportRenderingEngine(activeLabelType: LabelType) {\r\n        switch (activeLabelType) {\r\n            case LabelType.RECT:\r\n                EditorModel.supportRenderingEngine = new RectRenderEngine(EditorModel.canvas);\r\n                break;\r\n            case LabelType.POINT:\r\n                EditorModel.supportRenderingEngine = new PointRenderEngine(EditorModel.canvas);\r\n                break;\r\n            case LabelType.LINE:\r\n                EditorModel.supportRenderingEngine = new LineRenderEngine(EditorModel.canvas);\r\n                break;\r\n            case LabelType.POLYGON:\r\n                EditorModel.supportRenderingEngine = new PolygonRenderEngine(EditorModel.canvas);\r\n                break;\r\n            default:\r\n                EditorModel.supportRenderingEngine = null;\r\n                break;\r\n        }\r\n    };\r\n\r\n    public static swapSupportRenderingEngine(activeLabelType: LabelType) {\r\n        EditorActions.mountSupportRenderingEngine(activeLabelType);\r\n    };\r\n\r\n    public static mountRenderEnginesAndHelpers(activeLabelType: LabelType) {\r\n        EditorModel.viewPortHelper = new ViewPortHelper();\r\n        EditorModel.primaryRenderingEngine = new PrimaryEditorRenderEngine(EditorModel.canvas);\r\n        EditorActions.mountSupportRenderingEngine(activeLabelType);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // RENDER\r\n    // =================================================================================================================\r\n\r\n    public static fullRender() {\r\n        DrawUtil.clearCanvas(EditorModel.canvas);\r\n        EditorModel.primaryRenderingEngine.render(EditorActions.getEditorData());\r\n        EditorModel.supportRenderingEngine && EditorModel.supportRenderingEngine.render(EditorActions.getEditorData());\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // SETTERS\r\n    // =================================================================================================================\r\n\r\n    public static setLoadingStatus(status: boolean) {\r\n        EditorModel.isLoading = status;\r\n    }\r\n    public static setActiveImage(image: HTMLImageElement) {\r\n        EditorModel.image = image;\r\n    }\r\n\r\n    public static setViewPortActionsDisabledStatus(status: boolean) {\r\n        EditorModel.viewPortActionsDisabled = status;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // GETTERS\r\n    // =================================================================================================================\r\n\r\n    public static getEditorData(event?: Event): EditorData {\r\n        return {\r\n            mousePositionOnViewPortContent: EditorModel.mousePositionOnViewPortContent,\r\n            viewPortContentSize: CanvasUtil.getSize(EditorModel.canvas),\r\n            activeKeyCombo: ContextManager.getActiveCombo(),\r\n            event: event,\r\n            zoom: GeneralSelector.getZoom(),\r\n            viewPortSize: EditorModel.viewPortSize,\r\n            defaultRenderImageRect: EditorModel.defaultRenderImageRect,\r\n            viewPortContentImageRect: ViewPortActions.calculateViewPortContentImageRect(),\r\n            realImageSize: ImageUtil.getSize(EditorModel.image),\r\n            absoluteViewPortContentScrollPosition: ViewPortActions.getAbsoluteScrollPosition()\r\n        }\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // HELPERS\r\n    // =================================================================================================================\r\n\r\n    public static updateMousePositionIndicator(event: React.MouseEvent<HTMLCanvasElement, MouseEvent> | MouseEvent) {\r\n        if (!EditorModel.image || !EditorModel.canvas) {\r\n            EditorModel.mousePositionIndicator.style.display = \"none\";\r\n            EditorModel.cursor.style.display = \"none\";\r\n            return;\r\n        }\r\n\r\n        const mousePositionOverViewPortContent: IPoint = CanvasUtil.getMousePositionOnCanvasFromEvent(event, EditorModel.canvas);\r\n        const viewPortContentScrollPosition: IPoint = ViewPortActions.getAbsoluteScrollPosition();\r\n        const viewPortContentImageRect: IRect = ViewPortActions.calculateViewPortContentImageRect();\r\n        const mousePositionOverViewPort: IPoint = PointUtil.subtract(mousePositionOverViewPortContent, viewPortContentScrollPosition);\r\n        const isMouseOverImage: boolean = RectUtil.isPointInside(viewPortContentImageRect, mousePositionOverViewPortContent);\r\n        const isMouseOverViewPort: boolean = RectUtil.isPointInside({x: 0, y: 0, ...EditorModel.viewPortSize}, mousePositionOverViewPort);\r\n\r\n        if (isMouseOverViewPort && !GeneralSelector.getPreventCustomCursorStatus()) {\r\n            EditorModel.cursor.style.left = mousePositionOverViewPort.x + \"px\";\r\n            EditorModel.cursor.style.top = mousePositionOverViewPort.y + \"px\";\r\n            EditorModel.cursor.style.display = \"block\";\r\n\r\n            if (isMouseOverImage && ![CustomCursorStyle.GRAB, CustomCursorStyle.GRABBING].includes(GeneralSelector.getCustomCursorStyle())) {\r\n                const imageSize: ISize = ImageUtil.getSize(EditorModel.image);\r\n                const scale: number = imageSize.width / viewPortContentImageRect.width;\r\n                const mousePositionOverImage: IPoint = PointUtil.multiply(\r\n                    PointUtil.subtract(mousePositionOverViewPortContent, viewPortContentImageRect), scale);\r\n                const text: string = \"x: \" + Math.round(mousePositionOverImage.x) + \", y: \" + Math.round(mousePositionOverImage.y);\r\n\r\n                EditorModel.mousePositionIndicator.innerHTML = text;\r\n                EditorModel.mousePositionIndicator.style.left = (mousePositionOverViewPort.x + 15) + \"px\";\r\n                EditorModel.mousePositionIndicator.style.top = (mousePositionOverViewPort.y + 15) + \"px\";\r\n                EditorModel.mousePositionIndicator.style.display = \"block\";\r\n            } else {\r\n                EditorModel.mousePositionIndicator.style.display = \"none\";\r\n            }\r\n        } else {\r\n            EditorModel.cursor.style.display = \"none\";\r\n            EditorModel.mousePositionIndicator.style.display = \"none\";\r\n        }\r\n    };\r\n}","import {HotKeyAction} from \"../../data/HotKeyAction\";\r\n\r\nexport class BaseContext {\r\n    public static actions: HotKeyAction[] = [];\r\n\r\n    public static getActions(): HotKeyAction[] {\r\n        return this.actions;\r\n    }\r\n}","import { LabelsSelector } from \"../../store/selectors/LabelsSelector\";\r\nimport { store } from \"../../index\";\r\nimport {\r\n  updateActiveImageIndex,\r\n  updateActiveLabelId,\r\n  updateActiveLabelNameId,\r\n  updateImageDataById,\r\n} from \"../../store/labels/actionCreators\";\r\nimport { ViewPortActions } from \"./ViewPortActions\";\r\nimport { EditorModel } from \"../../staticModels/EditorModel\";\r\nimport { LabelType } from \"../../data/enums/LabelType\";\r\nimport {\r\n  ImageData,\r\n  LabelLine,\r\n  LabelPoint,\r\n  LabelPolygon,\r\n  LabelRect,\r\n} from \"../../store/labels/types\";\r\nimport { LabelStatus } from \"../../data/enums/LabelStatus\";\r\nimport { remove } from \"lodash\";\r\n\r\nexport class ImageActions {\r\n  public static getPreviousImage(): void {\r\n    const currentImageIndex: number = LabelsSelector.getActiveImageIndex();\r\n    ImageActions.getImageByIndex(currentImageIndex - 1);\r\n  }\r\n\r\n  public static getNextImage(): void {\r\n    const currentImageIndex: number = LabelsSelector.getActiveImageIndex();\r\n    ImageActions.getImageByIndex(currentImageIndex + 1);\r\n  }\r\n\r\n  public static getImageByIndex(index: number): void {\r\n    if (EditorModel.viewPortActionsDisabled) return;\r\n\r\n    const imageCount: number = LabelsSelector.getImagesData().length;\r\n\r\n    if (index < 0 || index > imageCount - 1) {\r\n      return;\r\n    } else {\r\n      ViewPortActions.setZoom(1);\r\n      store.dispatch(updateActiveImageIndex(index));\r\n      store.dispatch(updateActiveLabelId(null));\r\n    }\r\n  }\r\n\r\n  public static setActiveLabelOnActiveImage(labelIndex: number): void {\r\n    const labelNames = LabelsSelector.getLabelNames();\r\n    if (labelNames.length < labelIndex + 1) {\r\n      return;\r\n    }\r\n\r\n    const imageData: ImageData = LabelsSelector.getActiveImageData();\r\n    store.dispatch(\r\n      updateImageDataById(\r\n        imageData.id,\r\n        ImageActions.mapNewImageData(imageData, labelIndex)\r\n      )\r\n    );\r\n    store.dispatch(updateActiveLabelNameId(labelNames[1].id));\r\n  }\r\n\r\n  private static mapNewImageData(\r\n    imageData: ImageData,\r\n    labelIndex: number\r\n  ): ImageData {\r\n    const labelType: LabelType = LabelsSelector.getActiveLabelType();\r\n    const labelNames = LabelsSelector.getLabelNames();\r\n    let newImageData: ImageData = {\r\n      ...imageData,\r\n    };\r\n    switch (labelType) {\r\n      case LabelType.POINT:\r\n        const point = LabelsSelector.getActivePointLabel();\r\n        newImageData.labelPoints = imageData.labelPoints.map(\r\n          (labelPoint: LabelPoint) => {\r\n            if (labelPoint.id === point.id) {\r\n              return {\r\n                ...labelPoint,\r\n                labelId: labelNames[labelIndex].id,\r\n                status: LabelStatus.ACCEPTED,\r\n              };\r\n            }\r\n            return labelPoint;\r\n          }\r\n        );\r\n        store.dispatch(updateActiveLabelId(point.id));\r\n        break;\r\n      case LabelType.LINE:\r\n        const line = LabelsSelector.getActiveLineLabel();\r\n        newImageData.labelLines = imageData.labelLines.map(\r\n          (labelLine: LabelLine) => {\r\n            if (labelLine.id === line.id) {\r\n              return {\r\n                ...labelLine,\r\n                labelId: labelNames[labelIndex].id,\r\n                status: LabelStatus.ACCEPTED,\r\n              };\r\n            }\r\n            return labelLine;\r\n          }\r\n        );\r\n        store.dispatch(updateActiveLabelId(line.id));\r\n        break;\r\n      case LabelType.RECT:\r\n        const rect = LabelsSelector.getActiveRectLabel();\r\n        newImageData.labelRects = imageData.labelRects.map(\r\n          (labelRectangle: LabelRect) => {\r\n            if (labelRectangle.id === rect.id) {\r\n              return {\r\n                ...labelRectangle,\r\n                labelId: labelNames[labelIndex].id,\r\n                status: LabelStatus.ACCEPTED,\r\n              };\r\n            }\r\n            return labelRectangle;\r\n          }\r\n        );\r\n        store.dispatch(updateActiveLabelId(rect.id));\r\n        break;\r\n      case LabelType.POLYGON:\r\n        const polygon = LabelsSelector.getActivePolygonLabel();\r\n        newImageData.labelPolygons = imageData.labelPolygons.map(\r\n          (labelPolygon: LabelPolygon) => {\r\n            if (labelPolygon.id === polygon.id) {\r\n              return {\r\n                ...labelPolygon,\r\n                labelId: labelNames[labelIndex].id,\r\n                status: LabelStatus.ACCEPTED,\r\n              };\r\n            }\r\n            return labelPolygon;\r\n          }\r\n        );\r\n        store.dispatch(updateActiveLabelId(polygon.id));\r\n        break;\r\n      case LabelType.IMAGE_RECOGNITION:\r\n        const labelId: string = labelNames[labelIndex].id;\r\n        if (imageData.labelNameIds.includes(labelId)) {\r\n          newImageData.labelNameIds = remove(\r\n            imageData.labelNameIds,\r\n            (element: string) => element !== labelId\r\n          );\r\n        } else {\r\n          newImageData.labelNameIds = imageData.labelNameIds.concat(labelId);\r\n        }\r\n        break;\r\n    }\r\n\r\n    return newImageData;\r\n  }\r\n}\r\n","import {MobileDeviceData} from \"../data/MobileDeviceData\";\r\nimport MobileDetect from 'mobile-detect'\r\n\r\nexport class PlatformUtil {\r\n    public static getMobileDeviceData(userAgent: string): MobileDeviceData {\r\n        const mobileDetect = new MobileDetect(userAgent);\r\n        return {\r\n            manufacturer: mobileDetect.mobile(),\r\n            browser: mobileDetect.userAgent(),\r\n            os: mobileDetect.os()\r\n        }\r\n    }\r\n\r\n    public static isMac(userAgent: string): boolean {\r\n        return !!userAgent.toLowerCase().match(\"mac\");\r\n    }\r\n\r\n    public static isSafari(userAgent: string): boolean {\r\n        return !!userAgent.toLowerCase().match(\"safari\");\r\n    }\r\n\r\n    public static isFirefox(userAgent: string): boolean {\r\n        return !!userAgent.toLowerCase().match(\"firefox\");\r\n    }\r\n}","import {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {ImageData, LabelLine, LabelName, LabelPoint, LabelPolygon, LabelRect} from \"../../store/labels/types\";\r\nimport {filter} from \"lodash\";\r\nimport {store} from \"../../index\";\r\nimport {updateImageData, updateImageDataById} from \"../../store/labels/actionCreators\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\n\r\nexport class LabelActions {\r\n    public static deleteActiveLabel() {\r\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\r\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\r\n        LabelActions.deleteImageLabelById(activeImageData.id, activeLabelId);\r\n    }\r\n\r\n    public static deleteImageLabelById(imageId: string, labelId: string) {\r\n        switch (LabelsSelector.getActiveLabelType()) {\r\n            case LabelType.POINT:\r\n                LabelActions.deletePointLabelById(imageId, labelId);\r\n                break;\r\n            case LabelType.RECT:\r\n                LabelActions.deleteRectLabelById(imageId, labelId);\r\n                break;\r\n            case LabelType.POLYGON:\r\n                LabelActions.deletePolygonLabelById(imageId, labelId);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static deleteRectLabelById(imageId: string, labelRectId: string) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelRects: filter(imageData.labelRects, (currentLabel: LabelRect) => {\r\n                return currentLabel.id !== labelRectId;\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\r\n    }\r\n\r\n    public static deletePointLabelById(imageId: string, labelPointId: string) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelPoints: filter(imageData.labelPoints, (currentLabel: LabelPoint) => {\r\n                return currentLabel.id !== labelPointId;\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\r\n    }\r\n\r\n    public static deleteLineLabelById(imageId: string, labelLineId: string) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelLines: filter(imageData.labelLines, (currentLabel: LabelLine) => {\r\n                return currentLabel.id !== labelLineId;\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\r\n    }\r\n\r\n    public static deletePolygonLabelById(imageId: string, labelPolygonId: string) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelPolygons: filter(imageData.labelPolygons, (currentLabel: LabelPolygon) => {\r\n                return currentLabel.id !== labelPolygonId;\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\r\n    }\r\n\r\n    public static removeLabelNames(labelNamesIds: string[]) {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        const newImagesData: ImageData[] = imagesData.map((imageData: ImageData) => {\r\n            return LabelActions.removeLabelNamesFromImageData(imageData, labelNamesIds);\r\n        });\r\n        store.dispatch(updateImageData(newImagesData))\r\n    }\r\n\r\n    private static removeLabelNamesFromImageData(imageData: ImageData, labelNamesIds: string[]): ImageData {\r\n        return {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\r\n                if (labelNamesIds.includes(labelRect.id)) {\r\n                    return {\r\n                        ...labelRect,\r\n                        id: null\r\n                    }\r\n                } else {\r\n                    return labelRect\r\n                }\r\n            }),\r\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n                if (labelNamesIds.includes(labelPoint.id)) {\r\n                    return {\r\n                        ...labelPoint,\r\n                        id: null\r\n                    }\r\n                } else {\r\n                    return labelPoint\r\n                }\r\n            }),\r\n            labelPolygons: imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\r\n                if (labelNamesIds.includes(labelPolygon.id)) {\r\n                    return {\r\n                        ...labelPolygon,\r\n                        id: null\r\n                    }\r\n                } else {\r\n                    return labelPolygon\r\n                }\r\n            }),\r\n            labelNameIds: imageData.labelNameIds.filter((labelNameId: string) => {\r\n                return !labelNamesIds.includes(labelNameId)\r\n            })\r\n        }\r\n    }\r\n\r\n    public static labelExistsInLabelNames(label: string): boolean {\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        return labelNames\r\n            .map((label: LabelName) => label.name)\r\n            .includes(label)\r\n    }\r\n}","import {HotKeyAction} from \"../../data/HotKeyAction\";\r\nimport {EditorModel} from \"../../staticModels/EditorModel\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\nimport {EditorData} from \"../../data/EditorData\";\r\nimport {EditorActions} from \"../actions/EditorActions\";\r\nimport {PolygonRenderEngine} from \"../render/PolygonRenderEngine\";\r\nimport {BaseContext} from \"./BaseContext\";\r\nimport {ImageActions} from \"../actions/ImageActions\";\r\nimport {ViewPortActions} from \"../actions/ViewPortActions\";\r\nimport {Direction} from \"../../data/enums/Direction\";\r\nimport {PlatformUtil} from \"../../utils/PlatformUtil\";\r\nimport {LabelActions} from \"../actions/LabelActions\";\r\nimport {LineRenderEngine} from \"../render/LineRenderEngine\";\r\n\r\nexport class EditorContext extends BaseContext {\r\n    public static actions: HotKeyAction[] = [\r\n        {\r\n            keyCombo: [\"Enter\"],\r\n            action: (event: KeyboardEvent) => {\r\n                if (EditorModel.supportRenderingEngine && EditorModel.supportRenderingEngine.labelType === LabelType.POLYGON) {\r\n                    const editorData: EditorData = EditorActions.getEditorData();\r\n                    (EditorModel.supportRenderingEngine as PolygonRenderEngine).addLabelAndFinishCreation(editorData);\r\n                }\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"Escape\"],\r\n            action: (event: KeyboardEvent) => {\r\n                if (EditorModel.supportRenderingEngine) {\r\n                    switch (EditorModel.supportRenderingEngine.labelType) {\r\n                        case LabelType.POLYGON:\r\n                            (EditorModel.supportRenderingEngine as PolygonRenderEngine).cancelLabelCreation();\r\n                            break;\r\n                        case LabelType.LINE:\r\n                            (EditorModel.supportRenderingEngine as LineRenderEngine).cancelLabelCreation();\r\n                            break;\r\n                    }\r\n                }\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"ArrowLeft\"] : [\"Control\", \"ArrowLeft\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.getPreviousImage()\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"ArrowRight\"] : [\"Control\", \"ArrowRight\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.getNextImage();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"+\"] : [\"Control\", \"+\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ViewPortActions.zoomIn();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"-\"] : [\"Control\", \"-\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ViewPortActions.zoomOut();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"ArrowRight\"],\r\n            action: (event: KeyboardEvent) => {\r\n                event.preventDefault();\r\n                ViewPortActions.translateViewPortPosition(Direction.RIGHT);\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"ArrowLeft\"],\r\n            action: (event: KeyboardEvent) => {\r\n                event.preventDefault();\r\n                ViewPortActions.translateViewPortPosition(Direction.LEFT);\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"ArrowUp\"],\r\n            action: (event: KeyboardEvent) => {\r\n                event.preventDefault();\r\n                ViewPortActions.translateViewPortPosition(Direction.BOTTOM);\r\n            }\r\n        },\r\n        {\r\n            keyCombo: [\"ArrowDown\"],\r\n            action: (event: KeyboardEvent) => {\r\n                event.preventDefault();\r\n                ViewPortActions.translateViewPortPosition(Direction.TOP);\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Backspace\"] : [\"Delete\"],\r\n            action: (event: KeyboardEvent) => {\r\n                LabelActions.deleteActiveLabel();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"0\"] : [\"Control\", \"0\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(0);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"1\"] : [\"Control\", \"1\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(1);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"2\"] : [\"Control\", \"2\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(2);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"3\"] : [\"Control\", \"3\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(3);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"4\"] : [\"Control\", \"4\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(4);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"5\"] : [\"Control\", \"5\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(5);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"6\"] : [\"Control\", \"6\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(6);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"7\"] : [\"Control\", \"7\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(7);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"8\"] : [\"Control\", \"8\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(8);\r\n                EditorActions.fullRender();\r\n            }\r\n        },\r\n        {\r\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"9\"] : [\"Control\", \"9\"],\r\n            action: (event: KeyboardEvent) => {\r\n                ImageActions.setActiveLabelOnActiveImage(9);\r\n                EditorActions.fullRender();\r\n            }\r\n        }\r\n    ];\r\n}","import {ContextManager} from \"../context/ContextManager\";\r\nimport {store} from \"../../index\";\r\nimport {updateActivePopupType} from \"../../store/general/actionCreators\";\r\nimport { PopupWindowType } from \"../../data/enums/PopupWindowType\";\r\n\r\nexport class PopupActions {\r\n    public static close() {\r\n        store.dispatch(updateActivePopupType(null));\r\n        ContextManager.restoreCtx();\r\n    }\r\n    public static loading() {\r\n        store.dispatch(updateActivePopupType(PopupWindowType.LOADER));\r\n        ContextManager.restoreCtx();\r\n    }\r\n}","import {HotKeyAction} from \"../../data/HotKeyAction\";\r\nimport {PopupWindowType} from \"../../data/enums/PopupWindowType\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {BaseContext} from \"./BaseContext\";\r\nimport {PopupActions} from \"../actions/PopupActions\";\r\nimport {Settings} from \"../../settings/Settings\";\r\n\r\nexport class PopupContext extends BaseContext {\r\n    public static actions: HotKeyAction[] = [\r\n        {\r\n            keyCombo: [\"Escape\"],\r\n            action: (event: KeyboardEvent) => {\r\n                const popupType: PopupWindowType = GeneralSelector.getActivePopupType();\r\n                const canBeClosed: boolean = Settings.CLOSEABLE_POPUPS.includes(popupType);\r\n                if (canBeClosed) {\r\n                    PopupActions.close();\r\n                }\r\n            }\r\n        }\r\n    ];\r\n}","import {ContextType} from \"../../data/enums/ContextType\";\r\nimport {HotKeyAction} from \"../../data/HotKeyAction\";\r\nimport {store} from \"../../index\";\r\nimport {updateActiveContext} from \"../../store/general/actionCreators\";\r\nimport {xor, isEmpty} from \"lodash\";\r\nimport {EditorContext} from \"./EditorContext\";\r\nimport {PopupContext} from \"./PopupContext\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {EventType} from \"../../data/enums/EventType\";\r\n\r\nexport class ContextManager {\r\n    private static activeCombo: string[] = [];\r\n    private static actions: HotKeyAction[] = [];\r\n    private static contextHistory: ContextType[] = [];\r\n\r\n    public static getActiveCombo(): string[] {\r\n        return ContextManager.activeCombo;\r\n    }\r\n\r\n    public static init(): void {\r\n        window.addEventListener(EventType.KEY_DOWN, ContextManager.onDown);\r\n        window.addEventListener(EventType.KEY_UP, ContextManager.onUp);\r\n        window.addEventListener(EventType.FOCUS, ContextManager.onFocus);\r\n    }\r\n\r\n    public static switchCtx(context: ContextType): void {\r\n        const activeCtx: ContextType = GeneralSelector.getActiveContext();\r\n\r\n        if (activeCtx !== context) {\r\n            ContextManager.contextHistory.push(activeCtx);\r\n            ContextManager.updateCtx(context);\r\n        }\r\n    }\r\n\r\n    private static updateCtx(context: ContextType): void {\r\n        store.dispatch(updateActiveContext(context));\r\n        switch (context) {\r\n            case ContextType.EDITOR:\r\n                ContextManager.actions = EditorContext.getActions();\r\n                break;\r\n            case ContextType.POPUP:\r\n                ContextManager.actions = PopupContext.getActions();\r\n                break;\r\n            default:\r\n                ContextManager.actions = [];\r\n        }\r\n    }\r\n\r\n    public static restoreCtx(): void {\r\n        ContextManager.updateCtx(ContextManager.contextHistory.pop());\r\n    }\r\n\r\n    private static onDown(event: KeyboardEvent): void {\r\n        const keyCode: string = ContextManager.getKeyCodeFromEvent(event);\r\n        if (!ContextManager.isInCombo(keyCode)) {\r\n            ContextManager.addToCombo(keyCode);\r\n        }\r\n        ContextManager.execute(event);\r\n    }\r\n\r\n    private static onUp(event: KeyboardEvent): void {\r\n        const keyCode: string = ContextManager.getKeyCodeFromEvent(event);\r\n        ContextManager.removeFromCombo(keyCode);\r\n    }\r\n\r\n    public static onFocus() {\r\n        ContextManager.activeCombo = [];\r\n    }\r\n\r\n    private static execute(event: KeyboardEvent): void {\r\n        for (let i = 0; i < ContextManager.actions.length; i++) {\r\n            const hotKey: HotKeyAction = ContextManager.actions[i];\r\n            if (ContextManager.matchCombo(ContextManager.activeCombo, hotKey.keyCombo)) {\r\n                hotKey.action(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static isInCombo(keyCode: string): boolean {\r\n        return ContextManager.activeCombo.indexOf(keyCode) >= 0;\r\n    }\r\n\r\n    private static addToCombo(keyCode: string): void {\r\n        ContextManager.activeCombo.push(keyCode);\r\n    }\r\n\r\n    private static removeFromCombo(keyCode: string): void {\r\n        const index: number = ContextManager.activeCombo.indexOf(keyCode);\r\n        if (index >= 0) {\r\n            ContextManager.activeCombo.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    private static getKeyCodeFromEvent(event: KeyboardEvent): string {\r\n        return event.key;\r\n    }\r\n\r\n    private static matchCombo(combo1: string[], combo2: string[]): boolean {\r\n        return isEmpty(xor(combo1, combo2))\r\n    }\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {LabelType} from \"../../../../data/enums/LabelType\";\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {ImageData, LabelPoint, LabelRect} from \"../../../../store/labels/types\";\r\nimport {VirtualList} from \"../../../Common/VirtualList/VirtualList\";\r\nimport ImagePreview from \"../ImagePreview/ImagePreview\";\r\nimport './ImagesList.scss';\r\nimport {ContextManager} from \"../../../../logic/context/ContextManager\";\r\nimport {ContextType} from \"../../../../data/enums/ContextType\";\r\nimport {ImageActions} from \"../../../../logic/actions/ImageActions\";\r\nimport {EventType} from \"../../../../data/enums/EventType\";\r\nimport {LabelStatus} from \"../../../../data/enums/LabelStatus\";\r\n\r\ninterface IProps {\r\n    activeImageIndex: number;\r\n    imagesData: ImageData[];\r\n    activeLabelType: LabelType;\r\n}\r\n\r\ninterface IState {\r\n    size: ISize;\r\n}\r\n\r\nclass ImagesList extends React.Component<IProps, IState> {\r\n    private imagesListRef: HTMLDivElement;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            size: null,\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.updateListSize();\r\n        window.addEventListener(EventType.RESIZE, this.updateListSize);\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        window.removeEventListener(EventType.RESIZE, this.updateListSize);\r\n    }\r\n\r\n    private updateListSize = () => {\r\n        if (!this.imagesListRef)\r\n            return;\r\n\r\n        const listBoundingBox = this.imagesListRef.getBoundingClientRect();\r\n        this.setState({\r\n            size: {\r\n                width: listBoundingBox.width,\r\n                height: listBoundingBox.height\r\n            }\r\n        })\r\n    };\r\n\r\n    private isImageChecked = (index:number): boolean => {\r\n        const imageData = this.props.imagesData[index]\r\n        switch (this.props.activeLabelType) {\r\n            case LabelType.LINE:\r\n                return imageData.labelLines.length > 0\r\n            case LabelType.IMAGE_RECOGNITION:\r\n                return imageData.labelNameIds.length > 0\r\n            case LabelType.POINT:\r\n                return imageData.labelPoints\r\n                    .filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED)\r\n                    .length > 0\r\n            case LabelType.POLYGON:\r\n                return imageData.labelPolygons.length > 0\r\n            case LabelType.RECT:\r\n                return imageData.labelRects\r\n                    .filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\r\n                    .length > 0\r\n        }\r\n    };\r\n\r\n    private onClickHandler = (index: number) => {\r\n        ImageActions.getImageByIndex(index)\r\n    };\r\n\r\n    private renderImagePreview = (index: number, isScrolling: boolean, isVisible: boolean, style: React.CSSProperties) => {\r\n        return <ImagePreview\r\n            key={index}\r\n            style={style}\r\n            size={{width: 150, height: 150}}\r\n            isScrolling={isScrolling}\r\n            isChecked={this.isImageChecked(index)}\r\n            imageData={this.props.imagesData[index]}\r\n            onClick={() => this.onClickHandler(index)}\r\n            isSelected={this.props.activeImageIndex === index}\r\n        />\r\n    };\r\n\r\n    public render() {\r\n        const { size } = this.state;\r\n        return(\r\n            <div\r\n                className=\"ImagesList\"\r\n                ref={ref => this.imagesListRef = ref}\r\n                onClick={() => ContextManager.switchCtx(ContextType.LEFT_NAVBAR)}\r\n            >\r\n                {!!size && <VirtualList\r\n                    size={size}\r\n                    childSize={{width: 150, height: 150}}\r\n                    childCount={this.props.imagesData.length}\r\n                    childRender={this.renderImagePreview}\r\n                    overScanHeight={200}\r\n                />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeImageIndex: state.labels.activeImageIndex,\r\n    imagesData: state.labels.imagesData,\r\n    activeLabelType: state.labels.activeLabelType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ImagesList);","import {LabelType} from \"../enums/LabelType\";\r\nimport {ProjectType} from \"../enums/ProjectType\";\r\n\r\nexport interface ILabelToolkit {\r\n    labelType: LabelType;\r\n    headerText: string;\r\n    imageSrc: string;\r\n    imageAlt: string;\r\n    projectType: ProjectType;\r\n}\r\n\r\nexport const LabelToolkitData: ILabelToolkit[] = [\r\n    {\r\n        labelType: LabelType.IMAGE_RECOGNITION,\r\n        headerText: \"Image recognition\",\r\n        imageSrc: \"ico/object.png\",\r\n        imageAlt: \"object\",\r\n        projectType: ProjectType.IMAGE_RECOGNITION,\r\n    },\r\n    {\r\n        labelType: LabelType.RECT,\r\n        headerText: \"Rect\",\r\n        imageSrc: \"ico/rectangle.png\",\r\n        imageAlt: \"rectangle\",\r\n        projectType: ProjectType.OBJECT_DETECTION,\r\n    },\r\n    {\r\n        labelType: LabelType.POINT,\r\n        headerText: \"Point\",\r\n        imageSrc: \"ico/point.png\",\r\n        imageAlt: \"point\",\r\n        projectType: ProjectType.OBJECT_DETECTION,\r\n    },\r\n    {\r\n        labelType: LabelType.LINE,\r\n        headerText: \"Line\",\r\n        imageSrc: \"ico/line.png\",\r\n        imageAlt: \"line\",\r\n        projectType: ProjectType.OBJECT_DETECTION,\r\n    },\r\n    {\r\n        labelType: LabelType.POLYGON,\r\n        headerText: \"Polygon\",\r\n        imageSrc: \"ico/polygon.png\",\r\n        imageAlt: \"polygon\",\r\n        projectType: ProjectType.OBJECT_DETECTION,\r\n    },\r\n];","import * as React from 'react';\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport './ImageButton.scss';\r\nimport classNames from \"classnames\";\r\nimport {LegacyRef} from \"react\";\r\n\r\nexport interface ImageButtonProps extends React.HTMLProps<HTMLDivElement> {\r\n    buttonSize:ISize,\r\n    padding?:number;\r\n    image:string,\r\n    imageAlt:string,\r\n    href?:string\r\n    onClick?:() => any;\r\n    style?:React.CSSProperties\r\n    isActive?:boolean;\r\n    isDisabled?:boolean;\r\n    externalClassName?:string;\r\n}\r\n\r\nexport const ImageButton = React.forwardRef((props: ImageButtonProps, ref: LegacyRef<HTMLDivElement>) => {\r\n    const {buttonSize, padding, image, imageAlt, href, onClick, style, isActive, isDisabled, externalClassName} = props;\r\n    const imagePadding:number = !!padding ? padding : 10;\r\n\r\n    const onClickHandler = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        !!onClick && onClick();\r\n    };\r\n\r\n    const buttonStyle:React.CSSProperties = {\r\n        ...style,\r\n        width: buttonSize.width,\r\n        height: buttonSize.height\r\n    };\r\n\r\n    const imageStyle:React.CSSProperties = {\r\n        maxWidth: buttonSize.width - imagePadding,\r\n        maxHeight: buttonSize.height - imagePadding\r\n    };\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"ImageButton\",\r\n            externalClassName,\r\n            {\r\n                \"active\": isActive,\r\n                \"disabled\": isDisabled,\r\n            }\r\n        );\r\n    };\r\n    \r\n    return(\r\n        <div\r\n            className={getClassName()}\r\n            style={buttonStyle}\r\n            onClick={onClickHandler}\r\n            ref={ref}\r\n        >\r\n            {!!href && <a href={href} style={imageStyle} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <img\r\n                    draggable={false}\r\n                    alt={imageAlt}\r\n                    src={image}\r\n                    style={imageStyle}\r\n                />\r\n            </a>}\r\n            {!href && <img\r\n                draggable={false}\r\n                alt={imageAlt}\r\n                src={image}\r\n                style={imageStyle}\r\n            />}\r\n        </div>\r\n    );\r\n});","import React from 'react';\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport './LabelInputField.scss';\r\nimport classNames from \"classnames\";\r\nimport {ImageButton} from \"../../../Common/ImageButton/ImageButton\";\r\nimport {IRect} from \"../../../../interfaces/IRect\";\r\nimport {IPoint} from \"../../../../interfaces/IPoint\";\r\nimport {RectUtil} from \"../../../../utils/RectUtil\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {updateActiveLabelId, updateHighlightedLabelId} from \"../../../../store/labels/actionCreators\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {EventType} from \"../../../../data/enums/EventType\";\r\nimport {LabelName} from \"../../../../store/labels/types\";\r\nimport {LabelsSelector} from \"../../../../store/selectors/LabelsSelector\";\r\nimport {PopupWindowType} from \"../../../../data/enums/PopupWindowType\";\r\nimport {updateActivePopupType} from \"../../../../store/general/actionCreators\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    isActive: boolean;\r\n    isHighlighted: boolean;\r\n    id: string;\r\n    value: LabelName;\r\n    options: LabelName[];\r\n    onDelete: (id: string) => any;\r\n    onSelectLabel: (labelRectId: string, labelNameId: string) => any;\r\n    updateHighlightedLabelId: (highlightedLabelId: string) => any;\r\n    updateActiveLabelId: (highlightedLabelId: string) => any;\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n}\r\n\r\ninterface IState {\r\n    animate: boolean;\r\n    isOpen: boolean;\r\n}\r\n\r\nclass LabelInputField extends React.Component<IProps, IState> {\r\n    private dropdownOptionHeight: number = 30;\r\n    private dropdownOptionCount: number = 6;\r\n    private dropdownMargin: number = 4;\r\n    private dropdownLabel: HTMLDivElement;\r\n    private dropdown: HTMLDivElement;\r\n\r\n    public constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            animate: false,\r\n            isOpen: false\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        requestAnimationFrame(() => {\r\n            this.setState({ animate: true });\r\n        });\r\n    }\r\n\r\n    private getClassName() {\r\n        return classNames(\r\n            \"LabelInputField\",\r\n            {\r\n                \"loaded\": this.state.animate,\r\n                \"active\": this.props.isActive,\r\n                \"highlighted\": this.props.isHighlighted\r\n            }\r\n        );\r\n    }\r\n\r\n    private openDropdown = () => {\r\n        if (LabelsSelector.getLabelNames().length === 0) {\r\n            this.props.updateActivePopupType(PopupWindowType.UPDATE_LABEL);\r\n        } else {\r\n            this.setState({isOpen: true});\r\n            window.addEventListener(EventType.MOUSE_DOWN, this.closeDropdown);\r\n        }\r\n    };\r\n\r\n    private closeDropdown = (event: MouseEvent) => {\r\n        const mousePosition: IPoint = {x: event.clientX, y: event.clientY};\r\n        const clientRect = this.dropdown.getBoundingClientRect();\r\n        const dropDownRect: IRect = {\r\n            x: clientRect.left,\r\n            y: clientRect.top,\r\n            width: clientRect.width,\r\n            height: clientRect.height\r\n        };\r\n\r\n        if (!RectUtil.isPointInside(dropDownRect, mousePosition)) {\r\n            this.setState({isOpen: false});\r\n            window.removeEventListener(EventType.MOUSE_DOWN, this.closeDropdown)\r\n        }\r\n    };\r\n\r\n    private getDropdownStyle = ():React.CSSProperties => {\r\n        const clientRect = this.dropdownLabel.getBoundingClientRect();\r\n        const height: number = Math.min(this.props.options.length, this.dropdownOptionCount) * this.dropdownOptionHeight;\r\n        const style = {\r\n            width: clientRect.width,\r\n            height: height,\r\n            left: clientRect.left\r\n        };\r\n\r\n        if (window.innerHeight * 2/3 < clientRect.top)\r\n            return Object.assign(style, {top: clientRect.top - this.dropdownMargin - height});\r\n        else\r\n            return Object.assign(style, {top: clientRect.bottom + this.dropdownMargin});\r\n    };\r\n\r\n    private getDropdownOptions = () => {\r\n        const onClick = (id: string, event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n            this.setState({isOpen: false});\r\n            window.removeEventListener(EventType.MOUSE_DOWN, this.closeDropdown);\r\n            this.props.onSelectLabel(this.props.id, id);\r\n            this.props.updateHighlightedLabelId(null);\r\n            this.props.updateActiveLabelId(this.props.id);\r\n            event.stopPropagation();\r\n        };\r\n\r\n        return this.props.options.map((option: LabelName) => {\r\n            return <div\r\n                className=\"DropdownOption\"\r\n                key={option.id}\r\n                style={{height: this.dropdownOptionHeight}}\r\n                onClick={(event) => onClick(option.id, event)}\r\n            >\r\n                {option.name}\r\n            </div>\r\n        })\r\n    };\r\n\r\n    private mouseEnterHandler = () => {\r\n        this.props.updateHighlightedLabelId(this.props.id);\r\n    };\r\n\r\n    private mouseLeaveHandler =() => {\r\n        this.props.updateHighlightedLabelId(null);\r\n    };\r\n\r\n    private onClickHandler = () => {\r\n        this.props.updateActiveLabelId(this.props.id);\r\n    };\r\n\r\n    public render() {\r\n        const {size, id, value, onDelete} = this.props;\r\n        return(\r\n            <div\r\n                className={this.getClassName()}\r\n                style={{\r\n                    width: size.width,\r\n                    height: size.height,\r\n                }}\r\n                key={id}\r\n                onMouseEnter={this.mouseEnterHandler}\r\n                onMouseLeave={this.mouseLeaveHandler}\r\n                onClick={this.onClickHandler}\r\n            >\r\n                <div\r\n                    className=\"LabelInputFieldWrapper\"\r\n                    style={{\r\n                        width: size.width,\r\n                        height: size.height,\r\n                    }}\r\n                >\r\n                    <div className=\"Marker\"/>\r\n                    <div className=\"Content\">\r\n                        <div className=\"ContentWrapper\">\r\n                            <div className=\"DropdownLabel\"\r\n                                 ref={ref => this.dropdownLabel = ref}\r\n                                 onClick={this.openDropdown}\r\n                            >\r\n                                {value ? value.name : \"Select label\"}\r\n                            </div>\r\n                            {this.state.isOpen && <div\r\n                                className=\"Dropdown\"\r\n                                style={this.getDropdownStyle()}\r\n                                ref={ref => this.dropdown = ref}\r\n                            >\r\n                                <Scrollbars\r\n                                    renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\"/>}\r\n                                >\r\n                                    <div>\r\n                                        {this.getDropdownOptions()}\r\n                                    </div>\r\n                                </Scrollbars>\r\n\r\n                            </div>}\r\n                        </div>\r\n                        <div className=\"ContentWrapper\">\r\n                            <ImageButton\r\n                                externalClassName={\"trash\"}\r\n                                image={\"ico/trash.png\"}\r\n                                imageAlt={\"remove_rect\"}\r\n                                buttonSize={{width: 30, height: 30}}\r\n                                onClick={() => onDelete(id)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateHighlightedLabelId,\r\n    updateActiveLabelId,\r\n    updateActivePopupType\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LabelInputField);","import React from 'react';\r\nimport './EmptyLabelList.scss';\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface IProps {\r\n    firstLabelCreatedFlag: boolean;\r\n    labelBefore: string;\r\n    labelAfter: string;\r\n}\r\n\r\nconst EmptyLabelList: React.FC<IProps> = ({firstLabelCreatedFlag, labelBefore, labelAfter}) => {\r\n    const before = <>\r\n        <img\r\n            draggable={false}\r\n            alt={\"lets_start\"}\r\n            src={\"ico/rocket.png\"}\r\n        />\r\n        <p className=\"extraBold\">{labelBefore}</p>\r\n    </>;\r\n\r\n    const after = <>\r\n        <img\r\n            draggable={false}\r\n            alt={\"no_labels\"}\r\n            src={\"ico/box-opened.png\"}\r\n        />\r\n        <p className=\"extraBold\">{labelAfter}</p>\r\n    </>;\r\n\r\n    return(<div className=\"EmptyLabelList\">\r\n        {!firstLabelCreatedFlag ? before : after}\r\n    </div>)\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    firstLabelCreatedFlag: state.labels.firstLabelCreatedFlag\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EmptyLabelList);","import React from 'react';\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ImageData, LabelName, LabelRect} from \"../../../../store/labels/types\";\r\nimport './RectLabelsList.scss';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateActiveLabelNameId,\r\n    updateImageDataById\r\n} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\r\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\r\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\r\nimport {LabelStatus} from \"../../../../data/enums/LabelStatus\";\r\nimport {findLast} from \"lodash\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    activeLabelId: string;\r\n    highlightedLabelId: string;\r\n    updateActiveLabelNameId: (activeLabelId: string) => any;\r\n    labelNames: LabelName[];\r\n    updateActiveLabelId: (activeLabelId: string) => any;\r\n}\r\n\r\nconst RectLabelsList: React.FC<IProps> = ({size, imageData, updateImageDataById, labelNames, updateActiveLabelNameId, activeLabelId, highlightedLabelId, updateActiveLabelId}) => {\r\n    const labelInputFieldHeight = 40;\r\n    const listStyle: React.CSSProperties = {\r\n        width: size.width,\r\n        height: size.height\r\n    };\r\n    const listStyleContent: React.CSSProperties = {\r\n        width: size.width,\r\n        height: imageData.labelRects.length * labelInputFieldHeight\r\n    };\r\n\r\n    const deleteRectLabelById = (labelRectId: string) => {\r\n        LabelActions.deleteRectLabelById(imageData.id, labelRectId);\r\n    };\r\n\r\n    const updateRectLabel = (labelRectId: string, labelNameId: string) => {\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects\r\n                .map((labelRect: LabelRect) => {\r\n                if (labelRect.id === labelRectId) {\r\n                    return {\r\n                        ...labelRect,\r\n                        labelId: labelNameId,\r\n                        status: LabelStatus.ACCEPTED\r\n                    }\r\n                } else {\r\n                    return labelRect\r\n                }\r\n            })\r\n        };\r\n        updateImageDataById(imageData.id, newImageData);\r\n        updateActiveLabelNameId(labelNameId);\r\n    };\r\n\r\n    const onClickHandler = () => {\r\n        updateActiveLabelId(null);\r\n    };\r\n\r\n    const getChildren = () => {\r\n        return imageData.labelRects\r\n            .filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\r\n            .map((labelRect: LabelRect) => {\r\n            return <LabelInputField\r\n                size={{\r\n                    width: size.width,\r\n                    height: labelInputFieldHeight\r\n                }}\r\n                isActive={labelRect.id === activeLabelId}\r\n                isHighlighted={labelRect.id === highlightedLabelId}\r\n                id={labelRect.id}\r\n                key={labelRect.id}\r\n                onDelete={deleteRectLabelById}\r\n                value={labelRect.labelId !== null ? findLast(labelNames, {id: labelRect.labelId}) : null}\r\n                options={labelNames}\r\n                onSelectLabel={updateRectLabel}\r\n            />\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"RectLabelsList\"\r\n            style={listStyle}\r\n            onClickCapture={onClickHandler}\r\n        >\r\n            {imageData.labelRects.filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED).length === 0 ?\r\n                <EmptyLabelList\r\n                    labelBefore={\"draw your first bounding box\"}\r\n                    labelAfter={\"no labels created for this image yet\"}\r\n                /> :\r\n                <Scrollbars>\r\n                    <div\r\n                        className=\"RectLabelsListContent\"\r\n                        style={listStyleContent}\r\n                    >\r\n                        {getChildren()}\r\n                    </div>\r\n                </Scrollbars>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActiveLabelNameId,\r\n    updateActiveLabelId\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelId: state.labels.activeLabelId,\r\n    highlightedLabelId: state.labels.highlightedLabelId,\r\n    labelNames : state.labels.labels\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(RectLabelsList);","import React from 'react';\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ImageData, LabelName, LabelPoint} from \"../../../../store/labels/types\";\r\nimport './PointLabelsList.scss';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateActiveLabelNameId,\r\n    updateImageDataById\r\n} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\r\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\r\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\r\nimport {findLast} from \"lodash\";\r\nimport {LabelStatus} from \"../../../../data/enums/LabelStatus\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    activeLabelId: string;\r\n    highlightedLabelId: string;\r\n    updateActiveLabelNameId: (activeLabelId: string) => any;\r\n    labelNames: LabelName[];\r\n    updateActiveLabelId: (activeLabelId: string) => any;\r\n}\r\n\r\nconst PointLabelsList: React.FC<IProps> = (\r\n    {\r\n        size,\r\n        imageData,\r\n        updateImageDataById,\r\n        labelNames,\r\n        updateActiveLabelNameId,\r\n        activeLabelId,\r\n        highlightedLabelId,\r\n        updateActiveLabelId\r\n    }\r\n) => {\r\n    const labelInputFieldHeight = 40;\r\n    const listStyle: React.CSSProperties = {\r\n        width: size.width,\r\n        height: size.height\r\n    };\r\n    const listStyleContent: React.CSSProperties = {\r\n        width: size.width,\r\n        height: imageData.labelPoints.length * labelInputFieldHeight\r\n    };\r\n\r\n    const deletePointLabelById = (labelPointId: string) => {\r\n        LabelActions.deletePointLabelById(imageData.id, labelPointId);\r\n    };\r\n\r\n    const updatePointLabel = (labelPointId: string, labelNameId: string) => {\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n                if (labelPoint.id === labelPointId) {\r\n                    return {\r\n                        ...labelPoint,\r\n                        labelId: labelNameId\r\n                    }\r\n                }\r\n                return labelPoint\r\n            })\r\n        };\r\n        updateImageDataById(imageData.id, newImageData);\r\n        updateActiveLabelNameId(labelNameId);\r\n    };\r\n\r\n    const onClickHandler = () => {\r\n        updateActiveLabelId(null);\r\n    };\r\n\r\n    const getChildren = () => {\r\n        return imageData.labelPoints\r\n            .filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED)\r\n            .map((labelPoint: LabelPoint) => {\r\n            return <LabelInputField\r\n                size={{\r\n                    width: size.width,\r\n                    height: labelInputFieldHeight\r\n                }}\r\n                isActive={labelPoint.id === activeLabelId}\r\n                isHighlighted={labelPoint.id === highlightedLabelId}\r\n                id={labelPoint.id}\r\n                key={labelPoint.id}\r\n                onDelete={deletePointLabelById}\r\n                value={labelPoint.labelId !== null ? findLast(labelNames, {id: labelPoint.labelId}) : null}\r\n                options={labelNames}\r\n                onSelectLabel={updatePointLabel}\r\n            />\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"PointLabelsList\"\r\n            style={listStyle}\r\n            onClickCapture={onClickHandler}\r\n        >\r\n            {imageData.labelPoints.filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED).length === 0 ?\r\n                <EmptyLabelList\r\n                    labelBefore={\"mark your first point\"}\r\n                    labelAfter={\"no labels created for this image yet\"}\r\n                /> :\r\n                <Scrollbars>\r\n                    <div\r\n                        className=\"PointLabelsListContent\"\r\n                        style={listStyleContent}\r\n                    >\r\n                        {getChildren()}\r\n                    </div>\r\n                </Scrollbars>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActiveLabelNameId,\r\n    updateActiveLabelId\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelId: state.labels.activeLabelId,\r\n    highlightedLabelId: state.labels.highlightedLabelId,\r\n    labelNames : state.labels.labels\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PointLabelsList);","import React from 'react';\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ImageData, LabelName, LabelPolygon} from \"../../../../store/labels/types\";\r\nimport './PolygonLabelsList.scss';\r\nimport {\r\n    updateActiveLabelId,\r\n    updateActiveLabelNameId,\r\n    updateImageDataById\r\n} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\r\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\r\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\r\nimport {findLast} from \"lodash\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    activeLabelId: string;\r\n    highlightedLabelId: string;\r\n    updateActiveLabelNameId: (activeLabelId: string) => any;\r\n    labelNames: LabelName[];\r\n    updateActiveLabelId: (activeLabelId: string) => any;\r\n}\r\n\r\nconst PolygonLabelsList: React.FC<IProps> = ({size, imageData, updateImageDataById, labelNames, updateActiveLabelNameId, activeLabelId, highlightedLabelId, updateActiveLabelId}) => {\r\n    const labelInputFieldHeight = 40;\r\n    const listStyle: React.CSSProperties = {\r\n        width: size.width,\r\n        height: size.height\r\n    };\r\n    const listStyleContent: React.CSSProperties = {\r\n        width: size.width,\r\n        height: imageData.labelPolygons.length * labelInputFieldHeight\r\n    };\r\n\r\n    const deletePolygonLabelById = (labelPolygonId: string) => {\r\n        LabelActions.deletePolygonLabelById(imageData.id, labelPolygonId);\r\n    };\r\n\r\n    const updatePolygonLabel = (labelPolygonId: string, labelNameId: string) => {\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelPolygons: imageData.labelPolygons.map((currentLabel: LabelPolygon) => {\r\n                if (currentLabel.id === labelPolygonId) {\r\n                    return {\r\n                        ...currentLabel,\r\n                        labelId: labelNameId\r\n                    }\r\n                }\r\n                return currentLabel\r\n            })\r\n        };\r\n        updateImageDataById(imageData.id, newImageData);\r\n        updateActiveLabelNameId(labelNameId);\r\n    };\r\n\r\n    const onClickHandler = () => {\r\n        updateActiveLabelId(null);\r\n    };\r\n\r\n    const getChildren = () => {\r\n        return imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\r\n            return <LabelInputField\r\n                size={{\r\n                    width: size.width,\r\n                    height: labelInputFieldHeight\r\n                }}\r\n                isActive={labelPolygon.id === activeLabelId}\r\n                isHighlighted={labelPolygon.id === highlightedLabelId}\r\n                id={labelPolygon.id}\r\n                key={labelPolygon.id}\r\n                onDelete={deletePolygonLabelById}\r\n                value={labelPolygon.labelId !== null ? findLast(labelNames, {id: labelPolygon.labelId}) : null}\r\n                options={labelNames}\r\n                onSelectLabel={updatePolygonLabel}\r\n            />\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"PolygonLabelsList\"\r\n            style={listStyle}\r\n            onClickCapture={onClickHandler}\r\n        >\r\n            {imageData.labelPolygons.length === 0 ?\r\n                <EmptyLabelList\r\n                    labelBefore={\"draw your first polygon\"}\r\n                    labelAfter={\"no labels created for this image yet\"}\r\n                /> :\r\n                <Scrollbars>\r\n                    <div\r\n                        className=\"PolygonLabelsListContent\"\r\n                        style={listStyleContent}\r\n                    >\r\n                        {getChildren()}\r\n                    </div>\r\n                </Scrollbars>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActiveLabelNameId,\r\n    updateActiveLabelId\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelId: state.labels.activeLabelId,\r\n    highlightedLabelId: state.labels.highlightedLabelId,\r\n    labelNames : state.labels.labels\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PolygonLabelsList);","import React from 'react';\r\nimport './LineLabelsList.scss';\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport {ImageData, LabelLine, LabelName} from \"../../../../store/labels/types\";\r\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\r\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\r\nimport {findLast} from \"lodash\";\r\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport {\r\n    updateActiveLabelId,\r\n    updateActiveLabelNameId,\r\n    updateImageDataById\r\n} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    activeLabelId: string;\r\n    highlightedLabelId: string;\r\n    updateActiveLabelNameId: (activeLabelId: string) => any;\r\n    labelNames: LabelName[];\r\n    updateActiveLabelId: (activeLabelId: string) => any;\r\n}\r\n\r\nconst LineLabelsList: React.FC<IProps> = (\r\n    {\r\n        size,\r\n        imageData,\r\n        updateImageDataById,\r\n        labelNames,\r\n        updateActiveLabelNameId,\r\n        activeLabelId,\r\n        highlightedLabelId,\r\n        updateActiveLabelId\r\n    }\r\n) => {\r\n    const labelInputFieldHeight = 40;\r\n    const listStyle: React.CSSProperties = {\r\n        width: size.width,\r\n        height: size.height\r\n    };\r\n    const listStyleContent: React.CSSProperties = {\r\n        width: size.width,\r\n        height: imageData.labelLines.length * labelInputFieldHeight\r\n    };\r\n\r\n    const deleteLineLabelById = (labelLineId: string) => {\r\n        LabelActions.deleteLineLabelById(imageData.id, labelLineId);\r\n    };\r\n\r\n    const updateLineLabel = (labelLineId: string, labelNameId: string) => {\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelLines: imageData.labelLines.map((labelLine: LabelLine) => {\r\n                if (labelLine.id === labelLineId) {\r\n                    return {\r\n                        ...labelLine,\r\n                        labelId: labelNameId\r\n                    }\r\n                }\r\n                return labelLine\r\n            })\r\n        };\r\n        updateImageDataById(imageData.id, newImageData);\r\n        updateActiveLabelNameId(labelNameId);\r\n    };\r\n\r\n    const onClickHandler = () => {\r\n        updateActiveLabelId(null);\r\n    };\r\n\r\n    const getChildren = () => {\r\n        return imageData.labelLines\r\n            .map((labelLine: LabelLine) => {\r\n                return <LabelInputField\r\n                    size={{\r\n                        width: size.width,\r\n                        height: labelInputFieldHeight\r\n                    }}\r\n                    isActive={labelLine.id === activeLabelId}\r\n                    isHighlighted={labelLine.id === highlightedLabelId}\r\n                    id={labelLine.id}\r\n                    key={labelLine.id}\r\n                    onDelete={deleteLineLabelById}\r\n                    value={labelLine.labelId !== null ? findLast(labelNames, {id: labelLine.labelId}) : null}\r\n                    options={labelNames}\r\n                    onSelectLabel={updateLineLabel}\r\n                />\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"LineLabelsList\"\r\n            style={listStyle}\r\n            onClickCapture={onClickHandler}\r\n        >\r\n            {imageData.labelLines.length === 0 ?\r\n                <EmptyLabelList\r\n                    labelBefore={\"draw your first line\"}\r\n                    labelAfter={\"no labels created for this image yet\"}\r\n                /> :\r\n                <Scrollbars>\r\n                    <div\r\n                        className=\"LineLabelsListContent\"\r\n                        style={listStyleContent}\r\n                    >\r\n                        {getChildren()}\r\n                    </div>\r\n                </Scrollbars>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActiveLabelNameId,\r\n    updateActiveLabelId\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelId: state.labels.activeLabelId,\r\n    highlightedLabelId: state.labels.highlightedLabelId,\r\n    labelNames : state.labels.labels\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LineLabelsList);","import {ISize} from \"../../../../interfaces/ISize\";\r\nimport {ImageData, LabelName} from \"../../../../store/labels/types\";\r\nimport React from \"react\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport {updateImageDataById} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {remove} from \"lodash\";\r\nimport './TagLabelsList.scss';\r\nimport classNames from \"classnames\";\r\nimport {ImageButton} from \"../../../Common/ImageButton/ImageButton\";\r\nimport {PopupWindowType} from \"../../../../data/enums/PopupWindowType\";\r\nimport {updateActivePopupType} from \"../../../../store/general/actionCreators\";\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    labelNames: LabelName[];\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n}\r\n\r\nconst TagLabelsList: React.FC<IProps> = (\r\n    {\r\n        size,\r\n        imageData,\r\n        updateImageDataById,\r\n        labelNames,\r\n        updateActivePopupType\r\n    }) => {\r\n    const labelInputFieldHeight = 40;\r\n    const listStyle: React.CSSProperties = {\r\n        width: size.width,\r\n        height: size.height\r\n    };\r\n    const listStyleContent: React.CSSProperties = {\r\n        width: size.width,\r\n        height: imageData.labelPolygons.length * labelInputFieldHeight\r\n    };\r\n\r\n    const onTagClick = (labelId: string)  => {\r\n        if (imageData.labelNameIds.includes(labelId)) {\r\n            updateImageDataById(imageData.id, {\r\n                ...imageData,\r\n                labelNameIds: remove(imageData.labelNameIds, (element: string) => element !== labelId)\r\n            })\r\n        } else {\r\n            updateImageDataById(imageData.id, {\r\n                ...imageData,\r\n                labelNameIds: imageData.labelNameIds.concat(labelId)\r\n            })\r\n        }\r\n    }\r\n\r\n    const getClassName = (labelId: string) => {\r\n        return classNames(\r\n            \"TagItem\",\r\n            {\r\n                \"active\": imageData.labelNameIds.includes(labelId)\r\n            }\r\n        );\r\n    };\r\n\r\n    const addNewOnClick = () => {\r\n        updateActivePopupType(PopupWindowType.UPDATE_LABEL)\r\n    }\r\n\r\n    const getChildren = () => {\r\n        return [\r\n            ...labelNames.map((labelName: LabelName) => {\r\n                return <div\r\n                    className={getClassName(labelName.id)}\r\n                    onClickCapture={() => onTagClick(labelName.id)}\r\n                    key={labelName.id}\r\n                >\r\n                    {labelName.name}\r\n                </div>\r\n            }),\r\n            <ImageButton\r\n                image={\"ico/plus.png\"}\r\n                imageAlt={\"plus\"}\r\n                buttonSize={{width: 32, height: 32}}\r\n                onClick={addNewOnClick}\r\n            />\r\n        ]\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"TagLabelsList\"\r\n            style={listStyle}\r\n            key=\"tag-labels-list\"\r\n        >\r\n            {labelNames.length === 0 ?\r\n                <div\r\n                    className=\"EmptyLabelList\"\r\n                    onClick={addNewOnClick}\r\n                    key=\"empty-label-list\"\r\n                >\r\n                    <img\r\n                        draggable={false}\r\n                        alt={\"upload\"}\r\n                        src={\"ico/type-writer.png\"}\r\n                    />\r\n                    <p className=\"extraBold\">Your label list is empty</p>\r\n                </div> :\r\n                <Scrollbars>\r\n                    <div\r\n                        className=\"TagLabelsListContent\"\r\n                        style={listStyleContent}\r\n                        key=\"tag-labels-list-content\"\r\n                    >\r\n                        {getChildren()}\r\n                    </div>\r\n                </Scrollbars>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActivePopupType\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    labelNames : state.labels.labels\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TagLabelsList);","import React from \"react\";\r\nimport './LabelsToolkit.scss';\r\nimport {ImageData} from \"../../../../store/labels/types\";\r\nimport {updateActiveLabelId, updateActiveLabelType, updateImageDataById} from \"../../../../store/labels/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {LabelType} from \"../../../../data/enums/LabelType\";\r\nimport {ProjectType} from \"../../../../data/enums/ProjectType\";\r\nimport {ISize} from \"../../../../interfaces/ISize\";\r\nimport classNames from \"classnames\";\r\nimport {find} from \"lodash\";\r\nimport {ILabelToolkit, LabelToolkitData} from \"../../../../data/info/LabelToolkitData\";\r\nimport {Settings} from \"../../../../settings/Settings\";\r\nimport RectLabelsList from \"../RectLabelsList/RectLabelsList\";\r\nimport PointLabelsList from \"../PointLabelsList/PointLabelsList\";\r\nimport PolygonLabelsList from \"../PolygonLabelsList/PolygonLabelsList\";\r\nimport {ContextManager} from \"../../../../logic/context/ContextManager\";\r\nimport {ContextType} from \"../../../../data/enums/ContextType\";\r\nimport {EventType} from \"../../../../data/enums/EventType\";\r\nimport LineLabelsList from \"../LineLabelsList/LineLabelsList\";\r\nimport TagLabelsList from \"../TagLabelsList/TagLabelsList\";\r\n\r\ninterface IProps {\r\n    activeImageIndex:number,\r\n    activeLabelType: LabelType;\r\n    imagesData: ImageData[];\r\n    projectType: ProjectType;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    updateActiveLabelType: (activeLabelType: LabelType) => any;\r\n    updateActiveLabelId: (highlightedLabelId: string) => any;\r\n}\r\n\r\ninterface IState {\r\n    size: ISize;\r\n}\r\n\r\nclass LabelsToolkit extends React.Component<IProps, IState> {\r\n    private labelsToolkitRef: HTMLDivElement;\r\n    private readonly tabs: LabelType[];\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            size: null,\r\n        };\r\n\r\n        this.tabs = props.projectType === ProjectType.IMAGE_RECOGNITION ?\r\n            [\r\n                LabelType.IMAGE_RECOGNITION\r\n            ] :\r\n            [\r\n                LabelType.RECT,\r\n                LabelType.POINT,\r\n                LabelType.LINE,\r\n                LabelType.POLYGON\r\n            ];\r\n\r\n        const activeTab: LabelType = props.activeLabelType ? props.activeLabelType : this.tabs[0];\r\n        props.updateActiveLabelType(activeTab);\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.updateToolkitSize();\r\n        window.addEventListener(EventType.RESIZE, this.updateToolkitSize);\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        window.removeEventListener(EventType.RESIZE, this.updateToolkitSize);\r\n    }\r\n\r\n    private updateToolkitSize = () => {\r\n        if (!this.labelsToolkitRef)\r\n            return;\r\n\r\n        const listBoundingBox = this.labelsToolkitRef.getBoundingClientRect();\r\n        this.setState({\r\n            size: {\r\n                width: listBoundingBox.width,\r\n                height: listBoundingBox.height\r\n            }\r\n        })\r\n    };\r\n\r\n    private headerClickHandler = (activeTab: LabelType) => {\r\n        this.props.updateActiveLabelType(activeTab);\r\n        this.props.updateActiveLabelId(null);\r\n    };\r\n\r\n    private renderChildren = () => {\r\n        const {size} = this.state;\r\n        const {activeImageIndex, imagesData, activeLabelType} = this.props;\r\n        return this.tabs.reduce((children, labelType: LabelType, index: number) => {\r\n            const isActive: boolean = labelType === activeLabelType;\r\n            const tabData: ILabelToolkit = find(LabelToolkitData, {labelType});\r\n            const activeTabContentHeight: number = size.height - this.tabs.length * Settings.TOOLKIT_TAB_HEIGHT_PX;\r\n            const getClassName = (baseClass: string) => classNames(\r\n                baseClass,\r\n                {\r\n                    \"active\": isActive,\r\n                }\r\n            );\r\n\r\n            const header =\r\n                <div\r\n                    key={\"Header_\" + index}\r\n                    className={getClassName(\"Header\")}\r\n                    onClick={() => this.headerClickHandler(labelType)}\r\n                    style={{height: Settings.TOOLKIT_TAB_HEIGHT_PX}}\r\n                >\r\n                    <div className=\"Marker\"/>\r\n                    <div className=\"HeaderGroupWrapper\">\r\n                        <img\r\n                            draggable={false}\r\n                            className=\"Ico\"\r\n                            src={tabData.imageSrc}\r\n                            alt={tabData.imageAlt}\r\n                        />\r\n                        {tabData.headerText}\r\n                    </div>\r\n                    <div className=\"HeaderGroupWrapper\">\r\n                        <img\r\n                            draggable={false}\r\n                            className=\"Arrow\"\r\n                            src={\"ico/down.png\"}\r\n                            alt={\"down_arrow\"}\r\n                        />\r\n                    </div>\r\n                </div>;\r\n\r\n            const content =\r\n                <div\r\n                    key={\"Content_\" + index}\r\n                    className={getClassName(\"Content\")}\r\n                    style={{height: isActive ? activeTabContentHeight : 0}}\r\n                >\r\n                    {labelType === LabelType.RECT && <RectLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />}\r\n                    {labelType === LabelType.POINT && <PointLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />}\r\n                    {labelType === LabelType.LINE && <LineLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />}\r\n                    {labelType === LabelType.POLYGON && <PolygonLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />}\r\n                    {labelType === LabelType.IMAGE_RECOGNITION && <TagLabelsList\r\n                        size={{\r\n                            width: size.width - 20,\r\n                            height: activeTabContentHeight - 20\r\n                        }}\r\n                        imageData={imagesData[activeImageIndex]}\r\n                    />}\r\n                </div>;\r\n\r\n            children.push([header, content]);\r\n            return children;\r\n        }, [])\r\n    };\r\n\r\n    public render() {\r\n        return(\r\n            <div\r\n                className=\"LabelsToolkit\"\r\n                ref={ref => this.labelsToolkitRef = ref}\r\n                onClick={() => ContextManager.switchCtx(ContextType.RIGHT_NAVBAR)}\r\n            >\r\n                {this.state.size && this.renderChildren()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById,\r\n    updateActiveLabelType,\r\n    updateActiveLabelId\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeImageIndex: state.labels.activeImageIndex,\r\n    activeLabelType: state.labels.activeLabelType,\r\n    imagesData: state.labels.imagesData,\r\n    projectType: state.general.projectData.type,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LabelsToolkit);","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport './SideNavigationBar.scss';\r\nimport {Direction} from \"../../../data/enums/Direction\";\r\n\r\ninterface IProps {\r\n    direction: Direction\r\n    isOpen: boolean;\r\n    isWithContext?: boolean;\r\n    renderCompanion?: () => any;\r\n    renderContent?: () => any;\r\n}\r\n\r\nexport const SideNavigationBar: React.FC<IProps> = (props) => {\r\n    const {direction, isOpen, isWithContext, renderContent, renderCompanion} = props;\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"SideNavigationBar\",\r\n            {\r\n                \"left\": direction === Direction.LEFT,\r\n                \"right\": direction === Direction.RIGHT,\r\n                \"with-context\": isWithContext,\r\n                \"closed\": !isOpen\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={getClassName()}>\r\n            <div className=\"CompanionBar\">\r\n                {renderCompanion && renderCompanion()}\r\n            </div>\r\n            {isOpen && <div className=\"NavigationBarContentWrapper\">\r\n                {renderContent && renderContent()}\r\n            </div>}\r\n        </div>\r\n    );\r\n};","import * as React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport './VerticalEditorButton.scss';\r\n\r\ninterface IProps {\r\n    key?:string;\r\n    label:string;\r\n    onClick?:() => any;\r\n    style?:React.CSSProperties;\r\n    isActive?:boolean;\r\n    isDisabled?:boolean;\r\n    image?:string,\r\n    imageAlt?:string,\r\n}\r\n\r\nexport const VerticalEditorButton = (props:IProps) => {\r\n\r\n    const { key, label, onClick, style, isActive, isDisabled, image, imageAlt} = props;\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"VerticalEditorButton\",\r\n            {\r\n                \"active\": isActive,\r\n                \"disabled\": isDisabled\r\n            }\r\n        );\r\n    };\r\n\r\n    return(\r\n        <div\r\n            className={getClassName()}\r\n            onClick={!!onClick ? onClick : undefined}\r\n            key={key}\r\n            style={style}\r\n        >\r\n            {image && <img \r\n                draggable={false}\r\n                alt={imageAlt} \r\n                src={image}\r\n            />}\r\n            {label}\r\n        </div>\r\n    )\r\n};","import {CustomCursorStyle} from \"../data/enums/CustomCursorStyle\";\r\nimport classNames from \"classnames\";\r\n\r\nexport class EditorUtil {\r\n    public static getIndicator = (cursorStyle: CustomCursorStyle): string => {\r\n        switch (cursorStyle) {\r\n            case CustomCursorStyle.ADD:\r\n                return \"ico/plus.png\";\r\n            case CustomCursorStyle.RESIZE:\r\n                return \"ico/resize.png\";\r\n            case CustomCursorStyle.CLOSE:\r\n                return \"ico/close.png\";\r\n            case CustomCursorStyle.MOVE:\r\n                return \"ico/move.png\";\r\n            case CustomCursorStyle.CANCEL:\r\n                return \"ico/cancel.png\";\r\n            case CustomCursorStyle.GRAB:\r\n                return \"ico/hand-fill.png\";\r\n            case CustomCursorStyle.GRABBING:\r\n                return \"ico/hand-fill-grab.png\";\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    public static getCursorStyle = (cursorStyle: CustomCursorStyle) => {\r\n        return classNames(\r\n            \"Cursor\", {\r\n                \"move\": cursorStyle === CustomCursorStyle.MOVE,\r\n                \"add\": cursorStyle === CustomCursorStyle.ADD,\r\n                \"resize\": cursorStyle === CustomCursorStyle.RESIZE,\r\n                \"close\": cursorStyle === CustomCursorStyle.CLOSE,\r\n                \"cancel\": cursorStyle === CustomCursorStyle.CANCEL,\r\n                \"grab\": cursorStyle === CustomCursorStyle.GRAB,\r\n                \"grabbing\": cursorStyle === CustomCursorStyle.GRABBING\r\n            }\r\n        );\r\n    };\r\n}","import {MobileDeviceData} from \"../data/MobileDeviceData\";\r\n\r\nexport class PlatformModel {\r\n    public static mobileDeviceData: MobileDeviceData;\r\n    public static isMac: boolean;\r\n    public static isSafari: boolean;\r\n    public static isFirefox: boolean;\r\n}","import React, {useState} from 'react';\r\nimport './LabelControlPanel.scss';\r\nimport {updatePreventCustomCursorStatus} from \"../../../store/general/actionCreators\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\nimport classNames from \"classnames\";\r\nimport {LabelName, LabelPoint, LabelRect} from \"../../../store/labels/types\";\r\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\r\nimport {LabelActions} from \"../../../logic/actions/LabelActions\";\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport {LabelStatus} from \"../../../data/enums/LabelStatus\";\r\nimport {updateImageDataById} from \"../../../store/labels/actionCreators\";\r\nimport {findLast} from \"lodash\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\n\r\ninterface IProps {\r\n    position: IPoint;\r\n    updatePreventCustomCursorStatus: (preventCustomCursor: boolean) => any;\r\n    activeLabelId: string;\r\n    highlightedLabelId: string;\r\n    labelData: LabelRect | LabelPoint;\r\n    imageData: ImageData;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n}\r\n\r\nconst LabelControlPanel: React.FC<IProps> = ({position, updatePreventCustomCursorStatus, activeLabelId, highlightedLabelId, labelData, imageData, updateImageDataById}) => {\r\n    const [isActive, setIsActiveStatus] = useState(false);\r\n\r\n    const onMouseEnter = () => {\r\n        updatePreventCustomCursorStatus(true);\r\n        setIsActiveStatus(true);\r\n    };\r\n\r\n    const onMouseLeave = () => {\r\n        updatePreventCustomCursorStatus(false);\r\n        setIsActiveStatus(false);\r\n    };\r\n\r\n    const onAccept = () => {\r\n        const newImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\r\n                if (labelRect.id === labelData.id) {\r\n                    const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelRect.suggestedLabel});\r\n                    return {\r\n                        ...labelRect,\r\n                        status: LabelStatus.ACCEPTED,\r\n                        labelId: !!labelName ? labelName.id : labelRect.labelId\r\n                    }\r\n                } else {\r\n                    return labelRect\r\n                }\r\n            }),\r\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n                if (labelPoint.id === labelData.id) {\r\n                    const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelPoint.suggestedLabel});\r\n                    return {\r\n                        ...labelPoint,\r\n                        status: LabelStatus.ACCEPTED,\r\n                        labelId: !!labelName ? labelName.id : labelPoint.labelId\r\n                    }\r\n                } else {\r\n                    return labelPoint\r\n                }\r\n            })\r\n        };\r\n        updateImageDataById(imageData.id, newImageData);\r\n        updatePreventCustomCursorStatus(false);\r\n    };\r\n\r\n    const onReject = () => {\r\n        LabelActions.deleteImageLabelById(imageData.id, labelData.id);\r\n        updatePreventCustomCursorStatus(false);\r\n    };\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"LabelControlPanel\", {\r\n                \"is-active\": isPanelActive()\r\n            }\r\n        );\r\n    };\r\n\r\n    const isPanelActive = () => {\r\n        return isActive || labelData.id === activeLabelId || labelData.id === highlightedLabelId\r\n    };\r\n\r\n    return <div\r\n        className={getClassName()}\r\n        style={{top: position.y, left: position.x}}\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n    >\r\n        {isPanelActive() && <>\r\n            <ImageButton\r\n                image={\"ico/plus.png\"}\r\n                imageAlt={\"plus\"}\r\n                buttonSize={{width: 30, height: 30}}\r\n                padding={15}\r\n                onClick={onAccept}\r\n            />\r\n            <ImageButton\r\n                image={\"ico/trash.png\"}\r\n                imageAlt={\"trash\"}\r\n                buttonSize={{width: 30, height: 30}}\r\n                padding={15}\r\n                onClick={onReject}\r\n            />\r\n            {labelData.suggestedLabel && LabelActions.labelExistsInLabelNames(labelData.suggestedLabel) ?\r\n                <div className=\"SuggestedLabel\">\r\n                    {labelData.suggestedLabel}\r\n                </div> :\r\n                null\r\n            }\r\n        </>}\r\n    </div>\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updatePreventCustomCursorStatus,\r\n    updateImageDataById\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelId: state.labels.activeLabelId,\r\n    highlightedLabelId: state.labels.highlightedLabelId,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LabelControlPanel);","import {Action} from \"../Actions\";\r\nimport {AIActionTypes} from \"./types\";\r\n\r\nexport function updateSuggestedLabelList(labelList: string[]): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_SUGGESTED_LABEL_LIST,\r\n        payload: {\r\n            labelList,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateRejectedSuggestedLabelList(labelList: string[]): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_REJECTED_SUGGESTED_LABEL_LIST,\r\n        payload: {\r\n            labelList,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateObjectDetectorStatus(isObjectDetectorLoaded: boolean): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_OBJECT_DETECTOR_STATUS,\r\n        payload: {\r\n            isObjectDetectorLoaded,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updatePoseDetectorStatus(isPoseDetectorLoaded: boolean): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_POSE_DETECTOR_STATUS,\r\n        payload: {\r\n            isPoseDetectorLoaded,\r\n        }\r\n    }\r\n}\r\n\r\nexport function updateDisabledAIFlag(isAIDisabled: boolean): AIActionTypes {\r\n    return {\r\n        type: Action.UPDATE_DISABLED_AI_FLAG,\r\n        payload: {\r\n            isAIDisabled,\r\n        }\r\n    }\r\n}","import * as cocoSsd from '@tensorflow-models/coco-ssd';\r\nimport {DetectedObject, ObjectDetection} from '@tensorflow-models/coco-ssd';\r\nimport {store} from \"../index\";\r\nimport {updateObjectDetectorStatus} from \"../store/ai/actionCreators\";\r\nimport {LabelType} from \"../data/enums/LabelType\";\r\nimport {LabelsSelector} from \"../store/selectors/LabelsSelector\";\r\nimport {AIObjectDetectionActions} from \"../logic/actions/AIObjectDetectionActions\";\r\nimport {updateActiveLabelType} from \"../store/labels/actionCreators\";\r\n\r\nexport class ObjectDetector {\r\n    private static model: ObjectDetection;\r\n\r\n    public static loadModel(callback?: () => any) {\r\n        cocoSsd\r\n            .load()\r\n            .then((model: ObjectDetection) => {\r\n                ObjectDetector.model = model;\r\n                store.dispatch(updateObjectDetectorStatus(true));\r\n                store.dispatch(updateActiveLabelType(LabelType.RECT));\r\n                const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n                activeLabelType === LabelType.RECT && AIObjectDetectionActions.detectRectsForActiveImage();\r\n                callback && callback();\r\n            })\r\n            .catch((error) => {\r\n                // TODO\r\n                throw new Error(error);\r\n            })\r\n    }\r\n\r\n    public static predict(image: HTMLImageElement, callback?: (predictions: DetectedObject[]) => any) {\r\n        if (!ObjectDetector.model) return;\r\n\r\n        ObjectDetector.model\r\n            .detect(image)\r\n            .then((predictions: DetectedObject[]) => {\r\n                callback && callback(predictions)\r\n            })\r\n            .catch((error) => {\r\n                // TODO\r\n                throw new Error(error);\r\n            })\r\n    }\r\n}","import {DetectedObject} from \"@tensorflow-models/coco-ssd\";\r\nimport {ImageData, LabelName, LabelRect} from \"../../store/labels/types\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport uuidv4 from 'uuid/v4';\r\nimport {store} from \"../../index\";\r\nimport {updateImageDataById} from \"../../store/labels/actionCreators\";\r\nimport {ObjectDetector} from \"../../ai/ObjectDetector\";\r\nimport {ImageRepository} from \"../imageRepository/ImageRepository\";\r\nimport {LabelStatus} from \"../../data/enums/LabelStatus\";\r\nimport {findLast} from \"lodash\";\r\nimport {updateSuggestedLabelList} from \"../../store/ai/actionCreators\";\r\nimport {PopupWindowType} from \"../../data/enums/PopupWindowType\";\r\nimport {updateActivePopupType} from \"../../store/general/actionCreators\";\r\nimport {AISelector} from \"../../store/selectors/AISelector\";\r\nimport {AIActions} from \"./AIActions\";\r\n\r\nexport class AIObjectDetectionActions {\r\n    public static detectRectsForActiveImage(): void {\r\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\r\n        AIObjectDetectionActions.detectRects(activeImageData.id, ImageRepository.getById(activeImageData.id))\r\n    }\r\n\r\n    public static detectRects(imageId: string, image: HTMLImageElement): void {\r\n        if (LabelsSelector.getImageDataById(imageId).isVisitedByObjectDetector || !AISelector.isAIObjectDetectorModelLoaded())\r\n            return;\r\n\r\n        store.dispatch(updateActivePopupType(PopupWindowType.LOADER));\r\n        ObjectDetector.predict(image, (predictions: DetectedObject[]) => {\r\n            const suggestedLabelNames = AIObjectDetectionActions.extractNewSuggestedLabelNames(LabelsSelector.getLabelNames(), predictions);\r\n            const rejectedLabelNames = AISelector.getRejectedSuggestedLabelList();\r\n            const newlySuggestedNames = AIActions.excludeRejectedLabelNames(suggestedLabelNames, rejectedLabelNames);\r\n            if (newlySuggestedNames.length > 0) {\r\n                store.dispatch(updateSuggestedLabelList(newlySuggestedNames));\r\n                store.dispatch(updateActivePopupType(PopupWindowType.SUGGEST_LABEL_NAMES));\r\n            } else {\r\n                store.dispatch(updateActivePopupType(null));\r\n            }\r\n            AIObjectDetectionActions.saveRectPredictions(imageId, predictions);\r\n        })\r\n    }\r\n\r\n    public static saveRectPredictions(imageId: string, predictions: DetectedObject[]) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const predictedLabels: LabelRect[] = AIObjectDetectionActions.mapPredictionsToRectLabels(predictions);\r\n        const nextImageData: ImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.concat(predictedLabels),\r\n            isVisitedByObjectDetector: true\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, nextImageData));\r\n    }\r\n\r\n    private static mapPredictionsToRectLabels(predictions: DetectedObject[]): LabelRect[] {\r\n        return predictions.map((prediction: DetectedObject) => {\r\n            return {\r\n                id: uuidv4(),\r\n                labelIndex: null,\r\n                labelId: null,\r\n                rect: {\r\n                    x: prediction.bbox[0],\r\n                    y: prediction.bbox[1],\r\n                    width: prediction.bbox[2],\r\n                    height: prediction.bbox[3],\r\n                },\r\n                isCreatedByAI: true,\r\n                status: LabelStatus.UNDECIDED,\r\n                suggestedLabel: prediction.class\r\n            }\r\n        })\r\n    }\r\n\r\n    public static extractNewSuggestedLabelNames(labels: LabelName[], predictions: DetectedObject[]): string[] {\r\n        return predictions.reduce((acc: string[], prediction: DetectedObject) => {\r\n            if (!acc.includes(prediction.class) && !findLast(labels, {name: prediction.class})) {\r\n                acc.push(prediction.class)\r\n            }\r\n            return acc;\r\n        }, [])\r\n    }\r\n\r\n    public static acceptAllSuggestedRectLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\r\n                const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelRect.suggestedLabel});\r\n                return {\r\n                    ...labelRect,\r\n                    status: LabelStatus.ACCEPTED,\r\n                    labelId: !!labelName ? labelName.id : labelRect.labelId\r\n                }\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n\r\n    public static rejectAllSuggestedRectLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelRects: imageData.labelRects.filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n}","import * as posenet from '@tensorflow-models/posenet';\r\nimport {PoseNet} from \"@tensorflow-models/posenet\";\r\nimport {Pose} from \"@tensorflow-models/posenet\";\r\nimport {store} from \"../index\";\r\nimport {updatePoseDetectorStatus} from \"../store/ai/actionCreators\";\r\nimport {AIPoseDetectionActions} from \"../logic/actions/AIPoseDetectionActions\";\r\nimport {LabelType} from \"../data/enums/LabelType\";\r\nimport {LabelsSelector} from \"../store/selectors/LabelsSelector\";\r\nimport {updateActiveLabelType} from \"../store/labels/actionCreators\";\r\n\r\nexport class PoseDetector {\r\n    private static model: PoseNet;\r\n\r\n    public static loadModel(callback?: () => any) {\r\n        posenet\r\n            .load({\r\n                architecture: 'ResNet50',\r\n                outputStride: 32,\r\n                inputResolution: 257,\r\n                quantBytes: 2\r\n            })\r\n            .then((model: PoseNet) => {\r\n                PoseDetector.model = model;\r\n                store.dispatch(updatePoseDetectorStatus(true));\r\n                store.dispatch(updateActiveLabelType(LabelType.POINT));\r\n                const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n                activeLabelType === LabelType.POINT && AIPoseDetectionActions.detectPoseForActiveImage();\r\n                callback && callback();\r\n            })\r\n            .catch((error) => {\r\n                // TODO\r\n                throw new Error(error);\r\n            })\r\n    }\r\n\r\n    public static predict(image: HTMLImageElement, callback?: (predictions: Pose[]) => any) {\r\n        if (!PoseDetector.model) return;\r\n\r\n        PoseDetector.model\r\n            .estimateMultiplePoses(image)\r\n            .then((predictions: Pose[]) => {\r\n                callback && callback(predictions)\r\n            })\r\n            .catch((error) => {\r\n                // TODO\r\n                throw new Error(error);\r\n            })\r\n    }\r\n}","import {PoseDetector} from \"../../ai/PoseDetector\";\r\nimport {Keypoint, Pose} from \"@tensorflow-models/posenet\";\r\nimport {ImageData, LabelName, LabelPoint} from \"../../store/labels/types\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {ImageRepository} from \"../imageRepository/ImageRepository\";\r\nimport {LabelStatus} from \"../../data/enums/LabelStatus\";\r\nimport uuidv4 from 'uuid/v4';\r\nimport {store} from \"../../index\";\r\nimport {updateImageDataById} from \"../../store/labels/actionCreators\";\r\nimport {findLast} from \"lodash\";\r\nimport {AISelector} from \"../../store/selectors/AISelector\";\r\nimport {AIActions} from \"./AIActions\";\r\nimport {updateSuggestedLabelList} from \"../../store/ai/actionCreators\";\r\nimport {updateActivePopupType} from \"../../store/general/actionCreators\";\r\nimport {PopupWindowType} from \"../../data/enums/PopupWindowType\";\r\nimport {NumberUtil} from \"../../utils/NumberUtil\";\r\n\r\nexport class AIPoseDetectionActions {\r\n    public static detectPoseForActiveImage(): void {\r\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\r\n        AIPoseDetectionActions.detectPoses(activeImageData.id, ImageRepository.getById(activeImageData.id))\r\n    }\r\n\r\n    public static detectPoses(imageId: string, image: HTMLImageElement): void {\r\n        if (LabelsSelector.getImageDataById(imageId).isVisitedByPoseDetector || !AISelector.isAIPoseDetectorModelLoaded())\r\n            return;\r\n\r\n        store.dispatch(updateActivePopupType(PopupWindowType.LOADER));\r\n        PoseDetector.predict(image, (poses: Pose[]) => {\r\n            const suggestedLabelNames = AIPoseDetectionActions.extractNewSuggestedLabelNames(LabelsSelector.getLabelNames(), poses);\r\n            const rejectedLabelNames = AISelector.getRejectedSuggestedLabelList();\r\n            const newlySuggestedNames = AIActions.excludeRejectedLabelNames(suggestedLabelNames, rejectedLabelNames);\r\n            if (newlySuggestedNames.length > 0) {\r\n                store.dispatch(updateSuggestedLabelList(newlySuggestedNames));\r\n                store.dispatch(updateActivePopupType(PopupWindowType.SUGGEST_LABEL_NAMES));\r\n            } else {\r\n                store.dispatch(updateActivePopupType(null));\r\n            }\r\n            AIPoseDetectionActions.savePosePredictions(imageId, poses, image);\r\n        })\r\n    }\r\n\r\n    public static savePosePredictions(imageId: string, predictions: Pose[], image: HTMLImageElement) {\r\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\r\n        const predictedLabels: LabelPoint[] = AIPoseDetectionActions\r\n            .mapPredictionsToPointLabels(predictions)\r\n            .filter((labelPoint: LabelPoint) => NumberUtil.isValueInRange(labelPoint.point.x, 0, image.width))\r\n            .filter((labelPoint: LabelPoint) => NumberUtil.isValueInRange(labelPoint.point.y, 0, image.height))\r\n        const nextImageData: ImageData = {\r\n            ...imageData,\r\n            labelPoints: imageData.labelPoints.concat(predictedLabels),\r\n            isVisitedByPoseDetector: true\r\n        };\r\n        store.dispatch(updateImageDataById(imageData.id, nextImageData));\r\n    }\r\n\r\n    private static mapPredictionsToPointLabels(predictions: Pose[]): LabelPoint[] {\r\n        return predictions\r\n            .map((prediction: Pose) => {\r\n                return prediction.keypoints\r\n                    .map((keypoint: Keypoint) => {\r\n                        return {\r\n                            id: uuidv4(),\r\n                            labelIndex: null,\r\n                            labelId: null,\r\n                            point: {\r\n                                x: keypoint.position.x,\r\n                                y: keypoint.position.y\r\n                            },\r\n                            isCreatedByAI: true,\r\n                            status: LabelStatus.UNDECIDED,\r\n                            suggestedLabel: keypoint.part\r\n                        }\r\n                    })\r\n            })\r\n            .reduce((acc: LabelPoint[], item: LabelPoint[]) => {\r\n                return acc.concat(item);\r\n            }, [])\r\n    }\r\n\r\n    public static extractNewSuggestedLabelNames(labels: LabelName[], predictions: Pose[]): string[] {\r\n        return predictions\r\n            .map((pose: Pose) => pose.keypoints)\r\n            .reduce((acc: Keypoint[], item: Keypoint[]) => {\r\n                return acc.concat(item);\r\n            }, [])\r\n            .map((keypoint: Keypoint) => keypoint.part)\r\n            .reduce((acc: string[], name: string) => {\r\n                if (!acc.includes(name) && !findLast(labels, {name: name})) {\r\n                    acc.push(name)\r\n                }\r\n                return acc;\r\n            }, [])\r\n    }\r\n\r\n    public static acceptAllSuggestedPointLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n                const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelPoint.suggestedLabel});\r\n                return {\r\n                    ...labelPoint,\r\n                    status: LabelStatus.ACCEPTED,\r\n                    labelId: !!labelName ? labelName.id : labelPoint.labelId\r\n                }\r\n            })\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n\r\n    public static rejectAllSuggestedPointLabels(imageData: ImageData) {\r\n        const newImageData: ImageData = {\r\n            ...imageData,\r\n            labelPoints: imageData.labelPoints.filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED)\r\n        };\r\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\r\n    }\r\n}","import {LabelType} from \"../../data/enums/LabelType\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {AIObjectDetectionActions} from \"./AIObjectDetectionActions\";\r\nimport {AIPoseDetectionActions} from \"./AIPoseDetectionActions\";\r\nimport {ImageData} from \"../../store/labels/types\";\r\n\r\nexport class AIActions {\r\n    public static excludeRejectedLabelNames(suggestedLabels: string[], rejectedLabels: string[]): string[] {\r\n        return suggestedLabels.reduce((acc: string[], label: string) => {\r\n            if (!rejectedLabels.includes(label)) {\r\n                acc.push(label)\r\n            }\r\n            return acc;\r\n        }, [])\r\n    }\r\n\r\n    public static detect(imageId: string, image: HTMLImageElement): void {\r\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n\r\n        switch (activeLabelType) {\r\n            case LabelType.RECT:\r\n                AIObjectDetectionActions.detectRects(imageId, image);\r\n                break;\r\n            case LabelType.POINT:\r\n                AIPoseDetectionActions.detectPoses(imageId, image);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static rejectAllSuggestedLabels(imageData: ImageData) {\r\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n\r\n        switch (activeLabelType) {\r\n            case LabelType.RECT:\r\n                AIObjectDetectionActions.rejectAllSuggestedRectLabels(imageData);\r\n                break;\r\n            case LabelType.POINT:\r\n                AIPoseDetectionActions.rejectAllSuggestedPointLabels(imageData);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static acceptAllSuggestedLabels(imageData: ImageData) {\r\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\r\n        switch (activeLabelType) {\r\n            case LabelType.RECT:\r\n                AIObjectDetectionActions.acceptAllSuggestedRectLabels(imageData);\r\n                break;\r\n            case LabelType.POINT:\r\n                AIPoseDetectionActions.acceptAllSuggestedPointLabels(imageData);\r\n                break;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport './Editor.scss';\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {ImageData, LabelPoint, LabelRect} from \"../../../store/labels/types\";\r\nimport {FileUtil} from \"../../../utils/FileUtil\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {updateImageDataById} from \"../../../store/labels/actionCreators\";\r\nimport {ImageRepository} from \"../../../logic/imageRepository/ImageRepository\";\r\nimport {LabelType} from \"../../../data/enums/LabelType\";\r\nimport {PopupWindowType} from \"../../../data/enums/PopupWindowType\";\r\nimport {CanvasUtil} from \"../../../utils/CanvasUtil\";\r\nimport {CustomCursorStyle} from \"../../../data/enums/CustomCursorStyle\";\r\nimport {ImageLoadManager} from \"../../../logic/imageRepository/ImageLoadManager\";\r\nimport {EventType} from \"../../../data/enums/EventType\";\r\nimport {EditorData} from \"../../../data/EditorData\";\r\nimport {EditorModel} from \"../../../staticModels/EditorModel\";\r\nimport {EditorActions} from \"../../../logic/actions/EditorActions\";\r\nimport {EditorUtil} from \"../../../utils/EditorUtil\";\r\nimport {ContextManager} from \"../../../logic/context/ContextManager\";\r\nimport {ContextType} from \"../../../data/enums/ContextType\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ViewPortActions} from \"../../../logic/actions/ViewPortActions\";\r\nimport {PlatformModel} from \"../../../staticModels/PlatformModel\";\r\nimport LabelControlPanel from \"../LabelControlPanel/LabelControlPanel\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\nimport {RenderEngineUtil} from \"../../../utils/RenderEngineUtil\";\r\nimport {LabelStatus} from \"../../../data/enums/LabelStatus\";\r\nimport {isEqual} from \"lodash\";\r\nimport {AIActions} from \"../../../logic/actions/AIActions\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    activeLabelType: LabelType;\r\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\r\n    activePopupType: PopupWindowType;\r\n    activeLabelId: string;\r\n    customCursorStyle: CustomCursorStyle;\r\n    imageDragMode: boolean;\r\n    zoom: number;\r\n}\r\n\r\ninterface IState {\r\n    viewPortSize: ISize\r\n}\r\n\r\nclass Editor extends React.Component<IProps, IState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            viewPortSize: {\r\n                width: 0,\r\n                height: 0\r\n            },\r\n        };\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // LIFE CYCLE\r\n    // =================================================================================================================\r\n\r\n    public componentDidMount(): void {\r\n        this.mountEventListeners();\r\n\r\n        const {imageData, activeLabelType} = this.props;\r\n\r\n        ContextManager.switchCtx(ContextType.EDITOR);\r\n        EditorActions.mountRenderEnginesAndHelpers(activeLabelType);\r\n        ImageLoadManager.addAndRun(this.loadImage(imageData));\r\n        ViewPortActions.resizeCanvas(this.props.size);\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unmountEventListeners();\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        const {imageData, activeLabelType} = this.props;\r\n\r\n        prevProps.imageData.id !== imageData.id && ImageLoadManager.addAndRun(this.loadImage(imageData));\r\n\r\n        if (prevProps.activeLabelType !== activeLabelType) {\r\n            EditorActions.swapSupportRenderingEngine(activeLabelType);\r\n            AIActions.detect(imageData.id, ImageRepository.getById(imageData.id));\r\n        }\r\n\r\n        this.updateModelAndRender();\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // EVENT HANDLERS\r\n    // =================================================================================================================\r\n\r\n    private mountEventListeners() {\r\n        window.addEventListener(EventType.MOUSE_MOVE, this.update);\r\n        window.addEventListener(EventType.MOUSE_UP, this.update);\r\n        EditorModel.canvas.addEventListener(EventType.MOUSE_DOWN, this.update);\r\n        EditorModel.canvas.addEventListener(EventType.MOUSE_WHEEL, this.handleZoom);\r\n    }\r\n\r\n    private unmountEventListeners() {\r\n        window.removeEventListener(EventType.MOUSE_MOVE, this.update);\r\n        window.removeEventListener(EventType.MOUSE_UP, this.update);\r\n        EditorModel.canvas.removeEventListener(EventType.MOUSE_DOWN, this.update);\r\n        EditorModel.canvas.removeEventListener(EventType.MOUSE_WHEEL, this.handleZoom);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    // LOAD IMAGE\r\n    // =================================================================================================================\r\n\r\n    private loadImage = async (imageData: ImageData): Promise<any> => {\r\n        if (imageData.loadStatus) {\r\n            EditorActions.setActiveImage(ImageRepository.getById(imageData.id));\r\n            AIActions.detect(imageData.id, ImageRepository.getById(imageData.id));\r\n            this.updateModelAndRender()\r\n        }\r\n        else {\r\n            if (!EditorModel.isLoading) {\r\n                EditorActions.setLoadingStatus(true);\r\n                const saveLoadedImagePartial = (image: HTMLImageElement) => this.saveLoadedImage(image, imageData);\r\n                FileUtil.loadImage(imageData.fileName)\r\n                    .then((image:HTMLImageElement) => saveLoadedImagePartial(image))\r\n                    .catch((error) => this.handleLoadImageError())\r\n            }\r\n        }\r\n    };\r\n\r\n    private saveLoadedImage = (image: HTMLImageElement, imageData: ImageData) => {\r\n        imageData.loadStatus = true;\r\n        this.props.updateImageDataById(imageData.id, imageData);\r\n        ImageRepository.storeImage(imageData.id, image);\r\n        EditorActions.setActiveImage(image);\r\n        AIActions.detect(imageData.id, image);\r\n        EditorActions.setLoadingStatus(false);\r\n        this.updateModelAndRender()\r\n    };\r\n\r\n    private handleLoadImageError = () => {};\r\n\r\n    // =================================================================================================================\r\n    // HELPER METHODS\r\n    // =================================================================================================================\r\n\r\n    private updateModelAndRender = () => {\r\n        ViewPortActions.updateViewPortSize();\r\n        ViewPortActions.updateDefaultViewPortImageRect();\r\n        ViewPortActions.resizeViewPortContent();\r\n        EditorActions.fullRender();\r\n    };\r\n\r\n    private update = (event: MouseEvent) => {\r\n        const editorData: EditorData = EditorActions.getEditorData(event);\r\n        EditorModel.mousePositionOnViewPortContent = CanvasUtil.getMousePositionOnCanvasFromEvent(event, EditorModel.canvas);\r\n        EditorModel.primaryRenderingEngine.update(editorData);\r\n\r\n        if (this.props.imageDragMode) {\r\n            EditorModel.viewPortHelper.update(editorData);\r\n        } else {\r\n            EditorModel.supportRenderingEngine && EditorModel.supportRenderingEngine.update(editorData);\r\n        }\r\n\r\n        !this.props.activePopupType && EditorActions.updateMousePositionIndicator(event);\r\n        EditorActions.fullRender();\r\n    };\r\n\r\n    private handleZoom = (event: MouseWheelEvent) => {\r\n        if (event.ctrlKey || (PlatformModel.isMac && event.metaKey)) {\r\n            const scrollSign: number = Math.sign(event.deltaY);\r\n            if ((PlatformModel.isMac && scrollSign === -1) || (!PlatformModel.isMac && scrollSign === 1)) {\r\n                ViewPortActions.zoomOut();\r\n            }\r\n            else if ((PlatformModel.isMac && scrollSign === 1) || (!PlatformModel.isMac && scrollSign === -1)) {\r\n                ViewPortActions.zoomIn();\r\n            }\r\n        }\r\n        EditorModel.mousePositionOnViewPortContent = CanvasUtil.getMousePositionOnCanvasFromEvent(event, EditorModel.canvas);\r\n    };\r\n\r\n    private getOptionsPanels = () => {\r\n        const editorData: EditorData = EditorActions.getEditorData();\r\n        if (this.props.activeLabelType === LabelType.RECT) {\r\n            return this.props.imageData.labelRects\r\n                .filter((labelRect: LabelRect) => labelRect.isCreatedByAI && labelRect.status !== LabelStatus.ACCEPTED)\r\n                .map((labelRect: LabelRect) => {\r\n                    const positionOnImage: IPoint = {x: labelRect.rect.x, y: labelRect.rect.y};\r\n                    const positionOnViewPort: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(positionOnImage, editorData);\r\n                    return <LabelControlPanel\r\n                        position={positionOnViewPort}\r\n                        labelData={labelRect}\r\n                        imageData={this.props.imageData}\r\n                        key={labelRect.id}\r\n                    />\r\n                })\r\n        }\r\n        else if (this.props.activeLabelType === LabelType.POINT) {\r\n            return this.props.imageData.labelPoints\r\n                .filter((labelPoint: LabelPoint) => labelPoint.isCreatedByAI && labelPoint.status !== LabelStatus.ACCEPTED)\r\n                .map((labelPoint: LabelPoint) => {\r\n                    const positionOnImage: IPoint = {x: labelPoint.point.x, y: labelPoint.point.y};\r\n                    const positionOnViewPort: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(positionOnImage, editorData);\r\n                    return <LabelControlPanel\r\n                        position={positionOnViewPort}\r\n                        labelData={labelPoint}\r\n                        imageData={this.props.imageData}\r\n                        key={labelPoint.id}\r\n                    />\r\n                })\r\n        }\r\n        else return null;\r\n    };\r\n\r\n    private onScrollbarsUpdate = (scrollbarContent)=>{\r\n        let newViewPortContentSize = {\r\n            width: scrollbarContent.scrollWidth,\r\n            height: scrollbarContent.scrollHeight\r\n        };\r\n        if(!isEqual(newViewPortContentSize, this.state.viewPortSize)) {\r\n            this.setState({viewPortSize: newViewPortContentSize})\r\n        }\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <div\r\n                className=\"Editor\"\r\n                ref={ref => EditorModel.editor = ref}\r\n                draggable={false}\r\n            >\r\n                <Scrollbars\r\n                    ref={ref => EditorModel.viewPortScrollbars = ref}\r\n                    renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\"/>}\r\n                    renderTrackVertical={props => <div {...props} className=\"track-vertical\"/>}\r\n                    onUpdate={this.onScrollbarsUpdate}\r\n                >\r\n                    <div\r\n                        className=\"ViewPortContent\"\r\n                    >\r\n                        <canvas\r\n                            className=\"ImageCanvas\"\r\n                            ref={ref => EditorModel.canvas = ref}\r\n                            draggable={false}\r\n                            onContextMenu={(event: React.MouseEvent<HTMLCanvasElement>) => event.preventDefault()}\r\n                        />\r\n                        {this.getOptionsPanels()}\r\n                    </div>\r\n                </Scrollbars>\r\n                <div\r\n                    className=\"MousePositionIndicator\"\r\n                    ref={ref => EditorModel.mousePositionIndicator = ref}\r\n                    draggable={false}\r\n                />\r\n                <div\r\n                    className={EditorUtil.getCursorStyle(this.props.customCursorStyle)}\r\n                    ref={ref => EditorModel.cursor = ref}\r\n                    draggable={false}\r\n                >\r\n                    <img\r\n                        draggable={false}\r\n                        alt={\"indicator\"}\r\n                        src={EditorUtil.getIndicator(this.props.customCursorStyle)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDataById\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelType: state.labels.activeLabelType,\r\n    activePopupType: state.general.activePopupType,\r\n    activeLabelId: state.labels.activeLabelId,\r\n    customCursorStyle: state.general.customCursorStyle,\r\n    imageDragMode: state.general.imageDragMode,\r\n    zoom: state.general.zoom\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Editor);","import React from 'react';\r\nimport './EditorBottomNavigationBar.scss';\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {ContextType} from \"../../../data/enums/ContextType\";\r\nimport classNames from \"classnames\";\r\nimport {ImageActions} from \"../../../logic/actions/ImageActions\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n    imageData: ImageData;\r\n    totalImageCount: number;\r\n    activeImageIndex: number;\r\n    activeContext: ContextType;\r\n}\r\n\r\nconst EditorBottomNavigationBar: React.FC<IProps> = ({size, imageData, totalImageCount, activeImageIndex, activeContext}) => {\r\n    const minWidth:number = 400;\r\n\r\n    const getImageCounter = () => {\r\n        return (activeImageIndex + 1) + \" / \" + totalImageCount;\r\n    };\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"EditorBottomNavigationBar\",\r\n            {\r\n                \"with-context\": activeContext === ContextType.EDITOR\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={getClassName()}>\r\n            <ImageButton\r\n                image={\"ico/left.png\"}\r\n                imageAlt={\"previous\"}\r\n                buttonSize={{width: 25, height: 25}}\r\n                onClick={() => ImageActions.getPreviousImage()}\r\n                isDisabled={activeImageIndex === 0}\r\n                externalClassName={\"left\"}\r\n            />\r\n            {size.width > minWidth ?\r\n                <div className=\"CurrentImageName\"> {imageData.fileName} </div> :\r\n                <div className=\"CurrentImageCount\"> {getImageCounter()} </div>\r\n            }\r\n            <ImageButton\r\n                image={\"ico/right.png\"}\r\n                imageAlt={\"next\"}\r\n                buttonSize={{width: 25, height: 25}}\r\n                onClick={() => ImageActions.getNextImage()}\r\n                isDisabled={activeImageIndex === totalImageCount - 1}\r\n                externalClassName={\"right\"}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeImageIndex: state.labels.activeImageIndex,\r\n    activeContext: state.general.activeContext\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EditorBottomNavigationBar);\r\n","import {ContextType} from \"../../../data/enums/ContextType\";\r\nimport './EditorTopNavigationBar.scss';\r\nimport React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {updateCrossHairVisibleStatus, updateImageDragModeStatus} from \"../../../store/general/actionCreators\";\r\nimport {GeneralSelector} from \"../../../store/selectors/GeneralSelector\";\r\nimport {ViewPointSettings} from \"../../../settings/ViewPointSettings\";\r\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\r\nimport {ViewPortActions} from \"../../../logic/actions/ViewPortActions\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\nimport {LabelType} from \"../../../data/enums/LabelType\";\r\nimport {AISelector} from \"../../../store/selectors/AISelector\";\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {AIActions} from \"../../../logic/actions/AIActions\";\r\n\r\ninterface IProps {\r\n    activeContext: ContextType;\r\n    updateImageDragModeStatus: (imageDragMode: boolean) => any;\r\n    updateCrossHairVisibleStatus: (crossHairVisible: boolean) => any;\r\n    imageDragMode: boolean;\r\n    crossHairVisible: boolean;\r\n    activeLabelType: LabelType;\r\n}\r\n\r\nconst EditorTopNavigationBar: React.FC<IProps> = (\r\n    {\r\n        activeContext,\r\n        updateImageDragModeStatus,\r\n        updateCrossHairVisibleStatus,\r\n        imageDragMode,\r\n        crossHairVisible,\r\n        activeLabelType\r\n    }) => {\r\n    const buttonSize: ISize = {width: 30, height: 30};\r\n    const buttonPadding: number = 10;\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"EditorTopNavigationBar\",\r\n            {\r\n                \"with-context\": activeContext === ContextType.EDITOR\r\n            }\r\n        );\r\n    };\r\n\r\n    const imageDragOnClick = () => {\r\n        if (imageDragMode) {\r\n            updateImageDragModeStatus(!imageDragMode);\r\n        }\r\n        else if (GeneralSelector.getZoom() !== ViewPointSettings.MIN_ZOOM) {\r\n            updateImageDragModeStatus(!imageDragMode);\r\n        }\r\n    };\r\n\r\n    const crossHairOnClick = () => {\r\n        updateCrossHairVisibleStatus(!crossHairVisible);\r\n    }\r\n\r\n    return (\r\n        <div className={getClassName()}>\r\n            <div className=\"ButtonWrapper\">\r\n                <ImageButton\r\n                    image={\"ico/zoom-in.png\"}\r\n                    imageAlt={\"zoom-in\"}\r\n                    buttonSize={buttonSize}\r\n                    padding={buttonPadding}\r\n                    onClick={() => ViewPortActions.zoomIn()}\r\n                />\r\n                <ImageButton\r\n                    image={\"ico/zoom-out.png\"}\r\n                    imageAlt={\"zoom-out\"}\r\n                    buttonSize={buttonSize}\r\n                    padding={buttonPadding}\r\n                    onClick={() => ViewPortActions.zoomOut()}\r\n                />\r\n                <ImageButton\r\n                    image={\"ico/zoom-fit.png\"}\r\n                    imageAlt={\"zoom-fit\"}\r\n                    buttonSize={buttonSize}\r\n                    padding={buttonPadding}\r\n                    onClick={() => ViewPortActions.setDefaultZoom()}\r\n                />\r\n                <ImageButton\r\n                    image={\"ico/zoom-max.png\"}\r\n                    imageAlt={\"zoom-max\"}\r\n                    buttonSize={buttonSize}\r\n                    padding={buttonPadding}\r\n                    onClick={() => ViewPortActions.setOneForOneZoom()}\r\n                />\r\n            </div>\r\n            <div className=\"ButtonWrapper\">\r\n                <ImageButton\r\n                    image={\"ico/hand.png\"}\r\n                    imageAlt={\"hand\"}\r\n                    buttonSize={buttonSize}\r\n                    padding={buttonPadding}\r\n                    onClick={imageDragOnClick}\r\n                    isActive={imageDragMode}\r\n                />\r\n                <ImageButton\r\n                    image={\"ico/cross-hair.png\"}\r\n                    imageAlt={\"cross-hair\"}\r\n                    buttonSize={buttonSize}\r\n                    padding={buttonPadding}\r\n                    onClick={crossHairOnClick}\r\n                    isActive={crossHairVisible}\r\n                />\r\n            </div>\r\n            {((activeLabelType === LabelType.RECT && AISelector.isAIObjectDetectorModelLoaded()) ||\r\n                (activeLabelType === LabelType.POINT && AISelector.isAIPoseDetectorModelLoaded())) && <div className=\"ButtonWrapper\">\r\n                <ImageButton\r\n                    image={\"ico/accept-all.png\"}\r\n                    imageAlt={\"accept-all\"}\r\n                    buttonSize={buttonSize}\r\n                    padding={buttonPadding}\r\n                    onClick={() => AIActions.acceptAllSuggestedLabels(LabelsSelector.getActiveImageData())}\r\n                />\r\n                <ImageButton\r\n                    image={\"ico/reject-all.png\"}\r\n                    imageAlt={\"reject-all\"}\r\n                    buttonSize={buttonSize}\r\n                    padding={buttonPadding}\r\n                    onClick={() => AIActions.rejectAllSuggestedLabels(LabelsSelector.getActiveImageData())}\r\n                />\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageDragModeStatus,\r\n    updateCrossHairVisibleStatus\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeContext: state.general.activeContext,\r\n    imageDragMode: state.general.imageDragMode,\r\n    crossHairVisible: state.general.crossHairVisible,\r\n    activeLabelType: state.labels.activeLabelType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EditorTopNavigationBar);","import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Direction} from \"../../../data/enums/Direction\";\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {Settings} from \"../../../settings/Settings\";\r\nimport {AppState} from \"../../../store\";\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport ImagesList from \"../SideNavigationBar/ImagesList/ImagesList\";\r\nimport LabelsToolkit from \"../SideNavigationBar/LabelsToolkit/LabelsToolkit\";\r\nimport {SideNavigationBar} from \"../SideNavigationBar/SideNavigationBar\";\r\nimport {VerticalEditorButton} from \"../VerticalEditorButton/VerticalEditorButton\";\r\nimport './EditorContainer.scss';\r\nimport Editor from \"../Editor/Editor\";\r\nimport {ContextManager} from \"../../../logic/context/ContextManager\";\r\nimport {ContextType} from \"../../../data/enums/ContextType\";\r\nimport EditorBottomNavigationBar from \"../EditorBottomNavigationBar/EditorBottomNavigationBar\";\r\nimport EditorTopNavigationBar from \"../EditorTopNavigationBar/EditorTopNavigationBar\";\r\nimport {ProjectType} from \"../../../data/enums/ProjectType\";\r\n\r\ninterface IProps {\r\n    windowSize: ISize;\r\n    activeImageIndex: number;\r\n    imagesData: ImageData[];\r\n    activeContext: ContextType;\r\n    projectType: ProjectType;\r\n}\r\n\r\nconst EditorContainer: React.FC<IProps> = (\r\n    {\r\n        windowSize,\r\n        activeImageIndex,\r\n        imagesData,\r\n        activeContext,\r\n        projectType\r\n    }) => {\r\n    const [leftTabStatus, setLeftTabStatus] = useState(true);\r\n    const [rightTabStatus, setRightTabStatus] = useState(true);\r\n\r\n    const calculateEditorSize = (): ISize => {\r\n        if (windowSize) {\r\n            const leftTabWidth = leftTabStatus ? Settings.SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX : Settings.SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX;\r\n            const rightTabWidth = rightTabStatus ? Settings.SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX : Settings.SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX;\r\n            return {\r\n                width: windowSize.width - leftTabWidth - rightTabWidth,\r\n                height: windowSize.height - Settings.TOP_NAVIGATION_BAR_HEIGHT_PX\r\n                    - Settings.EDITOR_BOTTOM_NAVIGATION_BAR_HEIGHT_PX - Settings.EDITOR_TOP_NAVIGATION_BAR_HEIGHT_PX,\r\n            }\r\n        }\r\n        else\r\n            return null;\r\n    };\r\n\r\n    const leftSideBarButtonOnClick = () => {\r\n        if (!leftTabStatus)\r\n            ContextManager.switchCtx(ContextType.LEFT_NAVBAR);\r\n        else if (leftTabStatus && activeContext === ContextType.LEFT_NAVBAR)\r\n            ContextManager.restoreCtx();\r\n\r\n        setLeftTabStatus(!leftTabStatus);\r\n    };\r\n\r\n    const leftSideBarCompanionRender = () => {\r\n        return <>\r\n            <VerticalEditorButton\r\n                label=\"Images\"\r\n                image={\"/ico/camera.png\"}\r\n                imageAlt={\"images\"}\r\n                onClick={leftSideBarButtonOnClick}\r\n                isActive={leftTabStatus}\r\n            />\r\n        </>\r\n    };\r\n\r\n    const leftSideBarRender = () => {\r\n        return <ImagesList/>\r\n    };\r\n\r\n    const rightSideBarButtonOnClick = () => {\r\n        if (!rightTabStatus)\r\n            ContextManager.switchCtx(ContextType.RIGHT_NAVBAR);\r\n        else if (rightTabStatus && activeContext === ContextType.RIGHT_NAVBAR)\r\n            ContextManager.restoreCtx();\r\n\r\n        setRightTabStatus(!rightTabStatus);\r\n    };\r\n\r\n    const rightSideBarCompanionRender = () => {\r\n        return <>\r\n            <VerticalEditorButton\r\n                label=\"Labels\"\r\n                image={\"/ico/tags.png\"}\r\n                imageAlt={\"labels\"}\r\n                onClick={rightSideBarButtonOnClick}\r\n                isActive={rightTabStatus}\r\n            />\r\n        </>\r\n    };\r\n\r\n    const rightSideBarRender = () => {\r\n        return <LabelsToolkit/>\r\n    };\r\n\r\n    return (\r\n        <div className=\"EditorContainer\">\r\n            <SideNavigationBar\r\n                direction={Direction.LEFT}\r\n                isOpen={leftTabStatus}\r\n                isWithContext={activeContext === ContextType.LEFT_NAVBAR}\r\n                renderCompanion={leftSideBarCompanionRender}\r\n                renderContent={leftSideBarRender}\r\n                key=\"left-side-navigation-bar\"\r\n            />\r\n            <div className=\"EditorWrapper\"\r\n                onMouseDown={() => ContextManager.switchCtx(ContextType.EDITOR)}\r\n                 key=\"editor-wrapper\"\r\n            >\r\n                {projectType === ProjectType.OBJECT_DETECTION && <EditorTopNavigationBar\r\n                    key=\"editor-top-navigation-bar\"\r\n                />}\r\n                <Editor\r\n                    size={calculateEditorSize()}\r\n                    imageData={imagesData[activeImageIndex]}\r\n                    key=\"editor\"\r\n                />\r\n                <EditorBottomNavigationBar\r\n                    imageData={imagesData[activeImageIndex]}\r\n                    size={calculateEditorSize()}\r\n                    totalImageCount={imagesData.length}\r\n                    key=\"editor-bottom-navigation-bar\"\r\n                />\r\n            </div>\r\n            <SideNavigationBar\r\n                direction={Direction.RIGHT}\r\n                isOpen={rightTabStatus}\r\n                isWithContext={activeContext === ContextType.RIGHT_NAVBAR}\r\n                renderCompanion={rightSideBarCompanionRender}\r\n                renderContent={rightSideBarRender}\r\n                key=\"right-side-navigation-bar\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    windowSize: state.general.windowSize,\r\n    activeImageIndex: state.labels.activeImageIndex,\r\n    imagesData: state.labels.imagesData,\r\n    activeContext: state.general.activeContext,\r\n    projectType: state.general.projectData.type\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(EditorContainer);","import React from 'react';\r\nimport './StateBar.scss';\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {LabelType} from \"../../../data/enums/LabelType\";\r\n\r\ninterface IProps {\r\n    imagesData: ImageData[];\r\n    activeLabelType: LabelType;\r\n}\r\n\r\nconst StateBar: React.FC<IProps> = ({imagesData, activeLabelType}) => {\r\n\r\n    const pointLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelPoints.length > 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const rectLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelRects.length > 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const polygonLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelPolygons.length > 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const lineLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelLines.length > 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const tagLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\r\n        return currentCount + (currentImage.labelNameIds.length !== 0 ? 1 : 0);\r\n    }, 0);\r\n\r\n    const getProgress = () => {\r\n        switch (activeLabelType) {\r\n            case LabelType.POINT:\r\n                return (100 * pointLabeledImages) / imagesData.length;\r\n            case LabelType.RECT:\r\n                return (100 * rectLabeledImages) / imagesData.length;\r\n            case LabelType.POLYGON:\r\n                return (100 * polygonLabeledImages) / imagesData.length;\r\n            case LabelType.LINE:\r\n                return (100 * lineLabeledImages) / imagesData.length;\r\n            case LabelType.IMAGE_RECOGNITION:\r\n                return (100 * tagLabeledImages) / imagesData.length;\r\n            default:\r\n                return 0;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"StateBar\">\r\n            <div\r\n                style={{width: getProgress() + \"%\"}}\r\n                className=\"done\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    imagesData: state.labels.imagesData,\r\n    activeLabelType: state.labels.activeLabelType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(StateBar);","import { updateActivePopupType } from \"../../store/general/actionCreators\";\r\nimport { PopupWindowType } from \"../enums/PopupWindowType\";\r\nimport { store } from \"../../index\";\r\n\r\nexport type DropDownMenuNode = {\r\n    name: string\r\n    description?: string\r\n    imageSrc: string\r\n    imageAlt: string\r\n    disabled: boolean\r\n    onClick?: () => void\r\n    children?: DropDownMenuNode[]\r\n}\r\n\r\nexport const DropDownMenuData: DropDownMenuNode[] = [\r\n    {\r\n        name: \"Actions\",\r\n        imageSrc: \"ico/actions.png\",\r\n        imageAlt: \"actions\",\r\n        disabled: false,\r\n        children: [\r\n            // {\r\n            //     name: \"Edit Labels\",\r\n            //     description: \"Modify labels list\",\r\n            //     imageSrc: \"ico/tags.png\",\r\n            //     imageAlt: \"labels\",\r\n            //     disabled: false,\r\n            //     onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.UPDATE_LABEL))\r\n            // },\r\n            // {\r\n            //     name: \"Upload Labels\",\r\n            //     description: \"Uploads labels.txt file\",\r\n            //     imageSrc: \"ico/tags.png\",\r\n            //     imageAlt: \"labels\",\r\n            //     disabled: false,\r\n            //     onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.LOAD_LABEL_NAMES))\r\n            // },\r\n            {\r\n                name: \"Import Annotations\",\r\n                description: \"Import annotations from file\",\r\n                imageSrc: \"ico/import-labels.png\",\r\n                imageAlt: \"import-labels\",\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.IMPORT_ANNOTATIONS))\r\n            },\r\n            {\r\n                name: \"Export Annotations\",\r\n                description: \"Export annotations to file\",\r\n                imageSrc: \"ico/export-labels.png\",\r\n                imageAlt: \"export-labels\",\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.EXPORT_ANNOTATIONS))\r\n            },\r\n            {\r\n                name: \"Upload Annotations\",\r\n                description: \"Upload annotation files\",\r\n                imageSrc: \"ico/upload.png\",\r\n                imageAlt: \"import-labels\",\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.UPLOAD_ANNOTATIONS))\r\n            },\r\n            {\r\n                name: \"Download Annotations\",\r\n                description: \"Download annotation files\",\r\n                imageSrc: \"ico/down.png\",\r\n                imageAlt: \"export-labels\",\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.DOWNLOAD_ANNOTATIONS))\r\n            },\r\n            {\r\n                name: \"Delete Annotations\",\r\n                description: \"Download annotation files\",\r\n                imageSrc: \"ico/delete.png\",\r\n                imageAlt: \"export-labels\",\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.DELETE_ANNOTATIONS))\r\n            },\r\n            // {\r\n            //     name: \"Load AI Model\",\r\n            //     description: \"Load our pre-trained annotation models\",\r\n            //     imageSrc: \"ico/ai.png\",\r\n            //     imageAlt: \"load-ai-model\",\r\n            //     disabled: false,\r\n            //     onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.LOAD_AI_MODEL))\r\n            // },\r\n        ]\r\n    },\r\n    {\r\n        name: \"More\",\r\n        imageSrc: \"ico/more.png\",\r\n        imageAlt: \"more\",\r\n        disabled: false,\r\n        children: [\r\n            // {\r\n            //     name: \"Camera ID\",\r\n            //     description: \"Select Camera ID\",\r\n            //     imageSrc: \"ico/documentation.png\",\r\n            //     imageAlt: \"documentation\",\r\n            //     disabled: true\r\n            // },\r\n            {\r\n                name: \"Camera ID\",\r\n                description: \"Select Camera ID\",\r\n                imageSrc: \"ico/bug.png\",\r\n                imageAlt: \"bug\",\r\n                disabled: false,\r\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.LOAD_CAMERA_ID))\r\n            }\r\n        ]\r\n    }\r\n]\r\n\r\n","import React, {useState} from \"react\";\r\nimport classNames from 'classnames'\r\nimport './DropDownMenu.scss';\r\nimport {DropDownMenuData, DropDownMenuNode} from \"../../../../data/info/DropDownMenuData\";\r\nimport {EventType} from \"../../../../data/enums/EventType\";\r\nimport {updatePreventCustomCursorStatus} from \"../../../../store/general/actionCreators\";\r\nimport {AppState} from \"../../../../store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface IProps {\r\n    updatePreventCustomCursorStatus: (preventCustomCursor: boolean) => any;\r\n}\r\n\r\nconst DropDownMenu: React.FC<IProps> = ({updatePreventCustomCursorStatus}) => {\r\n    const topAnchor = 35;\r\n\r\n    const [activeTabIdx, setActiveTabIdx] = useState(null);\r\n    const [activeDropDownAnchor, setDropDownAnchor] = useState(null);\r\n\r\n    const onTabClick = (tabIdx: number, event) => {\r\n        if (activeTabIdx === null) {\r\n            document.addEventListener(EventType.MOUSE_DOWN, onMouseDownBeyondDropDown);\r\n        }\r\n\r\n        if (activeTabIdx === tabIdx) {\r\n            setActiveTabIdx(null);\r\n            setDropDownAnchor(null);\r\n        } else {\r\n            setActiveTabIdx(tabIdx);\r\n            setDropDownAnchor({x: event.target.offsetLeft, y: topAnchor});\r\n        }\r\n    }\r\n\r\n    const onMouseEnterWindow = (event) => {\r\n        updatePreventCustomCursorStatus(true);\r\n    }\r\n\r\n    const onMouseLeaveWindow = (event) => {\r\n        updatePreventCustomCursorStatus(false);\r\n    }\r\n\r\n    const onMouseDownBeyondDropDown = (event) => {\r\n        if (event.target.classList.contains(\"DropDownMenuTab\") || event.target.classList.contains(\"DropDownMenuContentOption\")) {\r\n            return;\r\n        }\r\n        setActiveTabIdx(null);\r\n        document.removeEventListener(EventType.MOUSE_DOWN, onMouseDownBeyondDropDown);\r\n    }\r\n\r\n    const onMouseEnterTab = (tabIdx: number, event) => {\r\n        if (activeTabIdx !== null && activeTabIdx !== tabIdx) {\r\n            setActiveTabIdx(tabIdx);\r\n            setDropDownAnchor({x: event.target.offsetLeft, y: topAnchor});\r\n        }\r\n    }\r\n\r\n    const getDropDownMenuTabClassName = (tabIdx: number) => {\r\n        return classNames(\r\n            \"DropDownMenuTab\",\r\n            {\"active\": tabIdx === activeTabIdx}\r\n        );\r\n    };\r\n\r\n    const getDropDownMenuContentOption = (disabled: boolean) => {\r\n        return classNames(\r\n            \"DropDownMenuContentOption\",\r\n            {\"active\": !disabled}\r\n        );\r\n    }\r\n\r\n    const getDropDownContent = () => {\r\n        return DropDownMenuData.map((data: DropDownMenuNode, index: number) => getDropDownTab(data, index))\r\n    }\r\n\r\n    const wrapOnClick = (onClick?: () => void, disabled?: boolean): () => void => {\r\n        return () => {\r\n            if (!!disabled) return;\r\n            if (!!onClick) onClick();\r\n            setActiveTabIdx(null);\r\n            updatePreventCustomCursorStatus(false);\r\n            document.removeEventListener(EventType.MOUSE_DOWN, onMouseDownBeyondDropDown);\r\n        }\r\n    }\r\n\r\n    const getDropDownTab = (data: DropDownMenuNode, index: number) => {\r\n        return <div\r\n            className={getDropDownMenuTabClassName(index)}\r\n            key={index}\r\n            onClick={(event) => onTabClick(index, event)}\r\n            onMouseEnter={(event) => onMouseEnterTab(index, event)}\r\n        >\r\n            <img\r\n                draggable={false}\r\n                src={data.imageSrc}\r\n                alt={data.imageAlt}\r\n            />\r\n            {data.name}\r\n        </div>\r\n    }\r\n\r\n    const getDropDownWindow = (data: DropDownMenuNode) => {\r\n        if (activeTabIdx !== null) {\r\n            const style: React.CSSProperties = {\r\n                top: 35,\r\n                left: activeDropDownAnchor.x,\r\n                height: 40 * data.children.length + 10\r\n            }\r\n            return <div\r\n                className={\"DropDownMenuContent\"}\r\n                style={style}\r\n                onMouseEnter={onMouseEnterWindow}\r\n                onMouseLeave={onMouseLeaveWindow}\r\n            >\r\n                {data.children.map((element: DropDownMenuNode, index: number) => {\r\n                    return <div className={getDropDownMenuContentOption(element.disabled)}\r\n                        onClick={wrapOnClick(element.onClick, element.disabled)}\r\n                        key={index}\r\n                    >\r\n                        <div className=\"Marker\"/>\r\n                        <img src={element.imageSrc} alt={element.imageAlt}/>\r\n                        {element.name}\r\n                    </div>})}\r\n            </div>\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return(<div className=\"DropDownMenuWrapper\">\r\n        <>\r\n            {getDropDownContent()}\r\n            {getDropDownWindow(DropDownMenuData[activeTabIdx])}\r\n        </>\r\n    </div>)\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updatePreventCustomCursorStatus,\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DropDownMenu);","import React from 'react';\r\nimport './TopNavigationBar.scss';\r\nimport StateBar from \"../StateBar/StateBar\";\r\nimport { PopupWindowType } from \"../../../data/enums/PopupWindowType\";\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateActivePopupType, updateProjectData } from \"../../../store/general/actionCreators\";\r\nimport { ProjectData } from \"../../../store/general/types\";\r\nimport DropDownMenu from \"./DropDownMenu/DropDownMenu\";\r\n\r\ninterface IProps {\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n    updateProjectData: (projectData: ProjectData) => any;\r\n    projectData: ProjectData;\r\n}\r\n\r\nconst TopNavigationBar: React.FC<IProps> = ({ updateActivePopupType, updateProjectData, projectData }) => {\r\n\r\n    return (\r\n        <div className=\"TopNavigationBar\">\r\n            <StateBar />\r\n            <div className=\"TopNavigationBarWrapper\">\r\n                <div className=\"NavigationBarGroupWrapper\">\r\n                    <div\r\n                        className=\"Header\"\r\n                        onClick={() => updateActivePopupType(PopupWindowType.EXIT_PROJECT)}\r\n                    >\r\n                        Pixel Sensor\r\n                    </div>\r\n                </div>\r\n                <div className=\"NavigationBarGroupWrapper\">\r\n                    {<DropDownMenu />}\r\n                </div>\r\n                <div className=\"NavigationBarGroupWrapper middle\">\r\n                    <div className=\"ProjectName\">Camera Id:</div>\r\n                    <p>{projectData.name}</p>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActivePopupType,\r\n    updateProjectData\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectData: state.general.projectData\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TopNavigationBar);","import React from 'react';\r\nimport './EditorView.scss';\r\nimport EditorContainer from \"./EditorContainer/EditorContainer\";\r\nimport {PopupWindowType} from \"../../data/enums/PopupWindowType\";\r\nimport {AppState} from \"../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport classNames from \"classnames\";\r\nimport TopNavigationBar from \"./TopNavigationBar/TopNavigationBar\";\r\n\r\ninterface IProps {\r\n    activePopupType: PopupWindowType;\r\n}\r\n\r\nconst EditorView: React.FC<IProps> = ({activePopupType}) => {\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"EditorView\",\r\n            {\r\n                \"withPopup\": !!activePopupType\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={getClassName()}\r\n            draggable={false}\r\n        >\r\n            <TopNavigationBar/>\r\n            <EditorContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activePopupType: state.general.activePopupType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(EditorView);","import * as React from 'react';\r\nimport './TextButton.scss';\r\nimport classNames from \"classnames\";\r\n\r\ninterface IProps {\r\n    key?:string;\r\n    label:string;\r\n    onClick?:() => any;\r\n    style?:React.CSSProperties;\r\n    isActive?:boolean;\r\n    isDisabled?:boolean;\r\n    externalClassName?:string;\r\n}\r\n\r\nexport const TextButton = (props:IProps) => {\r\n    const { key, label, onClick, style, isActive, isDisabled, externalClassName} = props;\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"TextButton\",\r\n            externalClassName,\r\n            {\r\n                \"active\": isActive,\r\n                \"disabled\": isDisabled\r\n            }\r\n        );\r\n    };\r\n\r\n    const onClickHandler = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        event.stopPropagation();\r\n        !!onClick && onClick();\r\n    };\r\n\r\n    return(\r\n        <div\r\n            className={getClassName()}\r\n            onClick={onClickHandler}\r\n            key={key}\r\n            style={style}\r\n        >\r\n            {label}\r\n        </div>\r\n    )\r\n};","import {ImageData} from \"../store/labels/types\";\r\nimport uuidv4 from \"uuid/v4\";\r\nimport {FileUtil} from \"./FileUtil\";\r\nimport {ImageRepository} from \"../logic/imageRepository/ImageRepository\";\r\n\r\nexport class ImageDataUtil {\r\n    public static createImageDataFromFileData(fileName: string): ImageData {\r\n        return {\r\n            id: uuidv4(),\r\n            fileName: fileName,\r\n            loadStatus: false,\r\n            labelRects: [],\r\n            labelPoints: [],\r\n            labelLines: [],\r\n            labelPolygons: [],\r\n            labelNameIds: [],\r\n            isVisitedByObjectDetector: false,\r\n            isVisitedByPoseDetector: false\r\n        }\r\n    }\r\n\r\n    public static cleanAnnotations(item: ImageData): ImageData {\r\n        return {\r\n            ...item,\r\n            labelRects: [],\r\n            labelPoints: [],\r\n            labelLines: [],\r\n            labelPolygons: [],\r\n            labelNameIds: []\r\n        }\r\n    }\r\n\r\n    public static arrange(items: ImageData[], idArrangement: string[]): ImageData[] {\r\n        return items.sort((a: ImageData, b: ImageData) => {\r\n            return idArrangement.indexOf(a.id) - idArrangement.indexOf(b.id)\r\n        })\r\n    }\r\n\r\n    public static loadMissingImages(images: ImageData[]): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const missingImages = images.filter((i: ImageData) => !i.loadStatus);\r\n            const missingImagesFiles = missingImages.map((i: ImageData) => i.fileName);\r\n            FileUtil.loadImages(missingImagesFiles)\r\n                .then((images:HTMLImageElement[]) => {\r\n                    ImageRepository.storeImages(missingImages.map((i: ImageData) => i.id), images);\r\n                    resolve()\r\n                })\r\n                .catch((error: Error) => reject(error));\r\n        });\r\n    }\r\n}","import React, { useState } from \"react\";\r\nimport './ImagesDropZone.scss';\r\nimport { TextButton } from \"../../Common/TextButton/TextButton\";\r\nimport { ImageData, LabelName } from \"../../../store/labels/types\";\r\nimport { connect } from \"react-redux\";\r\nimport { addImageData, updateActiveImageIndex } from \"../../../store/labels/actionCreators\";\r\nimport { AppState } from \"../../../store\";\r\nimport { ProjectType } from \"../../../data/enums/ProjectType\";\r\nimport { PopupWindowType } from \"../../../data/enums/PopupWindowType\";\r\nimport { updateActivePopupType, updateProjectData, updateConfigFolder, updateErrorMsg } from \"../../../store/general/actionCreators\";\r\nimport { updateLabelNames } from \"../../../store/labels/actionCreators\";\r\nimport { ProjectData } from \"../../../store/general/types\";\r\nimport { ImageDataUtil } from \"../../../utils/ImageDataUtil\";\r\nimport axios from \"axios\";\r\nimport { imageList, runFeed } from \"../../../url/ApiUrl\"\r\nimport PopupView from \"../../PopupView/PopupView\";\r\n\r\ninterface IProps {\r\n    updateActiveImageIndex: (activeImageIndex: number) => any;\r\n    addImageData: (imageData: ImageData[]) => any;\r\n    updateProjectData: (projectData: ProjectData) => any;\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n    updateConfigFolder: (configFolder: String) => any;\r\n    updateLabelNames: (labels: LabelName[]) => any;\r\n    updateErrorMsg: (error: String) => any;\r\n    projectData: ProjectData;\r\n}\r\n\r\nconst ImagesDropZone: React.FC<IProps> = ({ updateActiveImageIndex, addImageData, updateProjectData, updateActivePopupType, updateConfigFolder, updateLabelNames, updateErrorMsg, projectData }) => {\r\n    const [buttonState, setButtonState] = useState(false);\r\n\r\n    const startEditor = async (projectType: ProjectType, configFolder: String) => {\r\n        try {\r\n            let response = await axios.get(imageList, {\r\n                params: {\r\n                    dir: configFolder\r\n                }\r\n            })\r\n            // console.log(response.data.files);\r\n            if (response.data.files.length > 0) {\r\n                if (configFolder === 'captures') {\r\n                    updateLabelNames([\r\n                        { id: \"609dedef-8391-461e-bf6e-019c4ccd734c\", name: \"S-1\" },\r\n                        { id: \"f36d71b3-510d-4ab2-b560-6eebaa319cab\", name: \"S-2\" },\r\n                        { id: \"f30239d5-2319-4d4f-ab8f-ee6e89e3581b\", name: \"S-3\" },\r\n                        { id: \"7a25b2ed-2301-4d07-9807-ddf5d55b1747\", name: \"S-4\" }\r\n                    ]);\r\n                    await addImageData([ImageDataUtil.createImageDataFromFileData(configFolder + '/270.jpg')]);\r\n                }\r\n                else if (configFolder === 'tables') {\r\n                    updateLabelNames([\r\n                        { id: \"609dedef-8391-461e-bf6e-019c4ccd734c\", name: \"T-1\" },\r\n                        { id: \"f36d71b3-510d-4ab2-b560-6eebaa319cab\", name: \"T-2\" },\r\n                        { id: \"f30239d5-2319-4d4f-ab8f-ee6e89e3581b\", name: \"T-3\" },\r\n                        { id: \"7a25b2ed-2301-4d07-9807-ddf5d55b1747\", name: \"T-4\" },\r\n                        { id: \"f36d71b3-510d-4ab2-b560-6eebaa319ca7\", name: \"T-5\" },\r\n                        { id: \"f30239d5-2319-4d4f-ab8f-ee6e89e35818\", name: \"T-6\" },\r\n                        { id: \"7a25b2ed-2301-4d07-9807-ddf5d55b1744\", name: \"T-7\" },\r\n                        { id: \"f36d71b3-510d-4ab2-b560-6eebaa319ca2\", name: \"T-8\" },\r\n                        { id: \"f30239d5-2319-4d4f-ab8f-ee6e89e35814\", name: \"T-9\" },\r\n                        { id: \"7a25b2ed-2301-4d07-9807-ddf5d55b1743\", name: \"T-10\" },\r\n                        { id: \"f36d71b3-510d-4ab2-b560-6eebaa319ca1\", name: \"T-11\" },\r\n                        { id: \"f30239d5-2319-4d4f-ab8f-ee6e89e35811\", name: \"T-12\" },\r\n                    ]);\r\n                    await addImageData(response.data.files.map((fileName: String) => ImageDataUtil.createImageDataFromFileData(configFolder + \"/\" + fileName)));\r\n                }\r\n                updateActiveImageIndex(0);\r\n                // addImageData(acceptedFiles.map((fileData:File) => ImageDataUtil.createImageDataFromFileData(fileData)));\r\n                // console.log(response.data.files.map((fileName: string) => ImageDataUtil.createImageDataFromFileData(fileName)));\r\n                updateConfigFolder(configFolder)\r\n                updateProjectData({\r\n                    ...projectData,\r\n                    type: projectType\r\n                });\r\n\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"ImagesDropZone\">\r\n            <div className=\"DropZoneButtons\">\r\n                <TextButton\r\n                    label={\"1. Capture Scene\"}\r\n                    onClick={() => { updateActivePopupType(PopupWindowType.LOADER); axios.get(runFeed).then((response) => { console.log(response.data); setButtonState(true); updateActivePopupType(null); }).catch((error) => { console.log(error); updateErrorMsg(error.message); updateActivePopupType(PopupWindowType.ERROR) }); }}\r\n                />\r\n            </div>\r\n            <div className=\"DropZoneButtons\">\r\n                <TextButton\r\n                    label={\"2. Define Sections\"}\r\n                    isDisabled={!buttonState}\r\n                    onClick={() => { if (buttonState) { startEditor(ProjectType.OBJECT_DETECTION, \"captures\") } }}\r\n                />\r\n            </div>\r\n            <div className=\"DropZoneButtons\">\r\n                <TextButton\r\n                    label={\"3. Define Tables\"}\r\n                    // isDisabled={!buttonState}\r\n                    onClick={() => {\r\n                        startEditor(ProjectType.OBJECT_DETECTION, \"tables\")\r\n                        // if(buttonState){startEditor(ProjectType.OBJECT_DETECTION, \"tables\")}\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActiveImageIndex,\r\n    addImageData,\r\n    updateProjectData,\r\n    updateActivePopupType,\r\n    updateConfigFolder,\r\n    updateLabelNames,\r\n    updateErrorMsg\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectData: state.general.projectData,\r\n    configFolder: state.general.configFolder\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ImagesDropZone);","import React, {useState} from 'react';\r\nimport './MainView.scss';\r\nimport {TextButton} from \"../Common/TextButton/TextButton\";\r\nimport classNames from 'classnames';\r\nimport ImagesDropZone from \"./ImagesDropZone/ImagesDropZone\";\r\n\r\nconst MainView: React.FC = () => {\r\n    const [projectInProgress, setProjectInProgress] = useState(false);\r\n    const [projectCanceled, setProjectCanceled] = useState(false);\r\n\r\n    const startProject = () => {\r\n        setProjectInProgress(true);\r\n    };\r\n\r\n    const endProject = () => {\r\n        setProjectInProgress(false);\r\n        setProjectCanceled(true);\r\n    };\r\n\r\n    const getClassName = () => {\r\n        return classNames(\r\n            \"MainView\", {\r\n                \"InProgress\": projectInProgress,\r\n                \"Canceled\": !projectInProgress && projectCanceled\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={getClassName()}>\r\n            <div className=\"Slider\" id=\"lower\">\r\n                <div className=\"TriangleVertical\">\r\n                    <div className=\"TriangleVerticalContent\"/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Slider\" id=\"upper\">\r\n                <div className=\"TriangleVertical\">\r\n                    <div className=\"TriangleVerticalContent\"/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"LeftColumn\">\r\n                <div className=\"TriangleVertical\">\r\n                    <div className=\"TriangleVerticalContent\"/>\r\n                </div>\r\n                {projectInProgress && <TextButton\r\n                    label={\"Go Back\"}\r\n                    onClick={endProject}\r\n                />}\r\n            </div>\r\n            <div className=\"RightColumn\">\r\n                <div/>\r\n                <ImagesDropZone/>\r\n                <div className=\"SocialMediaWrapper\">\r\n                    {/* {getSocialMediaButtons({width: 30, height: 30})} */}\r\n                </div>\r\n                {!projectInProgress && <TextButton\r\n                    label={\"Get Started\"}\r\n                    onClick={startProject}\r\n                />}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainView;","import React, {useEffect, useState} from 'react'\r\nimport './GenericYesNoPopup.scss'\r\nimport {TextButton} from \"../../Common/TextButton/TextButton\";\r\nimport {ContextManager} from \"../../../logic/context/ContextManager\";\r\nimport {ContextType} from \"../../../data/enums/ContextType\";\r\n\r\ninterface IProps {\r\n    title: string;\r\n    renderContent: () => any;\r\n    acceptLabel?: string;\r\n    onAccept?: () => any;\r\n    skipAcceptButton?: boolean;\r\n    disableAcceptButton?: boolean;\r\n    rejectLabel?: string;\r\n    onReject?: () => any;\r\n    skipRejectButton?: boolean;\r\n    disableRejectButton?: boolean;\r\n}\r\n\r\nexport const GenericYesNoPopup: React.FC<IProps> = (\r\n    {\r\n        title,\r\n        renderContent,\r\n        acceptLabel,\r\n        onAccept,\r\n        skipAcceptButton,\r\n        disableAcceptButton,\r\n        rejectLabel,\r\n        onReject,\r\n        skipRejectButton,\r\n        disableRejectButton\r\n    }) => {\r\n    \r\n    const [status, setMountStatus] = useState(false);\r\n    useEffect(() => {\r\n        if (!status) {\r\n            ContextManager.switchCtx(ContextType.POPUP);\r\n            setMountStatus(true);\r\n        }\r\n    }, [status]);\r\n\r\n    return (\r\n        <div className=\"GenericYesNoPopup\">\r\n            <div className=\"Header\">\r\n                {title}\r\n            </div>\r\n            <div className=\"Content\">\r\n                {renderContent()}\r\n            </div>\r\n            <div className=\"Footer\">\r\n                {!skipAcceptButton && <TextButton\r\n                    label={!!acceptLabel ? acceptLabel : \"YES\"}\r\n                    onClick={onAccept}\r\n                    externalClassName={\"accept\"}\r\n                    isDisabled={disableAcceptButton}\r\n                />}\r\n                {!skipRejectButton && <TextButton\r\n                    label={!!rejectLabel ? rejectLabel : \"NO, THANKS\"}\r\n                    onClick={onReject}\r\n                    externalClassName={\"reject\"}\r\n                    isDisabled={disableRejectButton}\r\n                />}\r\n            </div>\r\n        </div>\r\n    )\r\n};","export enum AcceptedFileType {\r\n    IMAGE = 'image/jpeg, image/png',\r\n    TEXT = 'text/plain',\r\n    JSON = 'application/json',\r\n    EXCEL = '.xls, .xlsx'\r\n}","export class YOLOAnnotationsLoadingError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = \"YOLOAnnotationsLoadingError\";\r\n    }\r\n}\r\n\r\nexport class YOLOLabelsReadingError extends YOLOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"Unexpected error occurred during reading label names from labels.txt file\");\r\n        this.name = \"YOLOLabelsLoadingError\";\r\n    }\r\n}\r\n\r\nexport class NoLabelNamesFileProvidedError extends YOLOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"For YOLO labels to be loaded correctly, labels.txt file is required\");\r\n        this.name = \"NoLabelNamesFileProvidedError\";\r\n    }\r\n}\r\n\r\nexport class LabelNamesNotUniqueError extends YOLOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"Label names listed in labels.txt file should be unique\");\r\n        this.name = \"LabelNamesNotUniqueError\";\r\n    }\r\n}\r\n\r\nexport class AnnotationsParsingError extends YOLOAnnotationsLoadingError {\r\n    constructor(imageName: string) {\r\n        super(`Unexpected error occurred during parsing of ${imageName} annotations file`);\r\n        this.name = \"AnnotationsParsingError\";\r\n    }\r\n}","import {LabelName, LabelRect} from \"../../../store/labels/types\";\r\nimport {LabelUtil} from \"../../../utils/LabelUtil\";\r\nimport {AnnotationsParsingError, LabelNamesNotUniqueError} from \"./YOLOErrors\";\r\nimport {ISize} from \"../../../interfaces/ISize\";\r\nimport {uniq} from \"lodash\";\r\n\r\nexport class YOLOUtils {\r\n    public static parseLabelsNamesFromString(content: string): LabelName[] {\r\n        const labelNames: string[] = content\r\n            .split(/[\\r\\n]/)\r\n            .filter(Boolean)\r\n            .map((name: string) => name.replace(/\\s/g, \"\"))\r\n\r\n        if (uniq(labelNames).length !== labelNames.length) {\r\n            throw new LabelNamesNotUniqueError()\r\n        }\r\n\r\n        return labelNames\r\n            .map((name: string) => LabelUtil.createLabelName(name))\r\n    }\r\n\r\n    public static loadLabelsList(fileData: File, onSuccess: (labels: LabelName[]) => any, onFailure: () => any) {\r\n        const reader = new FileReader();\r\n        reader.onloadend = function (evt: any) {\r\n            const content: string = evt.target.result;\r\n            const labelNames = YOLOUtils.parseLabelsNamesFromString(content);\r\n            onSuccess(labelNames);\r\n        };\r\n        reader.onerror = () => onFailure();\r\n        reader.readAsText(fileData);\r\n    }\r\n\r\n    public static parseYOLOAnnotationsFromString(\r\n        rawAnnotations: string,\r\n        labelNames: LabelName[],\r\n        imageSize: ISize,\r\n        imageName: string\r\n    ): LabelRect[] {\r\n        return rawAnnotations\r\n            .split(/[\\r\\n]/)\r\n            .filter(Boolean)\r\n            .map((rawAnnotation: string) => YOLOUtils.parseYOLOAnnotationFromString(\r\n                rawAnnotation, labelNames, imageSize, imageName\r\n            ))\r\n    }\r\n\r\n    public static parseYOLOAnnotationFromString(\r\n        rawAnnotation: string,\r\n        labelNames: LabelName[],\r\n        imageSize: ISize,\r\n        imageName: string\r\n    ): LabelRect {\r\n        const components = rawAnnotation.split(\" \");\r\n        if (!YOLOUtils.validateYOLOAnnotationComponents(components, labelNames.length)) {\r\n            throw new AnnotationsParsingError(imageName);\r\n        }\r\n        const labelIndex: number = parseInt(components[0]);\r\n        const labelId: string = labelNames[labelIndex].id;\r\n        const rectX: number = parseFloat(components[1]);\r\n        const rectY: number = parseFloat(components[2]);\r\n        const rectWidth: number = parseFloat(components[3]);\r\n        const rectHeight: number = parseFloat(components[4]);\r\n        const rect = {\r\n            x: (rectX - rectWidth /2) * imageSize.width,\r\n            y: (rectY - rectHeight /2) * imageSize.height,\r\n            width: rectWidth * imageSize.width,\r\n            height: rectHeight * imageSize.height\r\n        }\r\n        return LabelUtil.createLabelRect(labelId, rect);\r\n    }\r\n\r\n    public static validateYOLOAnnotationComponents(components: string[], labelNamesCount: number): boolean {\r\n        const validateCoordinateValue = (rawValue: string): boolean => {\r\n            const floatValue: number = Number(rawValue);\r\n            return !isNaN(floatValue) && 0.0 <= floatValue && floatValue <= 1.0;\r\n        }\r\n        const validateLabelIdx = (rawValue: string): boolean => {\r\n            const intValue: number = parseInt(rawValue);\r\n            return !isNaN(intValue) && 0 <= intValue && intValue < labelNamesCount;\r\n        }\r\n\r\n        return [\r\n            components.length === 5,\r\n            validateLabelIdx(components[0]),\r\n            validateCoordinateValue(components[1]),\r\n            validateCoordinateValue(components[2]),\r\n            validateCoordinateValue(components[3]),\r\n            validateCoordinateValue(components[4])\r\n        ].every(Boolean)\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport './LoadLabelNamesPopup.scss'\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateLabelNames } from \"../../../store/labels/actionCreators\";\r\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport { PopupWindowType } from \"../../../data/enums/PopupWindowType\";\r\nimport { updateActivePopupType } from \"../../../store/general/actionCreators\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { AcceptedFileType } from \"../../../data/enums/AcceptedFileType\";\r\nimport { LabelName } from \"../../../store/labels/types\";\r\nimport { YOLOUtils } from \"../../../logic/import/yolo/YOLOUtils\";\r\n\r\ninterface IProps {\r\n    configFolder: String,\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n    updateLabels: (labels: LabelName[]) => any;\r\n}\r\n\r\nconst LoadLabelNamesPopup: React.FC<IProps> = ({ configFolder, updateActivePopupType, updateLabels }) => {\r\n    const [labelsList, setLabelsList] = useState([]);\r\n    const [invalidFileLoadedStatus, setInvalidFileLoadedStatus] = useState(false);\r\n\r\n    const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\r\n        accept: AcceptedFileType.EXCEL,\r\n        multiple: false,\r\n        onDrop: (acceptedFiles) => {\r\n            if (acceptedFiles.length === 1) {\r\n                YOLOUtils.loadLabelsList(acceptedFiles[0], onSuccess, onFailure);\r\n                // let formData = new FormData()\r\n                // formData.append(\"labels\", acceptedFiles[0], acceptedFiles[0].name)\r\n                // axios.post(saveLabels, formData, {headers:{\"Accept\": 'application/json', \"Content-Type\": \"multipart/form-data\"},params: {\r\n                //     dir: configFolder,\r\n                //     }})\r\n            }\r\n        }\r\n    });\r\n\r\n    const onSuccess = (labelsList: LabelName[]) => {\r\n        setLabelsList(labelsList);\r\n        setInvalidFileLoadedStatus(false);\r\n    };\r\n\r\n    const onFailure = () => {\r\n        setInvalidFileLoadedStatus(true);\r\n    };\r\n\r\n    const onAccept = () => {\r\n        if (labelsList.length > 0) {\r\n            updateLabels(labelsList);\r\n        }\r\n    };\r\n\r\n    const onReject = () => {\r\n        updateActivePopupType(PopupWindowType.INSERT_LABEL_NAMES);\r\n    };\r\n\r\n    const getDropZoneContent = () => {\r\n        if (invalidFileLoadedStatus)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Loading of labels file was unsuccessful</p>\r\n                <p className=\"extraBold\">Try again</p>\r\n            </>;\r\n        else if (acceptedFiles.length === 0)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Drop labels file</p>\r\n                <p>or</p>\r\n                <p className=\"extraBold\">Click here to select it</p>\r\n            </>;\r\n        else if (labelsList.length === 1)\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">only 1 label found</p>\r\n            </>;\r\n        else\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">{labelsList.length} labels found</p>\r\n            </>;\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return (<div className=\"LoadLabelsPopupContent\">\r\n            <div className=\"Message\">\r\n                Load a text file with a list of labels you are planning to use. The names of\r\n                each label should be separated by new line. If you don't have a prepared file, no problem. You can\r\n                create your own list now.\r\n            </div>\r\n            <div {...getRootProps({ className: 'DropZone' })}>\r\n                {getDropZoneContent()}\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={\"Load file with labels description\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Start project\"}\r\n            onAccept={onAccept}\r\n            disableAcceptButton={labelsList.length === 0}\r\n            rejectLabel={\"Create labels list\"}\r\n            onReject={onReject}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActivePopupType,\r\n    updateLabels: updateLabelNames\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    configFolder: state.general.configFolder\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LoadLabelNamesPopup);","import React, {useState} from 'react'\r\nimport './LoadCameraIdsPopup.scss'\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {updateCameraIds} from \"../../../store/labels/actionCreators\";\r\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {PopupWindowType} from \"../../../data/enums/PopupWindowType\";\r\nimport {updateActivePopupType} from \"../../../store/general/actionCreators\";\r\nimport {useDropzone} from \"react-dropzone\";\r\nimport {AcceptedFileType} from \"../../../data/enums/AcceptedFileType\";\r\nimport {CameraId} from \"../../../store/labels/types\";\r\nimport XLSX from 'xlsx';\r\nimport { uniq } from 'lodash';\r\nimport { PopupActions } from '../../../logic/actions/PopupActions';\r\n\r\ninterface IProps {\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n    updateCameras: (cameras: CameraId[]) => any;\r\n}\r\n\r\nconst LoadCameraIdsPopup: React.FC<IProps> = ({updateActivePopupType, updateCameras}) => {\r\n    const [camerasList, setCamerasList] = useState([]);\r\n    const [invalidFileLoadedStatus, setInvalidFileLoadedStatus] = useState(false);\r\n\r\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\r\n        accept: AcceptedFileType.EXCEL,\r\n        multiple: false,\r\n        onDrop: (acceptedFiles) => {\r\n            if (acceptedFiles.length === 1) {\r\n                const reader = new FileReader();\r\n                reader.onload = function (evt) {\r\n                    if(evt.target){\r\n                        const content = evt.target.result;\r\n                        const wb = XLSX.read(content, {type:\"binary\"});\r\n                        const data = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]], {header:[\"ID\", \"OPERATION\",\t\"STATUS\",\t\"MESSAGE\",\t\"NAME\",\t\"SENSOR_TYPE\", \"GROUP_IDENTIFIER\", \"IDENTIFIER\", \"MAKE\", \"MODEL\"]});\r\n                        data.splice(0, 2)\r\n                        console.log(data);\r\n                        const seatIds = []\r\n                        data.map((row:any)=>{\r\n                            // let seat = {id: row.GROUP_IDENTIFIER}\r\n                            // console.log(seat)\r\n                            seatIds.push(row.GROUP_IDENTIFIER)\r\n                        }) \r\n                        onSuccess(uniq(seatIds));\r\n                    }\r\n                };\r\n                reader.onerror = () => onFailure();\r\n                reader.readAsBinaryString(acceptedFiles[0]);\r\n            }\r\n        }\r\n    });\r\n\r\n    const onSuccess = (camerasList: CameraId[]) => {\r\n        setCamerasList(camerasList);\r\n        setInvalidFileLoadedStatus(false);\r\n    };\r\n\r\n    const onFailure = () => {\r\n        setInvalidFileLoadedStatus(true);\r\n    };\r\n\r\n    const onAccept = () => {\r\n        if (camerasList.length > 0) {\r\n            updateCameras(camerasList);\r\n            updateActivePopupType(PopupWindowType.SELECT_CAMERA_ID);    \r\n        }\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close()\r\n    };\r\n\r\n    const getDropZoneContent = () => {\r\n        if (invalidFileLoadedStatus)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Loading of xls/xlsx file was unsuccessful</p>\r\n                <p className=\"extraBold\">Try again</p>\r\n            </>;\r\n        else if (acceptedFiles.length === 0)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Drop xls/xlsx file</p>\r\n                <p>or</p>\r\n                <p className=\"extraBold\">Click here to select it</p>\r\n            </>;\r\n        else if (camerasList.length === 1)\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">only 1 camera id found</p>\r\n            </>;\r\n        else\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">{camerasList.length} camera ids found</p>\r\n            </>;\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return(<div className=\"LoadCameraIdsPopupContent\">\r\n            <div className=\"Message\">\r\n                Load a xls/xlsx file with a list of camera identifiers you are planning to use.\r\n            </div>\r\n            <div {...getRootProps({className: 'DropZone'})}>\r\n                {getDropZoneContent()}\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={\"Load file with labels description\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Select Camera Id\"}\r\n            onAccept={onAccept}\r\n            disableAcceptButton={camerasList.length === 0}\r\n            rejectLabel={\"Cancel\"}\r\n            onReject={onReject}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActivePopupType,\r\n    updateCameras: updateCameraIds\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LoadCameraIdsPopup);","import React from 'react'\r\nimport './SelectCameraIdPopup.scss'\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {PopupActions} from \"../../../logic/actions/PopupActions\";\r\nimport {CameraId} from \"../../../store/labels/types\";\r\nimport {updateProjectData} from \"../../../store/general/actionCreators\";\r\nimport {ProjectData} from \"../../../store/general/types\";\r\nimport Select from 'react-select';\r\n\r\ninterface IProps {\r\n    cameras: CameraId[];\r\n    updateProjectData: (projectData: ProjectData) => any;\r\n    projectData: ProjectData;\r\n}\r\n\r\nconst LoadCameraIdsPopup: React.FC<IProps> = ({cameras, updateProjectData, projectData}) => {\r\n    \r\n    const onAccept = () => {\r\n        console.log(cameras)\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onReject = () => {\r\n        console.log(\"rejected\")\r\n        PopupActions.close();\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return(<div className=\"SelectCameraIdPopupContent\">\r\n            <Select \r\n                className=\"Selector\" \r\n                options={cameras.map((camera)=>({label: camera, value: camera}))}\r\n                onChange={opt => updateProjectData({\r\n                    ...projectData,\r\n                    name: opt.value\r\n                })}\r\n            />\r\n        </div>);\r\n    };\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={\"Load file with labels description\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Submit\"}\r\n            onAccept={onAccept}\r\n            disableAcceptButton={cameras.length === 0}\r\n            rejectLabel={\"Cancel\"}\r\n            onReject={onReject}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateProjectData\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    cameras : state.labels.cameras,\r\n    projectData: state.general.projectData\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LoadCameraIdsPopup);","import React from 'react';\r\nimport './TextInput.scss';\r\n\r\ninterface IProps {\r\n    key: string;\r\n    label?: string;\r\n    isPassword: boolean;\r\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => any;\r\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => any;\r\n    inputStyle?: React.CSSProperties;\r\n    labelStyle?: React.CSSProperties;\r\n    barStyle?: React.CSSProperties;\r\n    value?: string;\r\n    onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst TextInput = (props: IProps) => {\r\n\r\n    const {\r\n        key,\r\n        label,\r\n        isPassword,\r\n        onChange,\r\n        onFocus,\r\n        inputStyle,\r\n        labelStyle,\r\n        barStyle,\r\n        value,\r\n        onKeyUp\r\n    } = props;\r\n\r\n    const getInputType = () => {\r\n        return isPassword ? \"password\" : \"text\";\r\n    };\r\n\r\n    return (\r\n        <div className=\"TextInput\">\r\n            <input\r\n                value={!!value ? value : undefined}\r\n                type={getInputType()}\r\n                id={key}\r\n                style={inputStyle}\r\n                onChange={onChange ? onChange : undefined}\r\n                onFocus={onFocus ? onFocus : undefined}\r\n                autoFocus\r\n                onKeyUp={onKeyUp}\r\n            />\r\n            {!!label && <label\r\n                htmlFor={key}\r\n                style={labelStyle}\r\n            >\r\n                {label}\r\n            </label>}\r\n            <div\r\n                className=\"Bar\"\r\n                style={barStyle}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextInput;","import React, { useState } from 'react'\r\nimport './InsertLabelNamesPopup.scss'\r\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport { PopupWindowType } from \"../../../data/enums/PopupWindowType\";\r\nimport { updateLabelNames } from \"../../../store/labels/actionCreators\";\r\nimport { updateActivePopupType } from \"../../../store/general/actionCreators\";\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport TextInput from \"../../Common/TextInput/TextInput\";\r\nimport { ImageButton } from \"../../Common/ImageButton/ImageButton\";\r\nimport uuidv4 from 'uuid/v4';\r\nimport { LabelName } from \"../../../store/labels/types\";\r\nimport { LabelUtil } from \"../../../utils/LabelUtil\";\r\nimport { LabelsSelector } from \"../../../store/selectors/LabelsSelector\";\r\nimport { LabelActions } from \"../../../logic/actions/LabelActions\";\r\nimport { ProjectType } from \"../../../data/enums/ProjectType\";\r\n\r\ninterface IProps {\r\n    projectType: ProjectType;\r\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\r\n    updateLabelNames: (labels: LabelName[]) => any;\r\n    isUpdate: boolean;\r\n}\r\n\r\nconst InsertLabelNamesPopup: React.FC<IProps> = (\r\n    {\r\n        projectType,\r\n        updateActivePopupType,\r\n        updateLabelNames,\r\n        isUpdate\r\n    }) => {\r\n    const initialLabels = LabelUtil.convertLabelNamesListToMap(LabelsSelector.getLabelNames());\r\n    const [labelNames, setLabelNames] = useState(initialLabels);\r\n\r\n    const addHandle = () => {\r\n        const newLabelNames = { ...labelNames, [uuidv4()]: \"\" };\r\n        setLabelNames(newLabelNames);\r\n    };\r\n\r\n    const deleteHandle = (key: string) => {\r\n        const newLabelNames = { ...labelNames };\r\n        delete newLabelNames[key];\r\n        setLabelNames(newLabelNames);\r\n    };\r\n\r\n    const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addHandle();\r\n        }\r\n    }\r\n\r\n    const labelInputs = Object.keys(labelNames).map((key: string) => {\r\n        return <div className=\"LabelEntry\" key={key}>\r\n            <TextInput\r\n                key={key}\r\n                value={labelNames[key]}\r\n                isPassword={false}\r\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => onChange(key, event.target.value)}\r\n                label={\"Insert label\"}\r\n                onKeyUp={(event: React.KeyboardEvent<HTMLInputElement>) => handleKeyUp(event)}\r\n            />\r\n            <ImageButton\r\n                image={\"ico/trash.png\"}\r\n                imageAlt={\"remove_label\"}\r\n                buttonSize={{ width: 30, height: 30 }}\r\n                onClick={() => deleteHandle(key)}\r\n            />\r\n        </div>\r\n    });\r\n\r\n    const onChange = (key: string, value: string) => {\r\n        const newLabelNames = { ...labelNames, [key]: value };\r\n        setLabelNames(newLabelNames);\r\n    };\r\n\r\n    const onCreateAccept = () => {\r\n        const labelNamesList: string[] = extractLabelNamesList();\r\n        if (labelNamesList.length > 0) {\r\n            updateLabelNames(LabelUtil.convertMapToLabelNamesList(labelNames));\r\n        }\r\n        updateActivePopupType(null);\r\n    };\r\n\r\n    const onUpdateAccept = () => {\r\n        const labelNamesList: string[] = extractLabelNamesList();\r\n        const updatedLabelNamesList: LabelName[] = LabelUtil.convertMapToLabelNamesList(labelNames);\r\n        const missingIds: string[] = LabelUtil.labelNamesIdsDiff(LabelsSelector.getLabelNames(), updatedLabelNamesList);\r\n        LabelActions.removeLabelNames(missingIds);\r\n        if (labelNamesList.length > 0) {\r\n            console.log(labelNames)\r\n            console.log(LabelUtil.convertMapToLabelNamesList(labelNames))\r\n            updateLabelNames(LabelUtil.convertMapToLabelNamesList(labelNames));\r\n            updateActivePopupType(null);\r\n        }\r\n    };\r\n\r\n    const onCreateReject = () => {\r\n        updateActivePopupType(PopupWindowType.LOAD_LABEL_NAMES);\r\n    };\r\n\r\n    const onUpdateReject = () => {\r\n        updateActivePopupType(null);\r\n    };\r\n\r\n\r\n    const extractLabelNamesList = (): string[] => {\r\n        return Object.values(labelNames).filter((value => !!value)) as string[];\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return (<div className=\"InsertLabelNamesPopup\">\r\n            <div className=\"LeftContainer\">\r\n                <ImageButton\r\n                    image={\"ico/plus.png\"}\r\n                    imageAlt={\"plus\"}\r\n                    buttonSize={{ width: 40, height: 40 }}\r\n                    padding={25}\r\n                    onClick={addHandle}\r\n                />\r\n            </div>\r\n            <div className=\"RightContainer\">\r\n                <div className=\"Message\">\r\n                    {\r\n                        isUpdate ?\r\n                            \"You can now edit the label names you use to describe the objects in the photos. Use the + \" +\r\n                            \"button to add a new empty text field.\" :\r\n                            \"Before you start, you can create a list of labels you plan to assign to objects in your \" +\r\n                            \"project. You can also choose to skip that part for now and define label names as you go.\"\r\n                    }\r\n                </div>\r\n                <div className=\"LabelsContainer\">\r\n                    {Object.keys(labelNames).length !== 0 ? <Scrollbars>\r\n                        <div\r\n                            className=\"InsertLabelNamesPopupContent\"\r\n                        >\r\n                            {labelInputs}\r\n                        </div>\r\n                    </Scrollbars> :\r\n                        <div\r\n                            className=\"EmptyList\"\r\n                            onClick={addHandle}\r\n                        >\r\n                            <img\r\n                                draggable={false}\r\n                                alt={\"upload\"}\r\n                                src={\"ico/type-writer.png\"}\r\n                            />\r\n                            <p className=\"extraBold\">Your label list is empty</p>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={isUpdate ? \"Edit labels\" : \"Create labels\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={isUpdate ? \"Accept\" : \"Start project\"}\r\n            onAccept={isUpdate ? onUpdateAccept : onCreateAccept}\r\n            rejectLabel={isUpdate ? \"Cancel\" : \"Load labels from file\"}\r\n            onReject={isUpdate ? onUpdateReject : onCreateReject}\r\n        />)\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActivePopupType,\r\n    updateLabelNames\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectType: state.general.projectData.type\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(InsertLabelNamesPopup);\r\n","import React from 'react'\r\nimport './ExitProjectPopup.scss'\r\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {\r\n    updateActiveImageIndex,\r\n    updateActiveLabelNameId,\r\n    updateFirstLabelCreatedFlag,\r\n    updateImageData,\r\n    updateLabelNames\r\n} from \"../../../store/labels/actionCreators\";\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { ImageData, LabelName } from \"../../../store/labels/types\";\r\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\r\nimport { ProjectData } from \"../../../store/general/types\";\r\nimport { updateProjectData } from \"../../../store/general/actionCreators\";\r\n\r\ninterface IProps {\r\n    updateActiveImageIndex: (activeImageIndex: number) => any;\r\n    updateActiveLabelNameId: (activeLabelId: string) => any;\r\n    updateLabelNames: (labelNames: LabelName[]) => any;\r\n    updateImageData: (imageData: ImageData[]) => any;\r\n    updateFirstLabelCreatedFlag: (firstLabelCreatedFlag: boolean) => any;\r\n    updateProjectData: (projectData: ProjectData) => any;\r\n    projectData: ProjectData;\r\n}\r\n\r\nconst ExitProjectPopup: React.FC<IProps> = (props) => {\r\n    const {\r\n        updateActiveLabelNameId,\r\n        updateLabelNames,\r\n        updateActiveImageIndex,\r\n        updateImageData,\r\n        updateFirstLabelCreatedFlag,\r\n        updateProjectData,\r\n        projectData\r\n    } = props;\r\n\r\n    const renderContent = () => {\r\n        return (\r\n            <div className=\"ExitProjectPopupContent\">\r\n                <div className=\"Message\">\r\n                    Are you sure you want to leave the editor? You will permanently lose all your progress.\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const onAccept = () => {\r\n        updateActiveLabelNameId(null);\r\n        updateLabelNames([]);\r\n        updateProjectData({ type: null, name: \"my-project-name\" });\r\n        updateActiveImageIndex(null);\r\n        updateImageData([]);\r\n        updateFirstLabelCreatedFlag(false);\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={\"Exit project\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Exit\"}\r\n            onAccept={onAccept}\r\n            rejectLabel={\"Back\"}\r\n            onReject={onReject}\r\n        />)\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateActiveLabelNameId,\r\n    updateLabelNames,\r\n    updateProjectData,\r\n    updateActiveImageIndex,\r\n    updateImageData,\r\n    updateFirstLabelCreatedFlag\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectData: state.general.projectData,\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ExitProjectPopup);","import React from 'react'\r\nimport './ErrorPopup.scss'\r\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\r\n\r\ninterface IProps {\r\n    error: String\r\n}\r\n\r\nconst ErrorPopup: React.FC<IProps> = (props) => {\r\n    const { error\r\n    } = props;\r\n\r\n    const renderContent = () => {\r\n        return (\r\n            <div className=\"ErrorPopupContent\">\r\n                <div className=\"Message\">\r\n                    {error}\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const onAccept = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    // const onReject = () => {\r\n    //     PopupActions.close();\r\n    // };\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={\"Error\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Exit\"}\r\n            onAccept={onAccept}\r\n            rejectLabel={\"Back\"}\r\n            // onReject={onReject}\r\n            skipRejectButton={true}\r\n        />)\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    error: state.general.error\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ErrorPopup);","import React from 'react'\r\nimport './LoadMoreImagesPopup.scss'\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {addImageData} from \"../../../store/labels/actionCreators\";\r\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {useDropzone} from \"react-dropzone\";\r\nimport {ImageData} from \"../../../store/labels/types\";\r\nimport {AcceptedFileType} from \"../../../data/enums/AcceptedFileType\";\r\nimport {PopupActions} from \"../../../logic/actions/PopupActions\";\r\nimport {ImageDataUtil} from \"../../../utils/ImageDataUtil\";\r\n\r\ninterface IProps {\r\n    addImageData: (imageData: ImageData[]) => any;\r\n}\r\n\r\nconst LoadMoreImagesPopup: React.FC<IProps> = ({addImageData}) => {\r\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\r\n        accept: AcceptedFileType.IMAGE\r\n    });\r\n\r\n    const onAccept = () => {\r\n        if (acceptedFiles.length > 0) {\r\n            addImageData(acceptedFiles.map((fileData:File) => ImageDataUtil.createImageDataFromFileData(fileData)));\r\n            PopupActions.close();\r\n        }\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    const getDropZoneContent = () => {\r\n        if (acceptedFiles.length === 0)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Add new images</p>\r\n                <p>or</p>\r\n                <p className=\"extraBold\">Click here to select them</p>\r\n            </>;\r\n        else if (acceptedFiles.length === 1)\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">1 new image loaded</p>\r\n            </>;\r\n        else\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    key={1}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p key={2} className=\"extraBold\">{acceptedFiles.length} new images loaded</p>\r\n            </>;\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return(<div className=\"LoadMoreImagesPopupContent\">\r\n            <div {...getRootProps({className: 'DropZone'})}>\r\n                {getDropZoneContent()}\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={\"Load more images\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Load\"}\r\n            disableAcceptButton={acceptedFiles.length < 1}\r\n            onAccept={onAccept}\r\n            rejectLabel={\"Cancel\"}\r\n            onReject={onReject}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    addImageData\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LoadMoreImagesPopup);","export enum AIModel {\r\n    OBJECT_DETECTION = \"OBJECT_DETECTION\",\r\n    POSE_DETECTION = \"POSE_DETECTION\"\r\n}","import React, { useState } from \"react\";\r\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\r\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport { ObjectDetector } from \"../../../ai/ObjectDetector\";\r\nimport './LoadModelPopup.scss'\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { AIModel } from \"../../../data/enums/AIModel\";\r\nimport { PoseDetector } from \"../../../ai/PoseDetector\";\r\nimport { findLast } from \"lodash\";\r\nimport { CSSHelper } from \"../../../logic/helpers/CSSHelper\";\r\n\r\ninterface SelectableModel {\r\n    model: AIModel,\r\n    name: string,\r\n    flag: boolean\r\n}\r\n\r\nconst models: SelectableModel[] = [\r\n    {\r\n        model: AIModel.OBJECT_DETECTION,\r\n        name: \"COCO SSD - object detection using rectangles\",\r\n        flag: false\r\n    },\r\n    {\r\n        model: AIModel.POSE_DETECTION,\r\n        name: \"POSE-NET - pose estimation using points\",\r\n        flag: false\r\n    }\r\n];\r\n\r\nexport const LoadModelPopup: React.FC = () => {\r\n    const [modelIsLoadingStatus, setModelIsLoadingStatus] = useState(false);\r\n    const [selectedModelToLoad, updateSelectedModelToLoad] = useState(models);\r\n\r\n    const onAccept = () => {\r\n        setModelIsLoadingStatus(true);\r\n        switch (extractSelectedModel()) {\r\n            case AIModel.POSE_DETECTION:\r\n                PoseDetector.loadModel(() => {\r\n                    PopupActions.close();\r\n                });\r\n                break;\r\n            case AIModel.OBJECT_DETECTION:\r\n                ObjectDetector.loadModel(() => {\r\n                    PopupActions.close();\r\n                });\r\n                break;\r\n        }\r\n    };\r\n\r\n    const extractSelectedModel = (): AIModel => {\r\n        const model: SelectableModel = findLast(selectedModelToLoad, { flag: true });\r\n        if (!!model) {\r\n            return model.model\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const onSelect = (selectedModel: AIModel) => {\r\n        const nextSelectedModelToLoad: SelectableModel[] = selectedModelToLoad.map((model: SelectableModel) => {\r\n            if (model.model === selectedModel)\r\n                return {\r\n                    ...model,\r\n                    flag: !model.flag\r\n                };\r\n            else\r\n                return {\r\n                    ...model,\r\n                    flag: false\r\n                };\r\n        });\r\n        updateSelectedModelToLoad(nextSelectedModelToLoad);\r\n    };\r\n\r\n    const getOptions = () => {\r\n        return selectedModelToLoad.map((entry: SelectableModel) => {\r\n            return <div\r\n                className=\"OptionsItem\"\r\n                onClick={() => onSelect(entry.model)}\r\n                key={entry.model}\r\n            >\r\n                {entry.flag ?\r\n                    <img\r\n                        draggable={false}\r\n                        src={\"ico/checkbox-checked.png\"}\r\n                        alt={\"checked\"}\r\n                    /> :\r\n                    <img\r\n                        draggable={false}\r\n                        src={\"ico/checkbox-unchecked.png\"}\r\n                        alt={\"unchecked\"}\r\n                    />}\r\n                {entry.name}\r\n            </div>\r\n        })\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return <div className=\"LoadModelPopupContent\">\r\n            <div className=\"Message\">\r\n                To speed up your work, you can use our AI, which will try to mark objects on your images. Don't worry,\r\n                your photos are still safe. To take care of your privacy, we decided not to send your images to the\r\n                server, but instead send our AI to you. When accepting, make sure that you have a fast and stable\r\n                connection - it may take a few minutes to load the model.\r\n            </div>\r\n            <div className=\"Companion\">\r\n                {modelIsLoadingStatus ?\r\n                    <ClipLoader\r\n                        size={40}\r\n                        color={CSSHelper.getLeadingColor()}\r\n                        loading={true}\r\n                    /> :\r\n                    <div className=\"Options\">\r\n                        {getOptions()}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    };\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={\"Say hello to AI\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Use model!\"}\r\n            onAccept={onAccept}\r\n            disableAcceptButton={modelIsLoadingStatus || !extractSelectedModel()}\r\n            rejectLabel={\"I'm going on my own\"}\r\n            onReject={onReject}\r\n            disableRejectButton={modelIsLoadingStatus}\r\n        />\r\n    );\r\n};","import React, {useState} from 'react'\r\nimport './SuggestLabelNamesPopup.scss'\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {updateRejectedSuggestedLabelList, updateSuggestedLabelList} from \"../../../store/ai/actionCreators\";\r\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {PopupActions} from \"../../../logic/actions/PopupActions\";\r\nimport {AISelector} from \"../../../store/selectors/AISelector\";\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {LabelName} from \"../../../store/labels/types\";\r\nimport {updateLabelNames} from \"../../../store/labels/actionCreators\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\nimport uuidv4 from 'uuid/v4';\r\n\r\ninterface SelectableName {\r\n    name: string;\r\n    flag: boolean;\r\n}\r\n\r\ninterface IProps {\r\n    updateLabelNames: (labels: LabelName[]) => any,\r\n    updateSuggestedLabelList: (labelList: string[]) => any;\r\n    updateRejectedSuggestedLabelList: (labelList: string[]) => any;\r\n}\r\n\r\nconst SuggestLabelNamesPopup: React.FC<IProps> = (\r\n    {\r\n        updateLabelNames,\r\n        updateSuggestedLabelList,\r\n        updateRejectedSuggestedLabelList\r\n    }) => {\r\n\r\n    const mapNamesToSelectableNames = (names: string[]): SelectableName[] => {\r\n        return names.map((name: string) => {\r\n            return {\r\n                name: name,\r\n                flag: false\r\n            }\r\n        })\r\n    };\r\n\r\n    const [selectAllFlag, setSelectAllFlag] = useState(false);\r\n    const [labelNames, setLabelNames] = useState(mapNamesToSelectableNames(AISelector.getSuggestedLabelList()));\r\n\r\n    const onAccept = () => {\r\n        updateLabelNames(extractSelectedNames().reduce((acc: LabelName[], entry: string) => {\r\n            acc.push({\r\n                name: entry,\r\n                id: uuidv4()\r\n            });\r\n            return acc;\r\n        }, LabelsSelector.getLabelNames()));\r\n        updateRejectedSuggestedLabelList(AISelector.getRejectedSuggestedLabelList().concat(extractUnselectedNames()));\r\n        updateSuggestedLabelList([]);\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onReject = () => {\r\n        updateRejectedSuggestedLabelList(AISelector.getRejectedSuggestedLabelList().concat(extractNames()));\r\n        updateSuggestedLabelList([]);\r\n        PopupActions.close();\r\n    };\r\n\r\n    const selectAll = () => {\r\n        setSelectAllFlag(true);\r\n        setLabelNames(labelNames.map((entry: SelectableName) => {\r\n            return {\r\n                ...entry,\r\n                flag: true\r\n            }\r\n        }))\r\n    };\r\n\r\n    const deselectAll = () => {\r\n        setSelectAllFlag(false);\r\n        setLabelNames(labelNames.map((entry: SelectableName) => {\r\n            return {\r\n                ...entry,\r\n                flag: false\r\n            }\r\n        }))\r\n    };\r\n\r\n    const toggleSelectableNameByIndex = (index: number) => {\r\n        const nextLabelNames: SelectableName[] = labelNames.map((entry: SelectableName, entryIndex: number) => {\r\n            if (index === entryIndex)\r\n                return {\r\n                    ...entry,\r\n                    flag: !entry.flag\r\n                };\r\n            else\r\n                return entry;\r\n        });\r\n        setLabelNames(nextLabelNames);\r\n\r\n        const nextSelectAllFlag: boolean = nextLabelNames.reduce((acc: boolean, entry: SelectableName) => {\r\n            return(acc && entry.flag)\r\n        }, true);\r\n        setSelectAllFlag(nextSelectAllFlag);\r\n    };\r\n\r\n    const extractSelectedNames = (): string[] => {\r\n        return labelNames.reduce((acc: string[], entry: SelectableName) => {\r\n            if (entry.flag) {\r\n                acc.push(entry.name);\r\n            }\r\n            return acc;\r\n        }, [])\r\n    };\r\n\r\n    const extractUnselectedNames = (): string[] => {\r\n        return labelNames.reduce((acc: string[], entry: SelectableName) => {\r\n            if (!entry.flag) {\r\n                acc.push(entry.name);\r\n            }\r\n            return acc;\r\n        }, [])\r\n    };\r\n\r\n    const extractNames = (): string[] => {\r\n        return labelNames.map((entry: SelectableName) => entry.name);\r\n    };\r\n\r\n    const getOptions = () => {\r\n        return labelNames.map((entry: SelectableName, index: number) => {\r\n            return <div\r\n                className=\"OptionsItem\"\r\n                onClick={() => toggleSelectableNameByIndex(index)}\r\n                key={index}\r\n            >\r\n                {entry.flag ?\r\n                    <img\r\n                        draggable={false}\r\n                        src={\"ico/checkbox-checked.png\"}\r\n                        alt={\"checked\"}\r\n                    /> :\r\n                    <img\r\n                        draggable={false}\r\n                        src={\"ico/checkbox-unchecked.png\"}\r\n                        alt={\"unchecked\"}\r\n                    />}\r\n                {entry.name}\r\n            </div>\r\n        })\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return(<div className=\"SuggestLabelNamesPopupContent\">\r\n            <div className=\"Message\">\r\n                We found objects of classes that are not yet included in the list of labels. Select the names you\r\n                would like to add. This will help to speed up the labeling process.\r\n            </div>\r\n            <div className=\"AllToggle\">\r\n                <div\r\n                    className=\"OptionsItem\"\r\n                    onClick={() => selectAllFlag ? deselectAll() : selectAll()}\r\n                >\r\n                    {selectAllFlag ?\r\n                        <img\r\n                            draggable={false}\r\n                            src={\"ico/checkbox-checked.png\"}\r\n                            alt={\"checked\"}\r\n                        /> :\r\n                        <img\r\n                            draggable={false}\r\n                            src={\"ico/checkbox-unchecked.png\"}\r\n                            alt={\"unchecked\"}\r\n                        />}\r\n                    {selectAllFlag ? \"Deselect all\" : \"Select all\"}\r\n                </div>\r\n            </div>\r\n            <div className=\"LabelNamesContainer\">\r\n                <Scrollbars autoHeight={true}>\r\n                    <div\r\n                        className=\"LabelNamesContent\"\r\n                    >\r\n                        {getOptions()}\r\n                    </div>\r\n                </Scrollbars>\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={\"New classes found\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Accept\"}\r\n            onAccept={onAccept}\r\n            rejectLabel={\"Reject\"}\r\n            onReject={onReject}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateLabelNames,\r\n    updateSuggestedLabelList,\r\n    updateRejectedSuggestedLabelList\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SuggestLabelNamesPopup);","import React, {useState} from 'react'\r\nimport './GenericLabelTypePopup.scss'\r\nimport {LabelType} from \"../../../data/enums/LabelType\";\r\nimport {AppState} from \"../../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\r\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport {ILabelToolkit, LabelToolkitData} from \"../../../data/info/LabelToolkitData\";\r\nimport {ProjectType} from \"../../../data/enums/ProjectType\";\r\n\r\ninterface IProps {\r\n    title: string,\r\n    activeLabelType: LabelType,\r\n    projectType: ProjectType;\r\n    onLabelTypeChange?: (labelType: LabelType) => any;\r\n    acceptLabel: string;\r\n    onAccept: (labelType: LabelType) => any;\r\n    skipAcceptButton?: boolean;\r\n    disableAcceptButton?: boolean;\r\n    rejectLabel: string;\r\n    onReject: (labelType: LabelType) => any;\r\n    renderInternalContent: (labelType: LabelType) => any;\r\n}\r\n\r\nconst GenericLabelTypePopup: React.FC<IProps> = (\r\n    {\r\n        title,\r\n        activeLabelType,\r\n        projectType,\r\n        onLabelTypeChange,\r\n        acceptLabel,\r\n        onAccept,\r\n        skipAcceptButton,\r\n        disableAcceptButton,\r\n        rejectLabel,\r\n        onReject,\r\n        renderInternalContent\r\n    }) => {\r\n\r\n    const [labelType, setLabelType] = useState(activeLabelType);\r\n\r\n    const getSidebarButtons = () => {\r\n        return LabelToolkitData\r\n            .filter((label: ILabelToolkit) => label.labelType === labelType)\r\n            .map((label: ILabelToolkit) => {\r\n                return <ImageButton\r\n                    image={label.imageSrc}\r\n                    imageAlt={label.imageAlt}\r\n                    buttonSize={{width: 40, height: 40}}\r\n                    padding={20}\r\n                    onClick={() => {\r\n                        setLabelType(label.labelType);\r\n                        onLabelTypeChange(label.labelType);\r\n                    }}\r\n                    isActive={labelType === label.labelType}\r\n                />\r\n            })\r\n    }\r\n\r\n    const renderContent = () => {\r\n        return (<div className=\"GenericLabelTypePopupContent\">\r\n            <div className=\"LeftContainer\">\r\n                {getSidebarButtons()}\r\n            </div>\r\n            <div className=\"RightContainer\">\r\n                {renderInternalContent(labelType)}\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    return(\r\n        <GenericYesNoPopup\r\n            title={title}\r\n            renderContent={renderContent}\r\n            acceptLabel={acceptLabel}\r\n            onAccept={() => onAccept(labelType)}\r\n            skipAcceptButton={skipAcceptButton}\r\n            disableAcceptButton={disableAcceptButton}\r\n            rejectLabel={rejectLabel}\r\n            onReject={() => onReject(labelType)}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectType: state.general.projectData.type\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(GenericLabelTypePopup);","export enum AnnotationFormatType {\r\n    YOLO = \"YOLO\",\r\n    COCO = \"COCO\",\r\n    CSV = \"CSV\",\r\n    JSON = \"JSON\",\r\n    VOC = \"VOC\",\r\n    VGG = \"VGG\"\r\n}","import {LabelType} from \"./enums/LabelType\";\r\nimport {ILabelFormatData} from \"../interfaces/ILabelFormatData\";\r\nimport {AnnotationFormatType} from \"./enums/AnnotationFormatType\";\r\n\r\nexport type ImportFormatDataMap = Record<LabelType, ILabelFormatData[]>\r\n\r\nexport const ImportFormatData: ImportFormatDataMap = {\r\n    \"RECT\": [\r\n        // {\r\n        //     type: AnnotationFormatType.COCO,\r\n        //     label: \"Upload custom annotation files.\"\r\n        // },\r\n        {\r\n            type: AnnotationFormatType.YOLO,\r\n            label: \"load/use existing annotation files from server.\"\r\n        }\r\n    ],\r\n    \"POINT\": [],\r\n    \"LINE\": [],\r\n    \"POLYGON\": [\r\n        {\r\n            type: AnnotationFormatType.COCO,\r\n            label: \"Single file in COCO JSON format.\"\r\n        }\r\n    ],\r\n    \"IMAGE RECOGNITION\": []\r\n}","import React from 'react';\r\nimport './FeatureInProgress.scss';\r\n\r\nexport const FeatureInProgress: React.FC = () => {\r\n    return(\r\n        <div\r\n            className=\"FeatureInProgress\"\r\n        >\r\n            <img\r\n                draggable={false}\r\n                alt={\"take_off\"}\r\n                src={\"ico/take-off.png\"}\r\n            />\r\n            <p className=\"extraBold\">new feature <br/> coming soon...</p>\r\n        </div>\r\n    )\r\n};","export type PartitionResult<T> = {\r\n    pass: T[]\r\n    fail: T[]\r\n}\r\n\r\nexport class ArrayUtilAmbiguousMatchError extends Error {\r\n    constructor() {\r\n        super(\"Given predicate results in more than one value being matched.\");\r\n        this.name = \"ArrayUtilAmbiguousMatchError\";\r\n    }\r\n}\r\n\r\nexport class ArrayUtil {\r\n    public static partition<T>(array: T[], predicate: (T) => boolean): PartitionResult<T> {\r\n        return array.reduce((acc: PartitionResult<T>, item: T) => {\r\n            if (predicate(item))\r\n                acc.pass.push(item)\r\n            else\r\n                acc.fail.push(item)\r\n            return acc\r\n        }, {pass: [], fail: []})\r\n    }\r\n\r\n    public static match<T, P>(array1: T[], array2: P[], predicate: (key: T, value: P) => boolean): [T, P][] {\r\n        return array1.reduce((acc: [T, P][], key: T) => {\r\n            const match = array2.filter((value: P) => predicate(key, value))\r\n            if (match.length === 1) {\r\n                acc.push([key, match[0]])\r\n            } else if (match.length > 1) {\r\n                throw new ArrayUtilAmbiguousMatchError()\r\n            }\r\n            return acc\r\n        }, [])\r\n    }\r\n\r\n    public static unzip<T, P>(array: [T, P][]): [T[], P[]] {\r\n        return array.reduce((acc: [T[], P[]], i: [T, P]) => {\r\n            acc[0].push(i[0]);\r\n            acc[1].push(i[1]);\r\n            return acc;\r\n        }, [[], []])\r\n    }\r\n}","export class COCOAnnotationsLoadingError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = \"COCOAnnotationsLoadingError\";\r\n    }\r\n}\r\n\r\nexport class COCOFormatValidationError extends COCOAnnotationsLoadingError {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = \"COCOFormatValidationError\";\r\n    }\r\n}\r\n\r\nexport class COCOAnnotationReadingError extends COCOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"Unexpected error occurred during reading annotations from file\");\r\n        this.name = \"COCOAnnotationReadingError\";\r\n    }\r\n}\r\n\r\nexport class COCOAnnotationDeserializationError extends COCOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"COCO annotation file need to be in JSON format\");\r\n        this.name = \"COCOAnnotationDeserializationError\";\r\n    }\r\n}\r\n\r\nexport class COCOAnnotationFileCountError extends COCOAnnotationsLoadingError {\r\n    constructor() {\r\n        super(\"COCO annotation requires single file but multiple were given\");\r\n        this.name = \"COCOAnnotationFileCountError\";\r\n    }\r\n}","import {ImageData, LabelName} from \"../../store/labels/types\";\r\nimport {LabelType} from \"../../data/enums/LabelType\";\r\n\r\nexport type ImportResult = {\r\n    imagesData: ImageData[]\r\n    labelNames: LabelName[]\r\n}\r\n\r\nexport class AnnotationImporter {\r\n    public labelType: LabelType[]\r\n\r\n    constructor(labelType: LabelType[]) {\r\n        this.labelType = labelType;\r\n    }\r\n\r\n    public import(\r\n        filesData: File[],\r\n        onSuccess: (imagesData: ImageData[], labelNames: LabelName[]) => any,\r\n        onFailure: (error?:Error) => any\r\n    ): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}","import {COCOBBox, COCOSegmentation} from \"../../../data/labels/COCO\";\r\nimport {IRect} from \"../../../interfaces/IRect\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\nimport {chunk} from \"lodash\";\r\n\r\nexport class COCOUtils {\r\n    public static bbox2rect(bbox: COCOBBox): IRect {\r\n        return {\r\n            x: bbox[0],\r\n            y: bbox[1],\r\n            width: bbox[2],\r\n            height: bbox[3]\r\n        }\r\n    }\r\n\r\n    public static segmentation2vertices(segmentation: COCOSegmentation): IPoint[][] {\r\n        return segmentation.map((segment: number[]) => {\r\n            return chunk(segment, 2).map((pair: number[]) => {\r\n                return {x: pair[0], y: pair[1]}\r\n            })\r\n        })\r\n    }\r\n}","import {ImageData, LabelName} from \"../../../store/labels/types\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\nimport {COCOCategory, COCOImage, COCOObject} from \"../../../data/labels/COCO\";\r\nimport uuidv4 from 'uuid/v4';\r\nimport {ArrayUtil, PartitionResult} from \"../../../utils/ArrayUtil\";\r\nimport {ImageDataUtil} from \"../../../utils/ImageDataUtil\";\r\nimport {LabelUtil} from \"../../../utils/LabelUtil\";\r\nimport {\r\n    COCOAnnotationDeserializationError,\r\n    COCOAnnotationFileCountError,\r\n    COCOAnnotationReadingError,\r\n    COCOFormatValidationError\r\n} from \"./COCOErrors\";\r\nimport {LabelType} from \"../../../data/enums/LabelType\";\r\nimport {AnnotationImporter, ImportResult} from \"../AnnotationImporter\";\r\nimport {COCOUtils} from \"./COCOUtils\";\r\n\r\nexport type FileNameCOCOIdMap = {[ fileName: string]: number; }\r\nexport type LabelNameMap = { [labelCOCOId: number]: LabelName; }\r\nexport type ImageDataMap = { [imageCOCOId: number]: ImageData; }\r\n\r\nexport class COCOImporter extends AnnotationImporter {\r\n    public static requiredKeys = [\"images\", \"annotations\", \"categories\"]\r\n\r\n    public import(\r\n        filesData: File[],\r\n        onSuccess: (imagesData: ImageData[], labelNames: LabelName[]) => any,\r\n        onFailure: (error?:Error) => any\r\n    ): void {\r\n        if (filesData.length > 1) {\r\n            onFailure(new COCOAnnotationFileCountError());\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.readAsText(filesData[0]);\r\n        reader.onloadend = (evt: any) => {\r\n            try {\r\n                const inputImagesData: ImageData[] = LabelsSelector.getImagesData();\r\n                const annotations = COCOImporter.deserialize(evt.target.result)\r\n                const {imagesData, labelNames} = this.applyLabels(inputImagesData, annotations);\r\n                onSuccess(imagesData,labelNames);\r\n            } catch (error) {\r\n                onFailure(error);\r\n            }\r\n        };\r\n        reader.onerror = () => onFailure(new COCOAnnotationReadingError());\r\n    }\r\n\r\n    public static deserialize(text: string): COCOObject {\r\n        try {\r\n            return JSON.parse(text) as COCOObject\r\n        } catch (error) {\r\n            throw new COCOAnnotationDeserializationError()\r\n        }\r\n    }\r\n\r\n    public applyLabels(imageData: ImageData[], annotationsObject: COCOObject): ImportResult {\r\n        COCOImporter.validateCocoFormat(annotationsObject);\r\n        const {images, categories, annotations} = annotationsObject;\r\n        const labelNameMap: LabelNameMap = COCOImporter.mapCOCOCategories(categories);\r\n        const cleanImageData: ImageData[] = imageData.map((item: ImageData) => ImageDataUtil.cleanAnnotations(item));\r\n        const imageDataPartition: PartitionResult<ImageData> = COCOImporter.partitionImageData(cleanImageData, images);\r\n        const imageDataMap: ImageDataMap = COCOImporter.mapImageData(imageDataPartition.pass, images);\r\n\r\n        for (const annotation of annotations) {\r\n            if (!imageDataMap[annotation.image_id] || annotation.iscrowd === 1)\r\n                continue\r\n\r\n            if (this.labelType.includes(LabelType.RECT)) {\r\n                imageDataMap[annotation.image_id].labelRects.push(LabelUtil.createLabelRect(\r\n                    labelNameMap[annotation.category_id].id,\r\n                    COCOUtils.bbox2rect(annotation.bbox)\r\n                ))\r\n            }\r\n\r\n            if (this.labelType.includes(LabelType.POLYGON)) {\r\n                const polygons = COCOUtils.segmentation2vertices(annotation.segmentation);\r\n                for (const polygon of polygons) {\r\n                    imageDataMap[annotation.image_id].labelPolygons.push(LabelUtil.createLabelPolygon(\r\n                        labelNameMap[annotation.category_id].id, polygon\r\n                    ))\r\n                }\r\n            }\r\n        }\r\n\r\n        const resultImageData = Object.values(imageDataMap).concat(imageDataPartition.fail);\r\n\r\n        return {\r\n            imagesData: ImageDataUtil.arrange(resultImageData, imageData.map((item: ImageData) => item.id)),\r\n            labelNames: Object.values(labelNameMap)\r\n        }\r\n    }\r\n\r\n    protected static partitionImageData(items: ImageData[], images: COCOImage[]): PartitionResult<ImageData> {\r\n        const imageNames: string[] = images.map((item: COCOImage) => item.file_name);\r\n        const predicate = (item: ImageData) => imageNames.includes(item.fileData.name);\r\n        return ArrayUtil.partition<ImageData>(items, predicate);\r\n    }\r\n\r\n    protected static mapCOCOCategories(categories: COCOCategory[]): LabelNameMap {\r\n        return categories.reduce((acc: LabelNameMap, category : COCOCategory) => {\r\n            acc[category.id] = {\r\n                id: uuidv4(),\r\n                name: category.name\r\n            }\r\n            return acc\r\n        }, {});\r\n    }\r\n\r\n    protected static mapImageData(items: ImageData[], images: COCOImage[]): ImageDataMap {\r\n        const fileNameCOCOIdMap: FileNameCOCOIdMap = images.reduce((acc: FileNameCOCOIdMap, image: COCOImage) => {\r\n            acc[image.file_name] = image.id\r\n            return acc\r\n        }, {});\r\n        return  items.reduce((acc: ImageDataMap, image: ImageData) => {\r\n            acc[fileNameCOCOIdMap[image.fileData.name]] = image\r\n            return acc;\r\n        }, {});\r\n    }\r\n\r\n    public static validateCocoFormat(annotationsObject: COCOObject): void {\r\n        const missingKeys = COCOImporter.requiredKeys.filter((key: string) => !annotationsObject.hasOwnProperty(key))\r\n        if (missingKeys.length !== 0) {\r\n            throw new COCOFormatValidationError(`Uploaded file does not contain all required keys: ${missingKeys}`)\r\n        }\r\n    }\r\n}","import {AnnotationImporter} from \"../AnnotationImporter\";\r\nimport {ImageData, LabelName} from \"../../../store/labels/types\";\r\nimport {FileUtil} from \"../../../utils/FileUtil\";\r\nimport {ArrayUtil} from \"../../../utils/ArrayUtil\";\r\nimport {NoLabelNamesFileProvidedError} from \"./YOLOErrors\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\nimport {YOLOUtils} from \"./YOLOUtils\";\r\nimport {ImageDataUtil} from \"../../../utils/ImageDataUtil\";\r\nimport {zip, find} from \"lodash\";\r\nimport {ImageRepository} from \"../../imageRepository/ImageRepository\";\r\n\r\nexport type YOLOFilesSpec = {\r\n    labelNameFile: File\r\n    annotationFiles: File[]\r\n}\r\n\r\nexport class YOLOImporter extends AnnotationImporter {\r\n    private static labelsFileName: string = \"labels.txt\"\r\n\r\n    public import(\r\n        filesData: File[],\r\n        onSuccess: (imagesData: ImageData[], labelNames: LabelName[]) => any,\r\n        onFailure: (error?:Error) => any\r\n    ): void {\r\n        try {\r\n            const sourceImagesData = LabelsSelector.getImagesData()\r\n                .map((i: ImageData) => ImageDataUtil.cleanAnnotations(i));\r\n            const {labelNameFile, annotationFiles} = YOLOImporter.filterFilesData(filesData, sourceImagesData);\r\n            console.log(\"sourceImagesData\") \r\n            console.log(sourceImagesData)\r\n            console.log(\"labelNameFile\")\r\n            console.log(labelNameFile)\r\n            console.log(\"annotationFiles\")\r\n            console.log(annotationFiles)\r\n            const [relevantImageData, relevantAnnotations] = YOLOImporter\r\n                .matchImagesWithAnnotations(sourceImagesData, annotationFiles);\r\n            const labelNamesPromise: Promise<LabelName[]> = FileUtil.readFile(labelNameFile)\r\n                .then((fileContent: string) => YOLOUtils.parseLabelsNamesFromString(fileContent));\r\n            const missingImagesPromise: Promise<void> = ImageDataUtil.loadMissingImages(relevantImageData);\r\n            const annotationFilesPromise: Promise<string[]> = FileUtil.readFiles(relevantAnnotations);\r\n            Promise\r\n                .all([labelNamesPromise, missingImagesPromise, annotationFilesPromise])\r\n                .then((values: [LabelName[], void, string[]]) => {\r\n                    const [labelNames, , annotationsRaw] = values;\r\n                    const resultImageData = zip<ImageData, string>(relevantImageData, annotationsRaw)\r\n                        .map((pair: [ImageData, string]) => YOLOImporter.applyAnnotations(pair[0], pair[1], labelNames))\r\n                    onSuccess(YOLOImporter.injectImageDataWithAnnotations(sourceImagesData, resultImageData), labelNames);\r\n                })\r\n                .catch((error: Error) => onFailure(error))\r\n        } catch (error) {\r\n            onFailure(error)\r\n        }\r\n    };\r\n\r\n    public static filterFilesData(filesData: File[], imagesData: ImageData[]): YOLOFilesSpec {\r\n        console.log(filesData)\r\n        const functionalityPartitionResult = ArrayUtil.partition(\r\n            filesData,\r\n            (i: File) => i.name === YOLOImporter.labelsFileName\r\n        )\r\n        if (functionalityPartitionResult.pass.length !== 1) {\r\n            throw new NoLabelNamesFileProvidedError()\r\n        }\r\n        const imageIdentifiers: string[] = imagesData\r\n            .map((i: ImageData) => i.fileName)\r\n            .map((i: string) => FileUtil.extractFileName(i).split(\"/\")[1])\r\n        console.log(imageIdentifiers)    \r\n        const matchingPartitionResult = ArrayUtil.partition(\r\n            filesData,\r\n            (i: File) => imageIdentifiers.includes(FileUtil.extractFileName(i.name))\r\n        )\r\n        return {\r\n            labelNameFile: functionalityPartitionResult.pass[0],\r\n            annotationFiles: matchingPartitionResult.pass\r\n        }\r\n    }\r\n\r\n    public static matchImagesWithAnnotations(images: ImageData[], annotations: File[]): [ImageData[], File[]] {\r\n        const predicate = (image: ImageData, annotation:  File) => {\r\n            return FileUtil.extractFileName(image.fileName).split(\"/\")[1] === FileUtil.extractFileName(annotation.name)\r\n        }\r\n        return ArrayUtil.unzip(\r\n            ArrayUtil.match<ImageData, File>(images, annotations, predicate)\r\n        );\r\n    }\r\n\r\n    public static applyAnnotations(imageData: ImageData, rawAnnotations: string, labelNames: LabelName[]): ImageData {\r\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n        imageData.labelRects = YOLOUtils.parseYOLOAnnotationsFromString(\r\n            rawAnnotations,\r\n            labelNames,\r\n            {width: image.width, height: image.height},\r\n            imageData.fileName\r\n        );\r\n        return imageData;\r\n    }\r\n\r\n    public static injectImageDataWithAnnotations(sourceImageData: ImageData[], annotatedImageData: ImageData[]): ImageData[] {\r\n        return sourceImageData.map((i: ImageData) => {\r\n            const result = find(annotatedImageData, {id: i.id});\r\n            return !!result ? result : i;\r\n        })\r\n    }\r\n}","import {AnnotationFormatType} from \"./enums/AnnotationFormatType\";\r\nimport {AnnotationImporter} from \"../logic/import/AnnotationImporter\";\r\nimport {COCOImporter} from \"../logic/import/coco/COCOImporter\";\r\nimport {YOLOImporter} from \"../logic/import/yolo/YOLOImporter\";\r\n\r\nexport type ImporterSpecDataMap = { [s in AnnotationFormatType]: typeof AnnotationImporter; };\r\n\r\n\r\nexport const ImporterSpecData: ImporterSpecDataMap = {\r\n    COCO: COCOImporter,\r\n    CSV: undefined,\r\n    JSON: undefined,\r\n    VGG: undefined,\r\n    VOC: undefined,\r\n    YOLO: YOLOImporter\r\n}","import React, { useState, useEffect } from 'react'\r\nimport './ImportLabelPopup.scss'\r\nimport { LabelType } from \"../../../data/enums/LabelType\";\r\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\r\nimport GenericLabelTypePopup from \"../GenericLabelTypePopup/GenericLabelTypePopup\";\r\nimport { ImportFormatData } from \"../../../data/ImportFormatData\";\r\nimport { FeatureInProgress } from \"../../EditorView/FeatureInProgress/FeatureInProgress\";\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { AcceptedFileType } from \"../../../data/enums/AcceptedFileType\";\r\nimport { ImageData, LabelName } from \"../../../store/labels/types\";\r\nimport { updateActiveLabelType, updateImageData, updateLabelNames } from \"../../../store/labels/actionCreators\";\r\nimport { ImporterSpecData } from \"../../../data/ImporterSpecData\";\r\nimport { AnnotationFormatType } from \"../../../data/enums/AnnotationFormatType\";\r\nimport { ILabelFormatData } from \"../../../interfaces/ILabelFormatData\";\r\nimport axios from \"axios\";\r\nimport { annotationList, rootUrl } from '../../../url/ApiUrl';\r\n\r\ninterface IProps {\r\n    activeLabelType: LabelType,\r\n    configFolder: String,\r\n    updateImageData: (imageData: ImageData[]) => any,\r\n    updateLabelNames: (labels: LabelName[]) => any,\r\n    updateActiveLabelType: (activeLabelType: LabelType) => any\r\n}\r\n\r\nconst ImportLabelPopup: React.FC<IProps> = (\r\n    {\r\n        activeLabelType,\r\n        configFolder,\r\n        updateImageData,\r\n        updateLabelNames,\r\n        updateActiveLabelType\r\n    }) => {\r\n    const resolveFormatType = (labelType: LabelType): AnnotationFormatType => {\r\n        const possibleImportFormats = ImportFormatData[labelType]\r\n        return possibleImportFormats.length === 1 ? possibleImportFormats[0].type : null\r\n    }\r\n\r\n    const [labelType, setLabelType] = useState(activeLabelType);\r\n    const [formatType, setFormatType] = useState(resolveFormatType(activeLabelType));\r\n    const [loadedLabelNames, setLoadedLabelNames] = useState([]);\r\n    const [loadedImageData, setLoadedImageData] = useState([]);\r\n    const [annotationsLoadedError, setAnnotationsLoadedError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(annotationList, {\r\n                params: {\r\n                    dir: configFolder\r\n                }\r\n            })\r\n            .then(async (response) => {\r\n                console.log(response.data.files);\r\n                const annotationFiles: File[] = [];\r\n                // await response.data.files.forEach(async fileName =>\r\n                for (const fileName of response.data.files) {\r\n                    try {\r\n                        let res = await axios.get(rootUrl + configFolder + \"/\" + fileName)\r\n                        let file = new File([res.data], fileName)\r\n                        annotationFiles.push(file)\r\n                        console.log(annotationFiles)\r\n                    }\r\n                    catch (error) {\r\n                        console.log(error);\r\n                    }\r\n                }\r\n                return annotationFiles\r\n            })\r\n            .then((files) => {\r\n                console.log(files)\r\n                const importer = new (ImporterSpecData[formatType])([labelType])\r\n                importer.import(files, onAnnotationLoadSuccess, onAnnotationsLoadFailure);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }, [])\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        accept: [AcceptedFileType.JSON, AcceptedFileType.TEXT],\r\n        multiple: true,\r\n        onDrop: (acceptedFiles) => {\r\n            console.log(acceptedFiles)\r\n            console.log(labelType)\r\n            const importer = new (ImporterSpecData[formatType])([labelType])\r\n            importer.import(acceptedFiles, onAnnotationLoadSuccess, onAnnotationsLoadFailure);\r\n        }\r\n    });\r\n\r\n    const onLabelTypeChange = (labelType: LabelType) => {\r\n        setLabelType(labelType);\r\n        setFormatType(resolveFormatType(labelType))\r\n        setLoadedLabelNames([]);\r\n        setLoadedImageData([]);\r\n        setAnnotationsLoadedError(null);\r\n    }\r\n\r\n    const onAnnotationLoadSuccess = (imagesData: ImageData[], labelNames: LabelName[]) => {\r\n        setLoadedLabelNames(labelNames);\r\n        setLoadedImageData(imagesData);\r\n        setAnnotationsLoadedError(null);\r\n    }\r\n\r\n    const onAnnotationsLoadFailure = (error?: Error) => {\r\n        setLoadedLabelNames([]);\r\n        setLoadedImageData([]);\r\n        setAnnotationsLoadedError(error);\r\n    };\r\n\r\n    const onAccept = (labelType: LabelType) => {\r\n        if (loadedLabelNames.length !== 0 && loadedImageData.length !== 0) {\r\n            updateImageData(loadedImageData);\r\n            updateLabelNames(loadedLabelNames);\r\n            updateActiveLabelType(labelType);\r\n            PopupActions.close();\r\n        }\r\n    };\r\n\r\n    const onReject = (labelType: LabelType) => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onAnnotationFormatChange = (format: AnnotationFormatType) => {\r\n        setFormatType(format);\r\n    }\r\n\r\n    const getDropZoneContent = () => {\r\n        console.log(\"getDropZoneContent\");\r\n        if (!!annotationsLoadedError) {\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Annotation import was unsuccessful</p>\r\n                {annotationsLoadedError.message}\r\n                <p className=\"extraBold\">Try again</p>\r\n            </>;\r\n        } else if (loadedImageData.length !== 0 && loadedLabelNames.length !== 0) {\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">Annotation ready for import</p>\r\n                After import you will lose\r\n                all your current annotations\r\n            </>;\r\n        }\r\n        else {\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">{`Drop ${formatType} annotations`}</p>\r\n                <p>or</p>\r\n                <p className=\"extraBold\">Click here to select them</p>\r\n            </>;\r\n        }\r\n    };\r\n\r\n    const getOptions = (exportFormatData: ILabelFormatData[]) => {\r\n        return exportFormatData.map((entry: ILabelFormatData) => {\r\n            return <div\r\n                className=\"OptionsItem\"\r\n                onClick={() => onAnnotationFormatChange(entry.type)}\r\n                key={entry.type}\r\n            >\r\n                {entry.type === formatType ?\r\n                    <img\r\n                        draggable={false}\r\n                        src={\"ico/checkbox-checked.png\"}\r\n                        alt={\"checked\"}\r\n                    /> :\r\n                    <img\r\n                        draggable={false}\r\n                        src={\"ico/checkbox-unchecked.png\"}\r\n                        alt={\"unchecked\"}\r\n                    />}\r\n                {entry.label}\r\n            </div>\r\n        })\r\n    };\r\n\r\n    const renderInternalContent = (labelType: LabelType) => {\r\n        console.log(\"renderInternalContent\");\r\n        if (!formatType && ImportFormatData[labelType].length !== 0) {\r\n            return [\r\n                <div className=\"Message\">\r\n                    Select import options.\r\n                </div>,\r\n                <div className=\"Options\">\r\n                    {getOptions(ImportFormatData[labelType])}\r\n                </div>\r\n            ]\r\n        }\r\n        const importFormatData = ImportFormatData[labelType];\r\n        console.log(importFormatData)\r\n        return importFormatData.length === 0 ?\r\n            <FeatureInProgress /> :\r\n            <div {...getRootProps({ className: 'DropZone' })}>\r\n                {getDropZoneContent()}\r\n            </div>\r\n    }\r\n\r\n    return (\r\n        <GenericLabelTypePopup\r\n            activeLabelType={labelType}\r\n            title={`Import ${labelType.toLowerCase()} annotations`}\r\n            onLabelTypeChange={onLabelTypeChange}\r\n            acceptLabel={\"Import\"}\r\n            onAccept={onAccept}\r\n            skipAcceptButton={ImportFormatData[labelType].length === 0}\r\n            disableAcceptButton={loadedImageData.length === 0 || loadedLabelNames.length === 0 || !!annotationsLoadedError}\r\n            rejectLabel={\"Cancel\"}\r\n            onReject={onReject}\r\n            renderInternalContent={renderInternalContent}\r\n        />\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    updateImageData,\r\n    updateLabelNames,\r\n    updateActiveLabelType\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelType: state.labels.activeLabelType,\r\n    configFolder: state.general.configFolder\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ImportLabelPopup);","export class XMLSanitizerUtil {\r\n    public static sanitize(input: string): string {\r\n        return input\r\n            .replace('<', '&lt;')\r\n            .replace('>', '&gt;')\r\n            .replace('&', '&amp;')\r\n            .replace(\"'\", '&#39;')\r\n            .replace(\"/\", '&#x2F;')\r\n    }\r\n}","import moment from 'moment';\r\nimport {GeneralSelector} from \"../store/selectors/GeneralSelector\";\r\nimport {saveAs} from \"file-saver\";\r\n\r\nexport class ExporterUtil {\r\n    public static getExportFileName(): string {\r\n        const projectName: string = GeneralSelector.getProjectName();\r\n        const date: string = moment().format('YYYY-MM-DD-hh-mm-ss');\r\n        return `labels_${projectName}_${date}`\r\n    }\r\n\r\n    public static saveAs(content: string, fileName: string): void {\r\n        const blob = new Blob([content], {type: \"text/plain;charset=utf-8\"});\r\n        try {\r\n            saveAs(blob, fileName);\r\n        } catch (error) {\r\n            //TODO: Implement file save error handling\r\n            throw new Error(error);\r\n        }\r\n    }\r\n}","import { AnnotationFormatType } from \"../../data/enums/AnnotationFormatType\";\r\nimport { ImageData, LabelName, LabelRect } from \"../../store/labels/types\";\r\nimport { ImageRepository } from \"../imageRepository/ImageRepository\";\r\nimport JSZip from 'jszip';\r\nimport { saveAs } from 'file-saver';\r\nimport { LabelsSelector } from \"../../store/selectors/LabelsSelector\";\r\nimport { XMLSanitizerUtil } from \"../../utils/XMLSanitizerUtil\";\r\nimport { ExporterUtil } from \"../../utils/ExporterUtil\";\r\nimport { GeneralSelector } from \"../../store/selectors/GeneralSelector\";\r\nimport { findIndex, findLast } from \"lodash\";\r\nimport axios from \"axios\";\r\nimport { saveAnnotations, deleteAllFiles } from \"../../url/ApiUrl\"\r\n\r\nexport class RectLabelsExporter {\r\n    public static async export(exportFormatType: AnnotationFormatType, exportFromDir: String): Promise<void> {\r\n        switch (exportFormatType) {\r\n            case AnnotationFormatType.YOLO:\r\n                await RectLabelsExporter.exportAsYOLO(exportFromDir);\r\n                await RectLabelsExporter.exportAsCSV();\r\n                break;\r\n            case AnnotationFormatType.VOC:\r\n                RectLabelsExporter.exportAsVOC();\r\n                break;\r\n            case AnnotationFormatType.CSV:\r\n                RectLabelsExporter.exportAsCSV();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    private static exportAsYOLO(exportFromDir: String): void {\r\n        console.log(exportFromDir)\r\n        if (exportFromDir === \"captures\") {\r\n            axios.get(deleteAllFiles, {\r\n                params: {\r\n                    dir: \"tables\"\r\n                }\r\n            }).then((files) => {\r\n                console.log(files)\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            })\r\n        }\r\n        // let zip = new JSZip();\r\n        LabelsSelector.getImagesData()\r\n            .forEach((imageData: ImageData) => {\r\n                const fileContent: string = RectLabelsExporter.wrapRectLabelsIntoYOLO(imageData);\r\n                if (fileContent) {\r\n                    console.log(imageData.fileName)\r\n                    let fileName: string;\r\n                    let dir: string;\r\n                    [dir, fileName] = imageData.fileName.split(\"/\")\r\n                    fileName = fileName.replace(/\\.[^/.]+$/, \".txt\");\r\n                    console.log(fileName, dir)\r\n                    try {\r\n                        const formData = new FormData();\r\n                        formData.append(\"annotations\", new Blob([fileContent]), fileName)\r\n                        axios.post(saveAnnotations, formData, {\r\n                            headers: { \"Accept\": 'application/json', \"Content-Type\": \"multipart/form-data\" }, params: {\r\n                                dir: dir,\r\n                                fileName: fileName\r\n                            }\r\n                        })\r\n                        // zip.file(fileName, fileContent);\r\n                    } catch (error: unknown) {\r\n                        // TODO\r\n                        if (error instanceof Error) {\r\n                            throw new Error(error.message);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        // try {\r\n        //     // zip.generateAsync({type:\"blob\"})\r\n        //     //     .then(function(content) {\r\n        //     //         saveAs(content, `${ExporterUtil.getExportFileName()}.zip`);\r\n        //     //     });\r\n        // } catch (error: unknown) {\r\n        //     // TODO\r\n        //     if (error instanceof Error) {\r\n        //         throw new Error(error.message);\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    private static wrapRectLabelsIntoYOLO(imageData: ImageData): string {\r\n        if (imageData.labelRects.length === 0 || !imageData.loadStatus)\r\n            return null;\r\n\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n        const labelRectsString: string[] = imageData.labelRects.map((labelRect: LabelRect) => {\r\n            const labelFields = [\r\n                findIndex(labelNames, { id: labelRect.labelId }).toString(),\r\n                ((labelRect.rect.x + labelRect.rect.width / 2) / image.width).toFixed(6).toString(),\r\n                ((labelRect.rect.y + labelRect.rect.height / 2) / image.height).toFixed(6).toString(),\r\n                (labelRect.rect.width / image.width).toFixed(6).toString(),\r\n                (labelRect.rect.height / image.height).toFixed(6).toString()\r\n            ];\r\n            return labelFields.join(\" \")\r\n        });\r\n        return labelRectsString.join(\"\\n\");\r\n    }\r\n\r\n    private static exportAsVOC(): void {\r\n        let zip = new JSZip();\r\n        LabelsSelector.getImagesData().forEach((imageData: ImageData) => {\r\n            const fileContent: string = RectLabelsExporter.wrapImageIntoVOC(imageData);\r\n            if (fileContent) {\r\n                const fileName: string = imageData.fileName.replace(/\\.[^/.]+$/, \".xml\");\r\n                try {\r\n                    zip.file(fileName, fileContent);\r\n                } catch (error: unknown) {\r\n                    // TODO\r\n                    if (error instanceof Error) {\r\n                        throw new Error(error.message);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        try {\r\n            zip.generateAsync({ type: \"blob\" })\r\n                .then(function (content) {\r\n                    saveAs(content, `${ExporterUtil.getExportFileName()}.zip`);\r\n                });\r\n        } catch (error: unknown) {\r\n            // TODO\r\n            if (error instanceof Error) {\r\n                throw new Error(error.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static wrapRectLabelsIntoVOC(imageData: ImageData): string {\r\n        if (imageData.labelRects.length === 0 || !imageData.loadStatus)\r\n            return null;\r\n\r\n        const labelNamesList: LabelName[] = LabelsSelector.getLabelNames();\r\n        const labelRectsString: string[] = imageData.labelRects.map((labelRect: LabelRect) => {\r\n            const labelName: LabelName = findLast(labelNamesList, { id: labelRect.labelId });\r\n            const labelFields = !!labelName ? [\r\n                `\\t<object>`,\r\n                `\\t\\t<name>${labelName.name}</name>`,\r\n                `\\t\\t<pose>Unspecified</pose>`,\r\n                `\\t\\t<truncated>Unspecified</truncated>`,\r\n                `\\t\\t<difficult>Unspecified</difficult>`,\r\n                `\\t\\t<bndbox>`,\r\n                `\\t\\t\\t<xmin>${Math.round(labelRect.rect.x)}</xmin>`,\r\n                `\\t\\t\\t<ymin>${Math.round(labelRect.rect.y)}</ymin>`,\r\n                `\\t\\t\\t<xmax>${Math.round(labelRect.rect.x + labelRect.rect.width)}</xmax>`,\r\n                `\\t\\t\\t<ymax>${Math.round(labelRect.rect.y + labelRect.rect.height)}</ymax>`,\r\n                `\\t\\t</bndbox>`,\r\n                `\\t</object>`\r\n            ] : [];\r\n            return labelFields.join(\"\\n\")\r\n        });\r\n        return labelRectsString.join(\"\\n\");\r\n    }\r\n\r\n    private static wrapImageIntoVOC(imageData: ImageData): string {\r\n        const labels: string = RectLabelsExporter.wrapRectLabelsIntoVOC(imageData);\r\n        const projectName: string = XMLSanitizerUtil.sanitize(GeneralSelector.getProjectName());\r\n\r\n        if (labels) {\r\n            const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n            return [\r\n                `<annotation>`,\r\n                `\\t<folder>${projectName}</folder>`,\r\n                `\\t<filename>${imageData.fileName}</filename>`,\r\n                `\\t<path>/${projectName}/${imageData.fileName}</path>`,\r\n                `\\t<source>`,\r\n                `\\t\\t<database>Unspecified</database>`,\r\n                `\\t</source>`,\r\n                `\\t<size>`,\r\n                `\\t\\t<width>${image.width}</width>`,\r\n                `\\t\\t<height>${image.height}</height>`,\r\n                `\\t\\t<depth>3</depth>`,\r\n                `\\t</size>`,\r\n                labels,\r\n                `</annotation>`\r\n            ].join(\"\\n\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    private static async exportAsCSV(): Promise<void> {\r\n        // const content: string = LabelsSelector.getImagesData()\r\n        //     .map((imageData: ImageData) => {\r\n        //         return RectLabelsExporter.wrapRectLabelsIntoCSV(imageData)})\r\n        //     .filter((imageLabelData: string) => {\r\n        //         return !!imageLabelData})\r\n        //     .join(\"\\n\");\r\n        // const fileName: string = `${ExporterUtil.getExportFileName()}.csv`;\r\n        // ExporterUtil.saveAs(content, fileName);\r\n        const images: ImageData[] = LabelsSelector.getImagesData()\r\n        // .forEach((imageData: ImageData) => \r\n        for (const imageData of images) {\r\n            const fileContent: string = RectLabelsExporter.wrapRectLabelsIntoCSV(imageData);\r\n            if (fileContent) {\r\n                // console.log(imageData.fileName)\r\n                let fileName: string;\r\n                let dir: string;\r\n                [dir, fileName] = imageData.fileName.split(\"/\")\r\n                if (dir === \"captures\") {\r\n                    fileName = fileName.replace(/\\.[^/.]+$/, \".csv\");\r\n                    // console.log(fileName, dir)\r\n                    try {\r\n                        const formData = new FormData();\r\n                        formData.append(\"annotations\", new Blob([fileContent]), fileName)\r\n                        await axios.post(saveAnnotations, formData, {\r\n                            headers: { \"Accept\": 'application/json', \"Content-Type\": \"multipart/form-data\" }, params: {\r\n                                dir: dir,\r\n                                fileName: fileName\r\n                            }\r\n                        })\r\n                        // zip.file(fileName, fileContent);\r\n                    } catch (error: unknown) {\r\n                        // TODO\r\n                        if (error instanceof Error) {\r\n                            throw new Error(error.message);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // );\r\n    }\r\n\r\n    private static wrapRectLabelsIntoCSV(imageData: ImageData): string {\r\n        if (imageData.labelRects.length === 0 || !imageData.loadStatus)\r\n            return null;\r\n\r\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const labelRectsString: string[] = imageData.labelRects.map((labelRect: LabelRect) => {\r\n            const labelName: LabelName = findLast(labelNames, { id: labelRect.labelId });\r\n            const labelFields = !!labelName ? [\r\n                labelName.name,\r\n                Math.round(labelRect.rect.x).toString(),\r\n                Math.round(labelRect.rect.y).toString(),\r\n                Math.round(labelRect.rect.width).toString(),\r\n                Math.round(labelRect.rect.height).toString(),\r\n                imageData.fileName,\r\n                image.width.toString(),\r\n                image.height.toString()\r\n            ] : [];\r\n            return labelFields.join(\",\")\r\n        });\r\n        return labelRectsString.join(\"\\n\");\r\n    }\r\n}","import {AnnotationFormatType} from \"../../data/enums/AnnotationFormatType\";\r\nimport {ImageData, LabelName, LabelPoint} from \"../../store/labels/types\";\r\nimport {ImageRepository} from \"../imageRepository/ImageRepository\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {ExporterUtil} from \"../../utils/ExporterUtil\";\r\nimport {findLast} from \"lodash\";\r\n\r\nexport class PointLabelsExporter {\r\n    public static export(exportFormatType: AnnotationFormatType): void {\r\n        switch (exportFormatType) {\r\n            case AnnotationFormatType.CSV:\r\n                PointLabelsExporter.exportAsCSV();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    private static exportAsCSV(): void {\r\n        const content: string = LabelsSelector.getImagesData()\r\n            .map((imageData: ImageData) => {\r\n                return PointLabelsExporter.wrapRectLabelsIntoCSV(imageData)})\r\n            .filter((imageLabelData: string) => {\r\n                return !!imageLabelData})\r\n            .join(\"\\n\");\r\n        const fileName: string = `${ExporterUtil.getExportFileName()}.csv`;\r\n        ExporterUtil.saveAs(content, fileName);\r\n    }\r\n\r\n    private static wrapRectLabelsIntoCSV(imageData: ImageData): string {\r\n        if (imageData.labelPoints.length === 0 || !imageData.loadStatus)\r\n            return null;\r\n\r\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const labelRectsString: string[] = imageData.labelPoints.map((labelPoint: LabelPoint) => {\r\n            const labelName: LabelName = findLast(labelNames, {id: labelPoint.labelId});\r\n            const labelFields = !!labelName ? [\r\n                labelName.name,\r\n                Math.round(labelPoint.point.x).toString(),\r\n                Math.round(labelPoint.point.y).toString(),\r\n                imageData.fileData.name,\r\n                image.width.toString(),\r\n                image.height.toString()\r\n            ] : [];\r\n            return labelFields.join(\",\")\r\n        });\r\n        return labelRectsString.join(\"\\n\");\r\n    }\r\n}","import {ImageData, LabelName, LabelPolygon} from \"../../../store/labels/types\";\r\nimport {VGGFileData, VGGObject, VGGPolygon, VGGRegionsData} from \"../../../data/labels/VGG\";\r\nimport {findLast} from \"lodash\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\nimport {ExporterUtil} from \"../../../utils/ExporterUtil\";\r\n\r\nexport class VGGExporter {\r\n    public static export(): void {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const content: string = JSON.stringify(VGGExporter.mapImagesDataToVGGObject(imagesData, labelNames));\r\n        const fileName: string = `${ExporterUtil.getExportFileName()}.json`;\r\n        ExporterUtil.saveAs(content, fileName);\r\n    }\r\n\r\n    private static mapImagesDataToVGGObject(imagesData: ImageData[], labelNames: LabelName[]): VGGObject {\r\n        return imagesData.reduce((data: VGGObject, image: ImageData) => {\r\n            const fileData: VGGFileData = VGGExporter.mapImageDataToVGGFileData(image, labelNames);\r\n            if (!!fileData) {\r\n                data[image.fileData.name] = fileData\r\n            }\r\n            return data;\r\n        }, {});\r\n    }\r\n\r\n    private static mapImageDataToVGGFileData(imageData: ImageData, labelNames: LabelName[]): VGGFileData {\r\n        const regionsData: VGGRegionsData = VGGExporter.mapImageDataToVGG(imageData, labelNames);\r\n        if (!regionsData) return null;\r\n        return {\r\n            fileref: \"\",\r\n            size: imageData.fileData.size,\r\n            filename: imageData.fileData.name,\r\n            base64_img_data: \"\",\r\n            file_attributes: {},\r\n            regions: regionsData\r\n        }\r\n    }\r\n\r\n    public static mapImageDataToVGG(imageData: ImageData, labelNames: LabelName[]): VGGRegionsData {\r\n        if (!imageData.loadStatus || !imageData.labelPolygons || !imageData.labelPolygons.length ||\r\n            !labelNames || !labelNames.length) return null;\r\n\r\n        const validLabels: LabelPolygon[] = VGGExporter.getValidPolygonLabels(imageData);\r\n\r\n        if (!validLabels.length) return null;\r\n\r\n        return validLabels.reduce((data: VGGRegionsData, label: LabelPolygon, index: number) => {\r\n            const labelName: LabelName = findLast(labelNames, {id: label.labelId});\r\n            if (!!labelName) {\r\n                data[index.toString()] = {\r\n                    shape_attributes: VGGExporter.mapPolygonToVGG(label.vertices),\r\n                    region_attributes: {\r\n                        label: labelName.name\r\n                    }\r\n                };\r\n            }\r\n            return data;\r\n        }, {})\r\n    }\r\n\r\n    public static getValidPolygonLabels(imageData: ImageData): LabelPolygon[] {\r\n        return imageData.labelPolygons.filter((label: LabelPolygon) =>\r\n            label.labelId !== null && !!label.vertices.length);\r\n    }\r\n\r\n    public static mapPolygonToVGG(path: IPoint[]): VGGPolygon {\r\n        if (!path || !path.length) return null;\r\n\r\n        const all_points_x: number[] = path.map((point: IPoint) => point.x).concat(path[0].x);\r\n        const all_points_y: number[] = path.map((point: IPoint) => point.y).concat(path[0].y);\r\n        return {\r\n            name: \"polygon\",\r\n            all_points_x,\r\n            all_points_y\r\n        }\r\n    }\r\n}","import {ImageData, LabelName, LabelPolygon} from \"../../../store/labels/types\";\r\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\r\nimport {GeneralSelector} from \"../../../store/selectors/GeneralSelector\";\r\nimport {ImageRepository} from \"../../imageRepository/ImageRepository\";\r\nimport {ExporterUtil} from \"../../../utils/ExporterUtil\";\r\nimport {\r\n    COCOAnnotation, COCOBBox,\r\n    COCOCategory,\r\n    COCOImage,\r\n    COCOInfo,\r\n    COCOObject,\r\n    COCOSegmentation\r\n} from \"../../../data/labels/COCO\";\r\nimport {flatten} from \"lodash\";\r\nimport {IPoint} from \"../../../interfaces/IPoint\";\r\n\r\nexport type LabelDataMap = { [key: string]: number; }\r\n\r\nexport class COCOExporter {\r\n    public static export(): void {\r\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const projectName: string = GeneralSelector.getProjectName();\r\n        const COCOObject: COCOObject = COCOExporter.mapImagesDataToCOCOObject(imagesData, labelNames, projectName);\r\n        const content: string = JSON.stringify(COCOObject);\r\n        const fileName: string = `${ExporterUtil.getExportFileName()}.json`;\r\n        ExporterUtil.saveAs(content, fileName);\r\n    }\r\n\r\n    private static mapImagesDataToCOCOObject(\r\n        imagesData: ImageData[],\r\n        labelNames: LabelName[],\r\n        projectName: string\r\n    ): COCOObject {\r\n        return {\r\n            \"info\": COCOExporter.getInfoComponent(projectName),\r\n            \"images\": COCOExporter.getImagesComponent(imagesData),\r\n            \"annotations\": COCOExporter.getAnnotationsComponent(imagesData, labelNames),\r\n            \"categories\":COCOExporter.getCategoriesComponent(labelNames)\r\n        }\r\n    }\r\n\r\n    public static getInfoComponent(description: string): COCOInfo {\r\n        return {\r\n            \"description\": description\r\n        }\r\n    }\r\n\r\n    public static getCategoriesComponent(labelNames: LabelName[]): COCOCategory[] {\r\n        return labelNames.map((labelName: LabelName, index: number) => {\r\n            return {\r\n                \"id\": index + 1,\r\n                \"name\": labelName.name\r\n            }\r\n        })\r\n    }\r\n\r\n    public static getImagesComponent(imagesData: ImageData[]): COCOImage[] {\r\n        return imagesData\r\n            .filter((imagesData: ImageData) => imagesData.loadStatus)\r\n            .filter((imagesData: ImageData) => imagesData.labelPolygons.length !== 0)\r\n            .map((imageData: ImageData, index: number) => {\r\n                const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n                return {\r\n                    \"id\": index + 1,\r\n                    \"width\": image.width,\r\n                    \"height\": image.height,\r\n                    \"file_name\": imageData.fileData.name\r\n                }\r\n            })\r\n    }\r\n\r\n    public static getAnnotationsComponent(imagesData: ImageData[], labelNames: LabelName[]): COCOAnnotation[] {\r\n        const labelsMap: LabelDataMap = COCOExporter.mapLabelsData(labelNames);\r\n        let id = 0;\r\n        const annotations: COCOAnnotation[][] = imagesData\r\n            .filter((imagesData: ImageData) => imagesData.loadStatus)\r\n            .filter((imagesData: ImageData) => imagesData.labelPolygons.length !== 0)\r\n            .map((imageData: ImageData, index: number) => {\r\n                return imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\r\n                    return {\r\n                        \"id\": id++,\r\n                        \"iscrowd\": 0,\r\n                        \"image_id\": index + 1,\r\n                        \"category_id\": labelsMap[labelPolygon.labelId],\r\n                        \"segmentation\": COCOExporter.getCOCOSegmentation(labelPolygon.vertices),\r\n                        \"bbox\": COCOExporter.getCOCOBbox(labelPolygon.vertices),\r\n                        \"area\": COCOExporter.getCOCOArea(labelPolygon.vertices)\r\n                    }\r\n                })\r\n            })\r\n        return flatten(annotations);\r\n    }\r\n\r\n    public static mapLabelsData(labelNames: LabelName[]): LabelDataMap {\r\n        return labelNames.reduce((data: LabelDataMap, label: LabelName, index: number) => {\r\n            data[label.id] = index + 1;\r\n            return data;\r\n        }, {})\r\n    }\r\n\r\n    public static getCOCOSegmentation(vertices: IPoint[]): COCOSegmentation {\r\n        const points: number[][] = vertices.map((point: IPoint) => [point.x, point.y]);\r\n        return [flatten(points)];\r\n    }\r\n\r\n    public static getCOCOBbox(vertices: IPoint[]): COCOBBox {\r\n        let xMin: number = vertices[0].x;\r\n        let xMax: number = vertices[0].x;\r\n        let yMin: number = vertices[0].y;\r\n        let yMax: number = vertices[0].y;\r\n        for (const vertex of vertices){\r\n            if (xMin > vertex.x) xMin = vertex.x;\r\n            if (xMax < vertex.x) xMax = vertex.x;\r\n            if (yMin > vertex.y) yMin = vertex.y;\r\n            if (yMax < vertex.y) yMax = vertex.y;\r\n        }\r\n        return [xMin, yMin, xMax - xMin, yMax - yMin];\r\n    }\r\n\r\n    public static getCOCOArea(vertices: IPoint[]): number {\r\n        let area = 0;\r\n        let j = vertices.length - 1;\r\n        for (let  i = 0; i < vertices.length; i++) {\r\n            area += (vertices[j].x + vertices[i].x) * (vertices[j].y - vertices[i].y);\r\n            j = i;\r\n        }\r\n        return Math.abs(area/2);\r\n    }\r\n}","import {AnnotationFormatType} from \"../../../data/enums/AnnotationFormatType\";\r\nimport {VGGExporter} from \"./VGGExporter\";\r\nimport {COCOExporter} from \"./COCOExporter\";\r\n\r\nexport class PolygonLabelsExporter {\r\n    public static export(exportFormatType: AnnotationFormatType): void {\r\n        switch (exportFormatType) {\r\n            case AnnotationFormatType.VGG:\r\n                VGGExporter.export();\r\n                break;\r\n            case AnnotationFormatType.COCO:\r\n                COCOExporter.export();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n}","import {AnnotationFormatType} from \"../../data/enums/AnnotationFormatType\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {ImageData, LabelLine, LabelName} from \"../../store/labels/types\";\r\nimport {ExporterUtil} from \"../../utils/ExporterUtil\";\r\nimport {ImageRepository} from \"../imageRepository/ImageRepository\";\r\nimport {findLast} from \"lodash\";\r\n\r\nexport class LineLabelsExporter {\r\n    public static export(exportFormatType: AnnotationFormatType): void {\r\n        switch (exportFormatType) {\r\n            case AnnotationFormatType.CSV:\r\n                LineLabelsExporter.exportAsCSV();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    private static exportAsCSV(): void {\r\n        const content: string = LabelsSelector.getImagesData()\r\n            .map((imageData: ImageData) => {\r\n                return LineLabelsExporter.wrapLineLabelsIntoCSV(imageData)})\r\n            .filter((imageLabelData: string) => {\r\n                return !!imageLabelData})\r\n            .join(\"\\n\");\r\n        const fileName: string = `${ExporterUtil.getExportFileName()}.csv`;\r\n        ExporterUtil.saveAs(content, fileName);\r\n    }\r\n\r\n    private static wrapLineLabelsIntoCSV(imageData: ImageData): string {\r\n        if (imageData.labelLines.length === 0 || !imageData.loadStatus)\r\n            return null;\r\n\r\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const labelLinesString: string[] = imageData.labelLines.map((labelLine: LabelLine) => {\r\n            const labelName: LabelName = findLast(labelNames, {id: labelLine.labelId});\r\n            const labelFields = !!labelName ? [\r\n                labelName.name,\r\n                Math.round(labelLine.line.start.x).toString(),\r\n                Math.round(labelLine.line.start.y).toString(),\r\n                Math.round(labelLine.line.end.x).toString(),\r\n                Math.round(labelLine.line.end.y).toString(),\r\n                imageData.fileData.name,\r\n                image.width.toString(),\r\n                image.height.toString()\r\n            ] : [];\r\n            return labelFields.join(\",\")\r\n        });\r\n        return labelLinesString.join(\"\\n\");\r\n    }\r\n}","import {AnnotationFormatType} from \"../../data/enums/AnnotationFormatType\";\r\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\r\nimport {ImageData, LabelName} from \"../../store/labels/types\";\r\nimport {ExporterUtil} from \"../../utils/ExporterUtil\";\r\nimport {findLast} from \"lodash\";\r\n\r\nexport class TagLabelsExporter {\r\n    public static export(exportFormatType: AnnotationFormatType): void {\r\n        switch (exportFormatType) {\r\n            case AnnotationFormatType.CSV:\r\n                TagLabelsExporter.exportAsCSV();\r\n                break;\r\n            case AnnotationFormatType.JSON:\r\n                TagLabelsExporter.exportAsJSON();\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    private static exportAsCSV(): void {\r\n        const content: string = LabelsSelector.getImagesData()\r\n            .filter((imageData: ImageData) => {\r\n                return imageData.labelNameIds.length > 0\r\n            })\r\n            .map((imageData: ImageData) => {\r\n                return TagLabelsExporter.wrapLabelNamesIntoCSV(imageData)})\r\n            .join(\"\\n\");\r\n        const fileName: string = `${ExporterUtil.getExportFileName()}.csv`;\r\n        ExporterUtil.saveAs(content, fileName);\r\n    }\r\n\r\n    private static exportAsJSON(): void {\r\n        const contentObjects: object[] = LabelsSelector.getImagesData()\r\n            .filter((imageData: ImageData) => {\r\n                return imageData.labelNameIds.length > 0\r\n            })\r\n            .map((imageData: ImageData) => {\r\n                return {\r\n                    \"image\": imageData.fileData.name,\r\n                    \"annotations\": TagLabelsExporter.wrapLabelNamesIntoJSON(imageData)\r\n                }})\r\n        const content: string = JSON.stringify(contentObjects);\r\n        const fileName: string = `${ExporterUtil.getExportFileName()}.json`;\r\n        ExporterUtil.saveAs(content, fileName);\r\n    }\r\n\r\n    private static wrapLabelNamesIntoCSV(imageData: ImageData): string {\r\n        if (imageData.labelNameIds.length === 0 || !imageData.loadStatus)\r\n            return null;\r\n\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        const annotations: string[] = imageData.labelNameIds.map((labelNameId: string) => {\r\n            return findLast(labelNames, {id: labelNameId}).name;\r\n        })\r\n        const labelFields = annotations.length !== 0 ? [\r\n            imageData.fileData.name,\r\n            `\"[${annotations.toString()}]\"`\r\n        ] : [];\r\n        return labelFields.join(\",\")\r\n    }\r\n\r\n    private static wrapLabelNamesIntoJSON(imageData: ImageData): string[] {\r\n        if (imageData.labelNameIds.length === 0 || !imageData.loadStatus)\r\n            return [];\r\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\r\n        return imageData.labelNameIds.map((labelNameId: string) => {\r\n            return findLast(labelNames, {id: labelNameId}).name;\r\n        })\r\n    }\r\n}","import { ILabelFormatData } from \"../interfaces/ILabelFormatData\";\r\nimport { LabelType } from \"./enums/LabelType\";\r\nimport { AnnotationFormatType } from \"./enums/AnnotationFormatType\";\r\n\r\nexport type ExportFormatDataMap = { [s in LabelType]: ILabelFormatData[]; };\r\n\r\nexport const ExportFormatData: ExportFormatDataMap = {\r\n    \"RECT\": [\r\n        {\r\n            type: AnnotationFormatType.YOLO,\r\n            label: \"A .txt file in Pixel Sensor format will be saved.\"\r\n        },\r\n        {\r\n            type: AnnotationFormatType.VOC,\r\n            label: \"A .zip package containing files in VOC XML format.\"\r\n        },\r\n        {\r\n            type: AnnotationFormatType.CSV,\r\n            label: \"Single CSV file.\"\r\n        }\r\n    ],\r\n    \"POINT\": [\r\n        {\r\n            type: AnnotationFormatType.CSV,\r\n            label: \"Single CSV file.\"\r\n        }\r\n    ],\r\n    \"LINE\": [\r\n        {\r\n            type: AnnotationFormatType.CSV,\r\n            label: \"Single CSV file.\"\r\n        }\r\n    ],\r\n    \"POLYGON\": [\r\n        {\r\n            type: AnnotationFormatType.VGG,\r\n            label: \"Single file in VGG JSON format.\"\r\n        },\r\n        {\r\n            type: AnnotationFormatType.COCO,\r\n            label: \"Single file in COCO JSON format.\"\r\n        }\r\n    ],\r\n    \"IMAGE RECOGNITION\": [\r\n        {\r\n            type: AnnotationFormatType.CSV,\r\n            label: \"Single CSV file.\"\r\n        },\r\n        {\r\n            type: AnnotationFormatType.JSON,\r\n            label: \"Single JSON file.\"\r\n        }\r\n    ]\r\n}","import React, { useState } from 'react'\r\nimport './ExportLabelPopup.scss'\r\nimport { AnnotationFormatType } from \"../../../data/enums/AnnotationFormatType\";\r\nimport { RectLabelsExporter } from \"../../../logic/export/RectLabelsExporter\";\r\nimport { LabelType } from \"../../../data/enums/LabelType\";\r\nimport { ILabelFormatData } from \"../../../interfaces/ILabelFormatData\";\r\nimport { PointLabelsExporter } from \"../../../logic/export/PointLabelsExport\";\r\nimport { PolygonLabelsExporter } from \"../../../logic/export/polygon/PolygonLabelsExporter\";\r\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\r\nimport { LineLabelsExporter } from \"../../../logic/export/LineLabelExport\";\r\nimport { TagLabelsExporter } from \"../../../logic/export/TagLabelsExport\";\r\nimport GenericLabelTypePopup from \"../GenericLabelTypePopup/GenericLabelTypePopup\";\r\nimport { ExportFormatData } from \"../../../data/ExportFormatData\";\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface IProps {\r\n    activeLabelType: LabelType,\r\n    configFolder: String\r\n}\r\n\r\nconst ExportLabelPopup: React.FC<IProps> = ({ activeLabelType, configFolder }) => {\r\n    const [labelType, setLabelType] = useState(activeLabelType);\r\n    const [exportFormatType, setExportFormatType] = useState(AnnotationFormatType.YOLO);\r\n\r\n    const onAccept = async (labelType: LabelType) => {\r\n        PopupActions.loading();\r\n        switch (labelType) {\r\n            case LabelType.RECT:\r\n                await RectLabelsExporter.export(exportFormatType, configFolder);\r\n                break;\r\n            case LabelType.POINT:\r\n                PointLabelsExporter.export(exportFormatType);\r\n                break;\r\n            case LabelType.LINE:\r\n                LineLabelsExporter.export(exportFormatType);\r\n                break;\r\n            case LabelType.POLYGON:\r\n                PolygonLabelsExporter.export(exportFormatType);\r\n                break;\r\n            case LabelType.IMAGE_RECOGNITION:\r\n                TagLabelsExporter.export(exportFormatType);\r\n                break;\r\n        }\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onReject = (labelType: LabelType) => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onSelect = (exportFormatType: AnnotationFormatType) => {\r\n        setExportFormatType(exportFormatType);\r\n    };\r\n\r\n    const getOptions = (exportFormatData: ILabelFormatData[]) => {\r\n        // return exportFormatData.map((entry: ILabelFormatData) => {\r\n        return <div\r\n            className=\"OptionsItem\"\r\n            onClick={() => onSelect(exportFormatData[0].type)}\r\n            key={exportFormatData[0].type}\r\n        >\r\n            {exportFormatData[0].type === exportFormatType ?\r\n                <img\r\n                    draggable={false}\r\n                    src={\"ico/checkbox-checked.png\"}\r\n                    alt={\"checked\"}\r\n                /> :\r\n                <img\r\n                    draggable={false}\r\n                    src={\"ico/checkbox-unchecked.png\"}\r\n                    alt={\"unchecked\"}\r\n                />}\r\n            {exportFormatData[0].label}\r\n        </div>\r\n    };\r\n\r\n    const renderInternalContent = (labelType: LabelType) => {\r\n        return [\r\n            <div className=\"Message\">\r\n                Select label type and the file format you would like to use to export labels.\r\n            </div>,\r\n            <div className=\"Options\">\r\n                {getOptions(ExportFormatData[labelType])}\r\n            </div>\r\n        ]\r\n    }\r\n\r\n    const onLabelTypeChange = (labelType: LabelType) => {\r\n        setLabelType(labelType);\r\n        setExportFormatType(null);\r\n    }\r\n\r\n    return (\r\n        <GenericLabelTypePopup\r\n            activeLabelType={labelType}\r\n            title={`Export ${labelType.toLowerCase()} annotations`}\r\n            onLabelTypeChange={onLabelTypeChange}\r\n            acceptLabel={\"Export\"}\r\n            onAccept={onAccept}\r\n            disableAcceptButton={!exportFormatType}\r\n            rejectLabel={\"Cancel\"}\r\n            onReject={onReject}\r\n            renderInternalContent={renderInternalContent}\r\n        />\r\n    )\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activeLabelType: state.labels.activeLabelType,\r\n    configFolder: state.general.configFolder\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ExportLabelPopup);","import React, { useState } from 'react'\r\nimport './UploadLabelPopup.scss'\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { AcceptedFileType } from \"../../../data/enums/AcceptedFileType\";\r\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\r\nimport { saveAnnotations } from \"../../../url/ApiUrl\";\r\nimport axios from \"axios\";\r\n\r\ninterface IProps {\r\n    configFolder: String,\r\n}\r\n\r\nconst UploadLabelPopup: React.FC<IProps> = ({ configFolder }) => {\r\n    const [invalidFileLoadedStatus, setInvalidFileLoadedStatus] = useState(false);\r\n\r\n    const { acceptedFiles, getRootProps, getInputProps } = useDropzone({\r\n        accept: AcceptedFileType.TEXT,\r\n        multiple: true,\r\n    });\r\n\r\n    const fileUploader = async (fileArray: File[]) => {\r\n        for (let index = 0; index < fileArray.length; index++) {\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append(\"annotations\", fileArray[index], fileArray[index].name)\r\n                await axios.post(saveAnnotations, formData, {\r\n                    headers: { \"Accept\": 'application/json', \"Content-Type\": \"multipart/form-data\" }, params: {\r\n                        dir: configFolder,\r\n                        fileName: fileArray[index].name\r\n                    }\r\n                })\r\n            } catch (error: unknown) {\r\n                // TODO\r\n                if (error instanceof Error) {\r\n                    throw new Error(error.message);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const onAccept = async () => {\r\n        PopupActions.loading();\r\n        await fileUploader(acceptedFiles);\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n    const getDropZoneContent = () => {\r\n        if (invalidFileLoadedStatus)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Loading of labels file was unsuccessful</p>\r\n                <p className=\"extraBold\">Try again</p>\r\n            </>;\r\n        else if (acceptedFiles.length === 0)\r\n            return <>\r\n                <input {...getInputProps()} />\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"upload\"}\r\n                    src={\"ico/box-opened.png\"}\r\n                />\r\n                <p className=\"extraBold\">Drop annotation files</p>\r\n                <p>or</p>\r\n                <p className=\"extraBold\">Click here to select it</p>\r\n            </>;\r\n        else if (acceptedFiles.length === 1)\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">only 1 file selected</p>\r\n            </>;\r\n        else\r\n            return <>\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"uploaded\"}\r\n                    src={\"ico/box-closed.png\"}\r\n                />\r\n                <p className=\"extraBold\">{acceptedFiles.length} files selected</p>\r\n            </>;\r\n    };\r\n\r\n    const renderContent = () => {\r\n        return (<div className=\"LoadLabelsPopupContent\">\r\n            <div className=\"Message\">\r\n                Upload annotation files with .csv and .txt extensions only.\r\n            </div>\r\n            <div {...getRootProps({ className: 'DropZone' })}>\r\n                {getDropZoneContent()}\r\n            </div>\r\n        </div>);\r\n    };\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={\"Upload annotation files\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Upload\"}\r\n            onAccept={onAccept}\r\n            skipAcceptButton={acceptedFiles.length === 0}\r\n            disableAcceptButton={acceptedFiles.length === 0}\r\n            rejectLabel={\"Cancel\"}\r\n            onReject={onReject}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    configFolder: state.general.configFolder\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(UploadLabelPopup);","import React, { useEffect } from 'react'\r\nimport './DownloadLabelPopup.scss'\r\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\r\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { annotationList, rootUrl } from '../../../url/ApiUrl';\r\nimport { useSaveFilesAsZip } from 'use-save-files-as-zip';\r\n\r\ninterface IProps {\r\n    configFolder: String,\r\n}\r\n\r\nconst DownloadLabelPopup: React.FC<IProps> = (\r\n    {\r\n        configFolder,\r\n    }) => {\r\n    // The initialState is optional but if we need to add it just add a File array\r\n    const { setFilesAsZip, saveAsZip } = useSaveFilesAsZip();\r\n    // fetch annotation files\r\n    useEffect(() => {\r\n        axios\r\n            .get(annotationList, {\r\n                params: {\r\n                    dir: configFolder\r\n                }\r\n            })\r\n            .then(async (response) => {\r\n                console.log(response.data.files);\r\n                const annotationFiles: File[] = [];\r\n                // await response.data.files.forEach(async fileName =>\r\n                for (const fileName of response.data.files) {\r\n                    try {\r\n                        let res = await axios.get(rootUrl + configFolder + \"/\" + fileName)\r\n                        let file = new File([res.data], fileName)\r\n                        annotationFiles.push(file)\r\n                        console.log(annotationFiles)\r\n                    }\r\n                    catch (error) {\r\n                        console.log(error);\r\n                    }\r\n                }\r\n                return annotationFiles\r\n            })\r\n            .then((files) => {\r\n                console.log(files)\r\n                // Here we can add all the files that we need to add to generate the ZIP file.\r\n                setFilesAsZip(files);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }, [])\r\n\r\n    const onAccept = async () => {\r\n        PopupActions.loading();\r\n        // Here we execute the instruccion to download the ZIP file\r\n        saveAsZip(configFolder.toString());\r\n        PopupActions.close();\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n\r\n    const renderContent = () => {\r\n        console.log(\"renderInternalContent\");\r\n        return <div className=\"DropZone\">Download annotation files</div>\r\n    }\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={\"Download annotation files\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Download\"}\r\n            onAccept={onAccept}\r\n            rejectLabel={\"Cancel\"}\r\n            onReject={onReject}\r\n        />\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    configFolder: state.general.configFolder\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(DownloadLabelPopup);","import React, { useState, useEffect } from 'react'\r\nimport './DeleteLabelPopup.scss'\r\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\r\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\r\nimport { AppState } from \"../../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { deleteAnnotations } from '../../../url/ApiUrl';\r\n\r\ninterface IProps {\r\n    configFolder: String,\r\n}\r\n\r\nconst DeleteLabelPopup: React.FC<IProps> = (\r\n    {\r\n        configFolder,\r\n    }) => {\r\n    const [deleteState, setDeleteState] = useState(false);\r\n    useEffect(() => {\r\n        if (deleteState) {\r\n            PopupActions.loading();\r\n            axios\r\n                .get(deleteAnnotations, {\r\n                    params: {\r\n                        dir: configFolder\r\n                    }\r\n                })\r\n                .then((files) => {\r\n                    console.log(files)\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                })\r\n            PopupActions.close();\r\n        }\r\n    }, [deleteState])\r\n\r\n    const onAccept = async () => {\r\n        await setDeleteState(true);\r\n    };\r\n\r\n    const onReject = () => {\r\n        PopupActions.close();\r\n    };\r\n\r\n\r\n    const renderContent = () => {\r\n        console.log(\"renderInternalContent\");\r\n        return <div className=\"DropZone\">Are you sure you want to delete all annotation files?</div>\r\n    }\r\n\r\n    return (\r\n        <GenericYesNoPopup\r\n            title={\"Delete annotation files\"}\r\n            renderContent={renderContent}\r\n            acceptLabel={\"Delete\"}\r\n            onAccept={onAccept}\r\n            rejectLabel={\"Cancel\"}\r\n            onReject={onReject}\r\n        />\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    configFolder: state.general.configFolder\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(DeleteLabelPopup);","import React from 'react';\r\nimport './PopupView.scss';\r\nimport { PopupWindowType } from \"../../data/enums/PopupWindowType\";\r\nimport { AppState } from \"../../store\";\r\nimport { connect } from \"react-redux\";\r\nimport LoadLabelsPopup from \"./LoadLabelNamesPopup/LoadLabelNamesPopup\";\r\nimport LoadCameraIdsPopup from \"./LoadCameraIdsPopup/LoadCameraIdsPopup\";\r\nimport SelectCameraIdPopup from \"./SelectCameraIdPopup/SelectCameraIdPopup\";\r\nimport InsertLabelNamesPopup from \"./InsertLabelNamesPopup/InsertLabelNamesPopup\";\r\nimport ExitProjectPopup from \"./ExitProjectPopup/ExitProjectPopup\";\r\nimport ErrorPopup from \"./ErrorPopup/ErrorPopup\";\r\nimport LoadMoreImagesPopup from \"./LoadMoreImagesPopup/LoadMoreImagesPopup\";\r\nimport { LoadModelPopup } from \"./LoadModelPopup/LoadModelPopup\";\r\nimport SuggestLabelNamesPopup from \"./SuggestLabelNamesPopup/SuggestLabelNamesPopup\";\r\nimport { CSSHelper } from \"../../logic/helpers/CSSHelper\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport ImportLabelPopup from \"./ImportLabelPopup/ImportLabelPopup\";\r\nimport ExportLabelPopup from \"./ExportLabelsPopup/ExportLabelPopup\";\r\nimport UploadLabelPopup from \"./UploadLabelsPopup/UploadLabelPopup\";\r\nimport DownloadLabelPopup from \"./DownloadLabelPopup/DownloadLabelPopup\";\r\nimport DeleteLabelPopup from \"./DeleteLabelPopup/DeleteLabelPopup\";\r\n\r\ninterface IProps {\r\n    activePopupType: PopupWindowType;\r\n}\r\n\r\nconst PopupView: React.FC<IProps> = ({ activePopupType }) => {\r\n\r\n    const selectPopup = () => {\r\n        switch (activePopupType) {\r\n            case PopupWindowType.LOAD_CAMERA_ID:\r\n                return <LoadCameraIdsPopup />;\r\n            case PopupWindowType.SELECT_CAMERA_ID:\r\n                return <SelectCameraIdPopup />;\r\n            case PopupWindowType.LOAD_LABEL_NAMES:\r\n                return <LoadLabelsPopup />;\r\n            case PopupWindowType.EXPORT_ANNOTATIONS:\r\n                return <ExportLabelPopup />;\r\n            case PopupWindowType.IMPORT_ANNOTATIONS:\r\n                return <ImportLabelPopup />;\r\n            case PopupWindowType.UPLOAD_ANNOTATIONS:\r\n                return <UploadLabelPopup />;\r\n            case PopupWindowType.DOWNLOAD_ANNOTATIONS:\r\n                return <DownloadLabelPopup />;\r\n            case PopupWindowType.DELETE_ANNOTATIONS:\r\n                return <DeleteLabelPopup />;\r\n            case PopupWindowType.INSERT_LABEL_NAMES:\r\n                return <InsertLabelNamesPopup\r\n                    isUpdate={false}\r\n                />;\r\n            case PopupWindowType.UPDATE_LABEL:\r\n                return <InsertLabelNamesPopup\r\n                    isUpdate={true}\r\n                />;\r\n            case PopupWindowType.EXIT_PROJECT:\r\n                return <ExitProjectPopup />;\r\n            case PopupWindowType.IMPORT_IMAGES:\r\n                return <LoadMoreImagesPopup />;\r\n            case PopupWindowType.LOAD_AI_MODEL:\r\n                return <LoadModelPopup />;\r\n            case PopupWindowType.SUGGEST_LABEL_NAMES:\r\n                return <SuggestLabelNamesPopup />;\r\n            case PopupWindowType.LOADER:\r\n                return <ClipLoader\r\n                    size={100}\r\n                    // color={CSSHelper.getLeadingColor()}\r\n                    color={\"#7a0000\"}\r\n                    loading={true}\r\n                />;\r\n            case PopupWindowType.ERROR:\r\n                return <ErrorPopup />;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        activePopupType && <div className=\"PopupView\">\r\n            {selectPopup()}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    activePopupType: state.general.activePopupType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PopupView);","export interface IEditorFeature {\r\n    displayText:string;\r\n    imageSrc:string;\r\n    imageAlt:string;\r\n}\r\n\r\nexport const EditorFeatureData: IEditorFeature[] = [\r\n    {\r\n        displayText: \"Open source and free to use under GPLv3 license\",\r\n        imageSrc: \"ico/open-source.png\",\r\n        imageAlt: \"open-source\",\r\n    },\r\n    {\r\n        displayText: \"No advanced installation required, just open up your browser\",\r\n        imageSrc: \"ico/online.png\",\r\n        imageAlt: \"online\",\r\n    },\r\n    {\r\n        displayText: \"We don't store your images, because we don't send them anywhere\",\r\n        imageSrc: \"ico/private.png\",\r\n        imageAlt: \"private\",\r\n    },\r\n    {\r\n        displayText: \"Support multiple label types - rects, lines, points and polygons\",\r\n        imageSrc: \"ico/labels.png\",\r\n        imageAlt: \"labels\",\r\n    },\r\n    {\r\n        displayText: \"Support output file formats like YOLO, VOC XML, VGG JSON, CSV\",\r\n        imageSrc: \"ico/file.png\",\r\n        imageAlt: \"file\",\r\n    },\r\n    {\r\n        displayText: \"Use AI to make your work more productive\",\r\n        imageSrc: \"ico/robot.png\",\r\n        imageAlt: \"robot\",\r\n    },\r\n];","import {Settings} from \"../../settings/Settings\";\r\n\r\nexport interface ISocialMedia {\r\n    displayName:string;\r\n    imageSrc:string;\r\n    imageAlt:string;\r\n    href:string;\r\n    tooltipMessage:string;\r\n}\r\n\r\nexport const SocialMediaData: ISocialMedia[] = [\r\n    {\r\n        displayName: \"Github\",\r\n        imageSrc: \"/ico/github-logo.png\",\r\n        imageAlt: \"GitHub Logo\",\r\n        href: Settings.GITHUB_URL,\r\n        tooltipMessage: \"Show me some love on GitHub\",\r\n    },\r\n    {\r\n        displayName: \"Medium\",\r\n        imageSrc: \"/ico/medium-logo.png\",\r\n        imageAlt: \"Medium Logo\",\r\n        href: Settings.MEDIUM_URL,\r\n        tooltipMessage: \"Read my AI content on Medium\",\r\n    },\r\n    {\r\n        displayName: \"Patreon\",\r\n        imageSrc: \"/ico/patreon-logo.png\",\r\n        imageAlt: \"Patreon Logo\",\r\n        href: Settings.PATREON_URL,\r\n        tooltipMessage: \"Support MakeSense on Patreon and help it grow\"\r\n    },\r\n];","import React, {useState} from 'react';\r\nimport './MobileMainView.scss';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport {ISize} from \"../../interfaces/ISize\";\r\nimport {AppState} from \"../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport classNames from 'classnames'\r\nimport {EditorFeatureData, IEditorFeature} from \"../../data/info/EditorFeatureData\";\r\nimport {ISocialMedia, SocialMediaData} from \"../../data/info/SocialMediaData\";\r\nimport {ImageButton} from \"../Common/ImageButton/ImageButton\";\r\n\r\ninterface IProps {\r\n    size: ISize;\r\n}\r\n\r\nconst MobileMainView: React.FC<IProps> = ({size}) => {\r\n    const scrollPositionThreshold: number = 350;\r\n    const [scrollPosition, setScrollPosition] = useState(0);\r\n\r\n    const getClassName = () => {\r\n        return classNames('MobileTopNavigationBar', {\r\n            Hide: scrollPosition < scrollPositionThreshold,\r\n            Show: scrollPosition >= scrollPositionThreshold,\r\n        })\r\n    };\r\n\r\n    const onScroll = (value) => {\r\n        setScrollPosition(value.scrollTop);\r\n    };\r\n\r\n    const getEditorFeatureTiles = (features: IEditorFeature[]) => {\r\n        return features.map((data:IEditorFeature) => {\r\n            return <div\r\n                className=\"EditorFeaturesTiles\"\r\n                key={data.displayText}\r\n            >\r\n                <div\r\n                    className=\"EditorFeaturesTilesWrapper\"\r\n                >\r\n                    <img\r\n                        draggable={false}\r\n                        alt={data.imageAlt}\r\n                        src={data.imageSrc}\r\n                    />\r\n                    <div className=\"EditorFeatureLabel\">\r\n                        {data.displayText}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        });\r\n    };\r\n\r\n    const getSocialMediaButtons = (size:ISize) => {\r\n        return SocialMediaData.map((data:ISocialMedia, index: number) => {\r\n            return <ImageButton\r\n                key={index}\r\n                buttonSize={size}\r\n                image={data.imageSrc}\r\n                imageAlt={data.imageAlt}\r\n                href={data.href}\r\n            />\r\n        });\r\n    };\r\n\r\n    const topNavigationBar = <div className={getClassName()}>\r\n        <div className=\"NavigationBarGroupWrapper\">\r\n            <div className=\"Header\">\r\n                <img\r\n                    draggable={false}\r\n                    alt={\"make-sense\"}\r\n                    src={\"/dbFavicon.png\"}\r\n                />\r\n                Make Sense\r\n            </div>\r\n        </div>\r\n        <div className=\"TriangleHorizontal Bottom\">\r\n            <div className=\"TriangleHorizontalContent\"/>\r\n        </div>\r\n    </div>;\r\n\r\n    const firstStage = <div className=\"FirstStage\">\r\n        <img\r\n            draggable={false}\r\n            alt={\"main-logo\"}\r\n            src={\"ico/main-image-color.png\"}\r\n        />\r\n        <div className=\"TriangleHorizontal Bottom\">\r\n            <div className=\"TriangleHorizontalContent\"/>\r\n        </div>\r\n    </div>;\r\n\r\n    const secondStage = <div className=\"SecondStage\">\r\n        {getEditorFeatureTiles(EditorFeatureData.slice(0, 3))}\r\n    </div>;\r\n\r\n    const thirdStage = <div className=\"ThirdStage\">\r\n        {getEditorFeatureTiles(EditorFeatureData.slice(3, 6))}\r\n        <div className=\"TriangleHorizontal Top\">\r\n            <div className=\"TriangleHorizontalContent\"/>\r\n        </div>\r\n        <div className=\"TriangleHorizontal Bottom\">\r\n            <div className=\"TriangleHorizontalContent\"/>\r\n        </div>\r\n    </div>;\r\n\r\n    const fourthStage = <div className=\"FourthStage\">\r\n        <div className=\"Message\">\r\n            Due to the small size of the screen we do not support our editor on mobile devices. Check what you missed and visit us from a desktop.\r\n        </div>\r\n        <div className=\"SocialMediaWrapper\">\r\n            {getSocialMediaButtons({width: 40, height: 40})}\r\n        </div>\r\n    </div>;\r\n\r\n    return(<div className=\"MobileMainView\">\r\n        {topNavigationBar}\r\n        <Scrollbars\r\n            onScrollFrame={onScroll}\r\n        >\r\n            <div\r\n                className=\"MobileMainViewContent\"\r\n                style={{width: size.width}}\r\n            >\r\n                {firstStage}\r\n                {secondStage}\r\n                {thirdStage}\r\n                {fourthStage}\r\n            </div>\r\n        </Scrollbars>\r\n    </div>)\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    size: state.general.windowSize\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MobileMainView);","import React from 'react';\r\nimport './SizeItUpView.scss';\r\nimport {Settings} from \"../../settings/Settings\";\r\n\r\nexport const SizeItUpView: React.FC = () => {\r\n    return(<div className=\"SizeItUpView\">\r\n        <p className=\"extraBold\">Ops... This window is to tight for me!</p>\r\n        <img\r\n            draggable={false}\r\n            alt={\"small_window\"}\r\n            src={\"ico/small_window.png\"}\r\n        />\r\n        <p className=\"extraBold\">Please... make it at least {Settings.EDITOR_MIN_WIDTH} x {Settings.EDITOR_MIN_HEIGHT} px.</p>\r\n    </div>)\r\n};","import React from 'react';\r\nimport './App.scss';\r\nimport EditorView from \"./views/EditorView/EditorView\";\r\nimport MainView from \"./views/MainView/MainView\";\r\nimport { ProjectType } from \"./data/enums/ProjectType\";\r\nimport { AppState } from \"./store\";\r\nimport { connect } from \"react-redux\";\r\nimport PopupView from \"./views/PopupView/PopupView\";\r\nimport MobileMainView from \"./views/MobileMainView/MobileMainView\";\r\nimport { ISize } from \"./interfaces/ISize\";\r\nimport { Settings } from \"./settings/Settings\";\r\nimport { SizeItUpView } from \"./views/SizeItUpView/SizeItUpView\";\r\nimport { PlatformModel } from \"./staticModels/PlatformModel\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface IProps {\r\n    projectType: ProjectType;\r\n    windowSize: ISize;\r\n    ObjectDetectorLoaded: boolean;\r\n    PoseDetectionLoaded: boolean;\r\n}\r\n\r\nconst App: React.FC<IProps> = ({ projectType, windowSize, ObjectDetectorLoaded, PoseDetectionLoaded }) => {\r\n    const selectRoute = () => {\r\n        if (!!PlatformModel.mobileDeviceData.manufacturer && !!PlatformModel.mobileDeviceData.os)\r\n            return <MobileMainView />;\r\n        if (!projectType)\r\n            return <MainView />;\r\n        else {\r\n            if (windowSize.height < Settings.EDITOR_MIN_HEIGHT || windowSize.width < Settings.EDITOR_MIN_WIDTH) {\r\n                return <SizeItUpView />;\r\n            } else {\r\n                return <EditorView />;\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classNames(\"App\", { \"AI\": ObjectDetectorLoaded || PoseDetectionLoaded })}\r\n            draggable={false}\r\n        >\r\n            {selectRoute()}\r\n            <PopupView />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n    projectType: state.general.projectData.type,\r\n    windowSize: state.general.windowSize,\r\n    ObjectDetectorLoaded: state.ai.isObjectDetectorLoaded,\r\n    PoseDetectionLoaded: state.ai.isPoseDetectorLoaded\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(App);\r\n","import {LabelsActionTypes, LabelsState, ImageData} from \"./types\";\r\nimport {Action} from \"../Actions\";\r\n\r\nconst initialState: LabelsState = {\r\n    activeImageIndex: null,\r\n    activeLabelNameId: null,\r\n    activeLabelType: null,\r\n    activeLabelId: null,\r\n    highlightedLabelId: null,\r\n    imagesData: [],\r\n    firstLabelCreatedFlag: false,\r\n    labels: [],\r\n    cameras: []\r\n};\r\n\r\nexport function labelsReducer(\r\n    state = initialState,\r\n    action: LabelsActionTypes\r\n): LabelsState {\r\n    switch (action.type) {\r\n        case Action.UPDATE_ACTIVE_IMAGE_INDEX: {\r\n            return {\r\n                ...state,\r\n                activeImageIndex: action.payload.activeImageIndex\r\n            }\r\n        }\r\n        case Action.UPDATE_ACTIVE_LABEL_NAME_ID: {\r\n            return {\r\n                ...state,\r\n                activeLabelNameId: action.payload.activeLabelNameId\r\n            }\r\n        }\r\n        case Action.UPDATE_ACTIVE_LABEL_ID: {\r\n            return {\r\n                ...state,\r\n                activeLabelId: action.payload.activeLabelId\r\n            }\r\n        }\r\n        case Action.UPDATE_HIGHLIGHTED_LABEL_ID: {\r\n            return {\r\n                ...state,\r\n                highlightedLabelId: action.payload.highlightedLabelId\r\n            }\r\n        }\r\n        case Action.UPDATE_ACTIVE_LABEL_TYPE: {\r\n            return {\r\n                ...state,\r\n                activeLabelType: action.payload.activeLabelType\r\n            }\r\n        }\r\n        case Action.UPDATE_IMAGE_DATA_BY_ID: {\r\n            return {\r\n                ...state,\r\n                imagesData: state.imagesData.map((imageData: ImageData) =>\r\n                    imageData.id === action.payload.id ? action.payload.newImageData : imageData\r\n                )\r\n            }\r\n        }\r\n        case Action.ADD_IMAGES_DATA: {\r\n            return {\r\n                ...state,\r\n                imagesData: state.imagesData.concat(action.payload.imageData)\r\n            }\r\n        }\r\n        case Action.UPDATE_IMAGES_DATA: {\r\n            return {\r\n                ...state,\r\n                imagesData: action.payload.imageData\r\n            }\r\n        }\r\n        case Action.UPDATE_LABEL_NAMES: {\r\n            return {\r\n                ...state,\r\n                labels: action.payload.labels\r\n            }\r\n        }\r\n        case Action.UPDATE_CAMERA_IDS: {\r\n            return {\r\n                ...state,\r\n                cameras: action.payload.cameras\r\n            }\r\n        }\r\n        case Action.UPDATE_FIRST_LABEL_CREATED_FLAG: {\r\n            return {\r\n                ...state,\r\n                firstLabelCreatedFlag: action.payload.firstLabelCreatedFlag\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GeneralActionTypes, GeneralState} from \"./types\";\r\nimport {Action} from \"../Actions\";\r\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\r\nimport {ViewPointSettings} from \"../../settings/ViewPointSettings\";\r\n\r\nconst initialState: GeneralState = {\r\n    configFolder: null,\r\n    windowSize: null,\r\n    activePopupType: null,\r\n    customCursorStyle: CustomCursorStyle.DEFAULT,\r\n    activeContext: null,\r\n    preventCustomCursor: false,\r\n    imageDragMode: false,\r\n    crossHairVisible: true,\r\n    projectData: {\r\n        type: null,\r\n        name: null,\r\n    },\r\n    zoom: ViewPointSettings.MIN_ZOOM,\r\n    error: \"\"\r\n};\r\n\r\nexport function generalReducer(\r\n    state = initialState,\r\n    action: GeneralActionTypes\r\n): GeneralState {\r\n    switch (action.type) {\r\n        case Action.UPDATE_WINDOW_SIZE: {\r\n            return {\r\n                ...state,\r\n                windowSize: action.payload.windowSize\r\n            }\r\n        }\r\n        case Action.UPDATE_ACTIVE_POPUP_TYPE: {\r\n            return {\r\n                ...state,\r\n                activePopupType: action.payload.activePopupType\r\n            }\r\n        }\r\n        case Action.UPDATE_CUSTOM_CURSOR_STYLE: {\r\n            return {\r\n                ...state,\r\n                customCursorStyle: action.payload.customCursorStyle\r\n            }\r\n        }\r\n        case Action.UPDATE_CONTEXT: {\r\n            return {\r\n                ...state,\r\n                activeContext: action.payload.activeContext\r\n            }\r\n        }\r\n        case Action.UPDATE_PREVENT_CUSTOM_CURSOR_STATUS: {\r\n            return {\r\n                ...state,\r\n                preventCustomCursor: action.payload.preventCustomCursor\r\n            }\r\n        }\r\n        case Action.UPDATE_IMAGE_DRAG_MODE_STATUS: {\r\n            return {\r\n                ...state,\r\n                imageDragMode: action.payload.imageDragMode\r\n            }\r\n        }\r\n        case Action.UPDATE_CROSS_HAIR_VISIBLE_STATUS: {\r\n            return {\r\n                ...state,\r\n                crossHairVisible: action.payload.crossHairVisible\r\n            }\r\n        }\r\n        case Action.UPDATE_PROJECT_DATA: {\r\n            return {\r\n                ...state,\r\n                projectData: action.payload.projectData\r\n            }\r\n        }\r\n        case Action.UPDATE_ZOOM: {\r\n            return {\r\n                ...state,\r\n                zoom: action.payload.zoom\r\n            }\r\n        }\r\n        case Action.UPDATE_CONFIG_FOLDER: {\r\n            return {\r\n                ...state,\r\n                configFolder: action.payload.configFolder\r\n            }\r\n        }\r\n        case Action.UPDATE_ERROR_MSG: {\r\n            return {\r\n                ...state,\r\n                error: action.payload.error\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {AIActionTypes, AIState} from \"./types\";\r\nimport {Action} from \"../Actions\";\r\n\r\nconst initialState: AIState = {\r\n    suggestedLabelList: [],\r\n    rejectedSuggestedLabelList: [],\r\n    isObjectDetectorLoaded: false,\r\n    isPoseDetectorLoaded: false,\r\n    isAIDisabled: false\r\n};\r\n\r\nexport function aiReducer(\r\n    state = initialState,\r\n    action: AIActionTypes\r\n): AIState {\r\n    switch (action.type) {\r\n        case Action.UPDATE_SUGGESTED_LABEL_LIST: {\r\n            return {\r\n                ...state,\r\n                suggestedLabelList: action.payload.labelList\r\n            }\r\n        }\r\n        case Action.UPDATE_REJECTED_SUGGESTED_LABEL_LIST: {\r\n            return {\r\n                ...state,\r\n                rejectedSuggestedLabelList: action.payload.labelList\r\n            }\r\n        }\r\n        case Action.UPDATE_OBJECT_DETECTOR_STATUS: {\r\n            return {\r\n                ...state,\r\n                isObjectDetectorLoaded: action.payload.isObjectDetectorLoaded\r\n            }\r\n        }\r\n        case Action.UPDATE_POSE_DETECTOR_STATUS: {\r\n            return {\r\n                ...state,\r\n                isPoseDetectorLoaded: action.payload.isPoseDetectorLoaded\r\n            }\r\n        }\r\n        case Action.UPDATE_DISABLED_AI_FLAG: {\r\n            return {\r\n                ...state,\r\n                isAIDisabled: action.payload.isAIDisabled\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport {labelsReducer} from \"./labels/reducer\";\r\nimport {generalReducer} from \"./general/reducer\";\r\nimport {aiReducer} from \"./ai/reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    general: generalReducer,\r\n    labels: labelsReducer,\r\n    ai: aiReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;","export class EnvironmentUtil {\r\n    public static isDev(): boolean {\r\n        return process.env.NODE_ENV === 'development';\r\n    }\r\n\r\n    public static isProd(): boolean {\r\n        return process.env.NODE_ENV === 'production';\r\n    }\r\n}","import {updateWindowSize} from \"../../store/general/actionCreators\";\r\nimport {ContextManager} from \"../context/ContextManager\";\r\nimport {store} from \"../../index\";\r\nimport {PlatformUtil} from \"../../utils/PlatformUtil\";\r\nimport {PlatformModel} from \"../../staticModels/PlatformModel\";\r\nimport {EventType} from \"../../data/enums/EventType\";\r\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\r\nimport {EnvironmentUtil} from \"../../utils/EnvironmentUtil\";\r\n\r\nexport class AppInitializer {\r\n    public static inti():void {\r\n        AppInitializer.handleResize();\r\n        AppInitializer.detectDeviceParams();\r\n        AppInitializer.handleAccidentalPageExit();\r\n        window.addEventListener(EventType.RESIZE, AppInitializer.handleResize);\r\n        window.addEventListener(EventType.MOUSE_WHEEL, AppInitializer.disableGenericScrollZoom,{passive:false});\r\n        window.addEventListener(EventType.KEY_DOWN, AppInitializer.disableUnwantedKeyBoardBehaviour);\r\n        window.addEventListener(EventType.KEY_PRESS, AppInitializer.disableUnwantedKeyBoardBehaviour);\r\n        ContextManager.init();\r\n    }\r\n\r\n    private static handleAccidentalPageExit = () => {\r\n        window.onbeforeunload = (event) => {\r\n            const projectType = GeneralSelector.getProjectType();\r\n            if (projectType != null && EnvironmentUtil.isProd()) {\r\n                event.preventDefault();\r\n                event.returnValue = '';\r\n            }\r\n        }\r\n    };\r\n\r\n    private static handleResize = () => {\r\n        store.dispatch(updateWindowSize({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        }));\r\n    };\r\n\r\n    private static disableUnwantedKeyBoardBehaviour = (event: KeyboardEvent) => {\r\n        if (PlatformModel.isMac && event.metaKey) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        if ([\"=\", \"+\", \"-\"].includes(event.key)) {\r\n            if (event.ctrlKey || (PlatformModel.isMac && event.metaKey)) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    };\r\n\r\n    private static disableGenericScrollZoom = (event: MouseEvent) => {\r\n        if (event.ctrlKey || (PlatformModel.isMac && event.metaKey)) {\r\n            event.preventDefault();\r\n        }\r\n    };\r\n\r\n    private static detectDeviceParams = () => {\r\n        const userAgent: string = window.navigator.userAgent;\r\n        PlatformModel.mobileDeviceData = PlatformUtil.getMobileDeviceData(userAgent);\r\n        PlatformModel.isMac = PlatformUtil.isMac(userAgent);\r\n        PlatformModel.isSafari = PlatformUtil.isSafari(userAgent);\r\n        PlatformModel.isFirefox = PlatformUtil.isFirefox(userAgent);\r\n    };\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport configureStore from \"./configureStore\";\r\nimport { Provider } from \"react-redux\";\r\nimport { AppInitializer } from \"./logic/initializer/AppInitializer\";\r\n\r\nexport const store = configureStore();\r\nAppInitializer.inti();\r\n\r\nReactDOM.render(\r\n    (<Provider store={store}>\r\n        <App />\r\n    </Provider>),\r\n    document.getElementById('root') || document.createElement('div') // fix for testing purposes\r\n);","import { createStore } from 'redux';\r\nimport { rootReducer } from './store';\r\n\r\nexport default function configureStore() {\r\n    return createStore(\r\n        rootReducer,\r\n        // @ts-ignore\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n}"],"sourceRoot":""}